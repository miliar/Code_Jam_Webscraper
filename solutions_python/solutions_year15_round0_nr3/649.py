def f(s):
    M = [0] * len(s)
    M[0] = s[0]
    for i in range(1, len(s)):
        M[i] = Mul[M[i - 1]][s[i]]
    for i in range(len(s)):
        for j in range(i + 1, len(s)):
            if M[i] == "i" and Div[M[j]][M[i]] == "j" and Div[M[-1]][M[j]] == "k":
                return "YES"
    return "NO"


Mul = {'-1': {'1': '-1', '-j': 'j', '-k': 'k', 'i': '-i', '-1': '1', '-i': 'i', 'k': '-k', 'j': '-j'},
        '-j': {'1': '-j', '-j': '-1', '-k': 'i', 'i': 'k', '-1': 'j', '-i': '-k', 'k': '-i', 'j': '1'},
        '-k': {'1': '-k', '-j': '-i', '-k': '-1', 'i': '-j', '-1': 'k', '-i': 'j', 'k': '1', 'j': 'i'},
        'i': {'1': 'i', '-j': '-k', '-k': 'j', 'i': '-1', '-1': '-i', '-i': '-1', 'k': '-j', 'j': 'k'},
        '1': {'1': '1', '-j': '-j', '-k': '-k', 'i': 'i', '-1': '-1', '-i': '-i', 'k': 'k', 'j': 'j'},
        '-i': {'1': '-i', '-j': 'k', '-k': '-j', 'i': '1', '-1': 'i', '-i': '-1', 'k': 'j', 'j': '-k'},
        'k': {'1': 'k', '-j': 'i', '-k': '1', 'i': 'j', '-1': '-k', '-i': '-j', 'k': '-1', 'j': '-i'},
        'j': {'1': 'j', '-j': '1', '-k': '-i', 'i': '-k', '-1': '-j', '-i': 'k', 'k': 'i', 'j': '-1'}}

Div = {'j': {'j': '1', '-k': '-i', '-1': '-j', '-j': '-1', 'i': '-k', 'k': 'i', '1': 'j', '-i': 'k'},
       '-k': {'j': 'i', '-k': '1', '-1': 'k', '-j': '-i', 'i': '-j', 'k': '-1', '1': '-k', '-i': 'j'},
       '1': {'j': '-j', '-k': 'k', '-1': '-1', '-j': 'j', '1': '1', 'k': '-k', '-i': 'i', 'i': '-i'},
       '-j': {'j': '-1', '-k': 'i', '-1': 'j', '-j': '1', 'i': 'k', 'k': '-i', '1': '-j', '-i': '-k'},
       'i': {'j': 'k', '-k': 'j', '-1': '-i', '-j': '-k', 'i': '1', 'k': '-j', '1': 'i', '-i': '-1'},
       '-i': {'j': '-k', '-k': '-j', '-1': 'i', '-j': 'k', 'i': '-1', 'k': 'j', '1': '-i', '-i': '1'},
       'k': {'j': '-i', '-k': '-1', '-1': '-k', '-j': 'i', 'i': 'j', 'k': '1', '1': 'k', '-i': '-j'},
       '-1': {'j': 'j', '-k': '-k', '-1': '1', '-j': '-j', 'i': '-i', 'k': 'k', '1': '-1', '-i': '-i'}}


fin = open('C-small-attempt1.in')
fout = open('C-small-attempt1.out', 'w')
n = int(fin.readline())
for i in range(n):
    l, x = map(int, fin.readline().split())
    s = fin.readline().rstrip()
    if i == 3:
        pass
    fout.write("Case #" + str(i + 1) + ": " + str(f(s * x)) + "\n")
fin.close()
fout.close()
