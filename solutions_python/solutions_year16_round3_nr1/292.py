{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "print >> open(\"input-b.in\", \"w\"), \"\"\"4\n",
    "2\n",
    "2 2\n",
    "3\n",
    "3 2 2\n",
    "3\n",
    "1 1 2\n",
    "3\n",
    "2 3 1\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Case #1: BA BA\r\n",
      "Case #2: A BA AC CB\r\n",
      "Case #3: AC CB\r\n",
      "Case #4: AB AB CB\r\n",
      "Case #5: A A CB\r\n",
      "Case #6: A A AB CB\r\n",
      "Case #7: AC AC AC CB\r\n",
      "Case #8: A CB\r\n",
      "Case #9: BA BA BA\r\n",
      "Case #10: B BC BC AC CB\r\n",
      "Case #11: A A AC CB\r\n",
      "Case #12: BC AC CB\r\n",
      "Case #13: AC AC CB\r\n",
      "Case #14: C C BA AC CB\r\n",
      "Case #15: BA\r\n",
      "Case #16: AB CB\r\n",
      "Case #17: B B BC AC CB\r\n",
      "Case #18: B BA AC CB\r\n",
      "Case #19: B BC AC CB\r\n",
      "Case #20: A AB AB AB CB\r\n",
      "Case #21: A A BA AC CB\r\n",
      "Case #22: B CB BA AC CB\r\n",
      "Case #23: A CB BA AC CB\r\n",
      "Case #24: B BA BA AC CB\r\n",
      "Case #25: A A AC AC CB\r\n",
      "Case #26: CB BA AC CB\r\n",
      "Case #27: B B BA AC CB\r\n",
      "Case #28: BA BA AC CB\r\n",
      "Case #29: BA AC CB\r\n",
      "Case #30: CA BA AC CB\r\n",
      "Case #31: A AC AC CB\r\n",
      "Case #32: C BA AC CB\r\n",
      "Case #33: A AC CB\r\n",
      "Case #34: B AC CB\r\n",
      "Case #35: A AB CB\r\n",
      "Case #36: A A AB AB CB\r\n",
      "Case #37: A BA BA AC CB\r\n",
      "Case #38: C CA BA AC CB\r\n",
      "Case #39: A AC AC AC CB\r\n",
      "Case #40: A AB AB CB\r\n",
      "Case #41: BC BC AC CB\r\n",
      "Case #42: AB AB AB CB\r\n",
      "Case #43: A CA BA AC CB\r\n",
      "Case #44: B B AC CB\r\n",
      "Case #45: BA BA BA BA\r\n",
      "Case #46: C CB BA AC CB\r\n"
     ]
    }
   ],
   "source": [
    "import heapq\n",
    "def solve(freqs, f, case):\n",
    "    heap = []\n",
    "    for i, value in enumerate(freqs):\n",
    "        heapq.heappush(heap, (-value, i))\n",
    "    tokens = []\n",
    "    try:\n",
    "        while True:\n",
    "            token = heapq.heappop(heap)\n",
    "            tokens.append(chr(ord('A') + token[1]))\n",
    "            if token[0] + 1 < 0:\n",
    "                heapq.heappush(heap, (token[0] + 1, token[1]))\n",
    "    except IndexError:\n",
    "        pass\n",
    "    \n",
    "    pair_tokens = []\n",
    "    i = 0\n",
    "    tokens = tokens[::-1]\n",
    "    while i < len(tokens):\n",
    "        if i + 1 < len(tokens) and tokens[i] != tokens[i + 1]:\n",
    "            pair_tokens.append(tokens[i] + tokens[i + 1])\n",
    "            i += 2\n",
    "        else:\n",
    "            pair_tokens.append(tokens[i])\n",
    "            i += 1\n",
    "    pair_tokens = pair_tokens[::-1]\n",
    "    print >> f, 'Case #{}: {}'.format(case, ' '.join(pair_tokens))\n",
    "        \n",
    "def solve_file(filename):\n",
    "    i = 1\n",
    "    state = 0\n",
    "    with open(filename + \".out\", 'w') as fout:\n",
    "        with open(filename) as fin:\n",
    "            for line in fin.readlines()[2::2]:\n",
    "                freqs = map(int, line.split())\n",
    "                state = 0\n",
    "                solve(freqs, fout, i)\n",
    "                i += 1\n",
    "                \n",
    "solve_file(\"input-b.in\")\n",
    "!cat \"input-b.in.out\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "46\r\n",
      "2\r\n",
      "2 2\r\n",
      "3\r\n",
      "3 2 2\r\n",
      "3\r\n",
      "1 1 2\r\n",
      "3\r\n",
      "2 3 1\r\n",
      "3\r\n",
      "2 1 1\r\n",
      "3\r\n",
      "3 2 1\r\n",
      "3\r\n",
      "3 1 4\r\n",
      "3\r\n",
      "1 1 1\r\n",
      "2\r\n",
      "3 3\r\n",
      "3\r\n",
      "1 4 4\r\n",
      "3\r\n",
      "3 1 2\r\n",
      "3\r\n",
      "1 2 3\r\n",
      "3\r\n",
      "2 1 3\r\n",
      "3\r\n",
      "2 2 4\r\n",
      "2\r\n",
      "1 1\r\n",
      "3\r\n",
      "1 2 1\r\n",
      "3\r\n",
      "1 4 3\r\n",
      "3\r\n",
      "2 3 2\r\n",
      "3\r\n",
      "1 3 3\r\n",
      "3\r\n",
      "4 4 1\r\n",
      "3\r\n",
      "4 2 2\r\n",
      "3\r\n",
      "2 4 3\r\n",
      "3\r\n",
      "3 3 3\r\n",
      "3\r\n",
      "3 4 2\r\n",
      "3\r\n",
      "4 1 3\r\n",
      "3\r\n",
      "2 3 3\r\n",
      "3\r\n",
      "2 4 2\r\n",
      "3\r\n",
      "3 3 2\r\n",
      "3\r\n",
      "2 2 2\r\n",
      "3\r\n",
      "3 2 3\r\n",
      "3\r\n",
      "3 1 3\r\n",
      "3\r\n",
      "2 2 3\r\n",
      "3\r\n",
      "2 1 2\r\n",
      "3\r\n",
      "1 2 2\r\n",
      "3\r\n",
      "2 2 1\r\n",
      "3\r\n",
      "4 3 1\r\n",
      "3\r\n",
      "4 3 2\r\n",
      "3\r\n",
      "3 2 4\r\n",
      "3\r\n",
      "4 1 4\r\n",
      "3\r\n",
      "3 3 1\r\n",
      "3\r\n",
      "1 3 4\r\n",
      "3\r\n",
      "3 4 1\r\n",
      "3\r\n",
      "4 2 3\r\n",
      "3\r\n",
      "1 3 2\r\n",
      "2\r\n",
      "4 4\r\n",
      "3\r\n",
      "2 3 4\r\n"
     ]
    }
   ],
   "source": [
    "!cat input-b.in"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
