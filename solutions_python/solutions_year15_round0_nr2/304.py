#coding: cp932
# 2015 Qualification Problem B
input = iter('''
6
4
8 8 6 1
1
4
5
4 5 5 5 5
4
1 2 1 2
1
4
1
1000 1000 1000 1000
4

'''.splitlines()[1:])
import sys
output = sys.stdout

#input  = open(r'B-small-attempt6.in')
#output = open(r'B-small-attempt6-2.out', 'w')

input  = open(r'B-large.in')
output = open(r'B-large.out', 'w')


def div(m,d):
	if d == 1:
		return (m,)
		
	if (m,d) in div.memo:
		return div.memo[(m,d)]
		
	x = (m+d-1)//d
	res = (x,) + div(m-x, d-1)
	div.memo[(m,d)] = res
	return res
div.memo = {}


def solve(D):
	if D == []:
		return 0
	D = sorted(D)
	N = len(D)
	
	cand = [D[-1]]
	m = D.pop()
	if m <= 3:
		return m
	for d in range(2,max(m//3+1,3)):
		add = div(m,d)
		res = solve(D+list(add))+d-1
		cand += [res]
	return min(cand)

	
def bsearch(key, l):
	if l == []:
		return 0
	if len(l) == 1:
		if key >= l[0]:
			return 0
		else:
			return 1
	
	m = len(l)//2
	
	
	if key == l[m]: return m
	if key < l[m]:
		return m + bsearch(key, l[m:])
	if key > l[m]:
		return bsearch(key, l[:m])
		
	raise
		
#print(bsearch(11,[10,6,1]))
#print(bsearch(10,[10,6,1]))
#print(bsearch( 9,[10,6,1]))
#print(bsearch( 7,[10,6,1]))
#print(bsearch( 6,[10,6,1]))
#print(bsearch( 5,[10,6,1]))
#print(bsearch( 2,[10,6,1]))
#print(bsearch( 1,[10,6,1]))
#print(bsearch( 0,[10,6,1]))
#print(bsearch( 2,[1]))
#print(bsearch( 1,[1]))
#print(bsearch( 0,[1]))
#raise

def solve(D):
	D.sort()
	D.reverse()
	
	print(D)
	
	M = D[0]
	L = []
	
	for d in D:
		l = []
		for v in range(1,M+1):
			if d <= v:
				u = 0
			else:
				u = d//v - (1 if d%v==0 else 0)
			
			l += [u]
		L += [l]
	#for l in L:
	#	print(l)
	
	best = M
	for v in range(1,M+1):
		divcnt = 0
		for l in L:
			divcnt += l[v-1]
		best = min(best, v+divcnt)
		
	
	return best


caseCnt = int(next(input))
for caseNo in range(caseCnt):
	d = int(next(input))
	*D, = map(int, next(input).split())
	answer = solve(D)
	print('Case #%d:'%(caseNo+1), answer, file=output)
	
