{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# input() reads a string with a line of input, stripping the '\\n' (newline) at the end.\n",
    "# This is all you need for most Google Code Jam problems.\n",
    "\n",
    "fil = open(\"input.in.txt\").readlines()\n",
    "t = int(fil[0])  # read a line with a single integer\n",
    "def populate(m):\n",
    "    #print 'enter populate'\n",
    "    while m>0 and -1 in array:\n",
    "        digit = m%10\n",
    "        array[digit] += 1\n",
    "        #print digit\n",
    "        #print array\n",
    "        m = m/10\n",
    "        \n",
    "for i in range(1, t+1):\n",
    "    array = [-1 for p in range(10)]\n",
    "    m = int(fil[i])  # read a list of integers, 2 in this case\n",
    "    j = 1\n",
    "    if m == 0:\n",
    "        print\"Case #\",i,\":\",\" INSOMNIA\"\n",
    "    else:\n",
    "        while -1 in array:\n",
    "            l = m*j\n",
    "            #print 'number passed',l\n",
    "            populate(l)\n",
    "            j += 1\n",
    "        if -1 in array:\n",
    "            print\"Case #\",i,\":\",\" INSOMNIA\"\n",
    "        else:\n",
    "            print \"Case #\",i,\":\",l\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Case # 1 : 1\n",
      "Case # 2 : 1\n",
      "Case # 3 : 2\n",
      "Case # 4 : 0\n",
      "Case # 5 : 3\n",
      "Case # 6 : 3\n",
      "Case # 7 : 3\n",
      "Case # 8 : 0\n",
      "Case # 9 : 3\n",
      "Case # 10 : 6\n",
      "Case # 11 : 3\n",
      "Case # 12 : 2\n",
      "Case # 13 : 1\n",
      "Case # 14 : 2\n",
      "Case # 15 : 7\n",
      "Case # 16 : 4\n",
      "Case # 17 : 2\n",
      "Case # 18 : 4\n",
      "Case # 19 : 3\n",
      "Case # 20 : 1\n",
      "Case # 21 : 7\n",
      "Case # 22 : 0\n",
      "Case # 23 : 1\n",
      "Case # 24 : 4\n",
      "Case # 25 : 3\n",
      "Case # 26 : 0\n",
      "Case # 27 : 1\n",
      "Case # 28 : 10\n",
      "Case # 29 : 4\n",
      "Case # 30 : 4\n",
      "Case # 31 : 7\n",
      "Case # 32 : 3\n",
      "Case # 33 : 5\n",
      "Case # 34 : 6\n",
      "Case # 35 : 2\n",
      "Case # 36 : 2\n",
      "Case # 37 : 2\n",
      "Case # 38 : 6\n",
      "Case # 39 : 7\n",
      "Case # 40 : 1\n",
      "Case # 41 : 7\n",
      "Case # 42 : 2\n",
      "Case # 43 : 3\n",
      "Case # 44 : 4\n",
      "Case # 45 : 1\n",
      "Case # 46 : 5\n",
      "Case # 47 : 7\n",
      "Case # 48 : 5\n",
      "Case # 49 : 5\n",
      "Case # 50 : 9\n",
      "Case # 51 : 2\n",
      "Case # 52 : 7\n",
      "Case # 53 : 2\n",
      "Case # 54 : 4\n",
      "Case # 55 : 2\n",
      "Case # 56 : 6\n",
      "Case # 57 : 5\n",
      "Case # 58 : 5\n",
      "Case # 59 : 1\n",
      "Case # 60 : 5\n",
      "Case # 61 : 2\n",
      "Case # 62 : 6\n",
      "Case # 63 : 9\n",
      "Case # 64 : 4\n",
      "Case # 65 : 6\n",
      "Case # 66 : 7\n",
      "Case # 67 : 5\n",
      "Case # 68 : 2\n",
      "Case # 69 : 0\n",
      "Case # 70 : 1\n",
      "Case # 71 : 3\n",
      "Case # 72 : 2\n",
      "Case # 73 : 6\n",
      "Case # 74 : 2\n",
      "Case # 75 : 3\n",
      "Case # 76 : 4\n",
      "Case # 77 : 6\n",
      "Case # 78 : 1\n",
      "Case # 79 : 3\n",
      "Case # 80 : 3\n",
      "Case # 81 : 7\n",
      "Case # 82 : 3\n",
      "Case # 83 : 5\n",
      "Case # 84 : 2\n",
      "Case # 85 : 3\n",
      "Case # 86 : 4\n",
      "Case # 87 : 1\n",
      "Case # 88 : 3\n",
      "Case # 89 : 7\n",
      "Case # 90 : 4\n",
      "Case # 91 : 2\n",
      "Case # 92 : 7\n",
      "Case # 93 : 1\n",
      "Case # 94 : 7\n",
      "Case # 95 : 1\n",
      "Case # 96 : 1\n",
      "Case # 97 : 8\n",
      "Case # 98 : 2\n",
      "Case # 99 : 3\n",
      "Case # 100 : 5\n"
     ]
    }
   ],
   "source": [
    "fil = open(\"B-small-attempt0.in.txt\").readlines()\n",
    "t = int(fil[0])\n",
    "\n",
    "a = ['-','-','+','-']\n",
    "def flipper(k):\n",
    "    #print 'enter flipper'\n",
    "    for p in range(len(k)):\n",
    "        if k[p] == '-':\n",
    "            k[p] = '+'\n",
    "        else:\n",
    "            k[p] = '-'\n",
    "    #print 'returning from flipper',k \n",
    "    return k\n",
    "\n",
    "def pancake(stack):\n",
    "    count = 0\n",
    "    while \"-\" in stack :\n",
    "        #print stack\n",
    "        #print stack\n",
    "        j = (len(stack) - 1) - stack[::-1].index('-')\n",
    "        \n",
    "        if stack[0]=='+':\n",
    "            j = stack.index('-')-1\n",
    "        nu = flipper(stack[0:j+1])[::-1]\n",
    "        if stack[0:j+1] == nu:\n",
    "            stack[0:j+1] = stack[0:j+1][::-1]   \n",
    "        else:\n",
    "            stack[0:j+1] = nu\n",
    "        count += 1 \n",
    "    return count \n",
    "\n",
    "\n",
    "for i in range(1, t+1):\n",
    "    stack = list(fil[i])\n",
    "    stack.pop()\n",
    "    #print stack\n",
    "    print\"Case #\",i,\":\",pancake(stack)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
