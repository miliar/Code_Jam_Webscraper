{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Reverts + to - and vice-versa\n",
    "import time\n",
    "\n",
    "def switch(sign):\n",
    "    assert sign in [\"+\",\"-\"], \"You've got weird pancakes\"\n",
    "    if sign==\"+\":\n",
    "        return \"-\"\n",
    "    else:\n",
    "        return \"+\"\n",
    "\n",
    "    \n",
    "# Flips the first n pancakes around\n",
    "# Takes the pancakes (i.e \"+-+++---\") and n as an imput\n",
    "# Outputs the new list of pancakes\n",
    "def flip(pancakes,n):\n",
    "    assert n<=len(pancakes), \"You've tried to flip \" + str(n) + \" pancakes of the stack \" + str(pancakes)\n",
    "    unchanged = pancakes[n:]\n",
    "    changed = pancakes[:n]\n",
    "    changed = map(lambda x: switch(x),changed[::-1])\n",
    "    changed = \"\".join(changed)\n",
    "    return changed + unchanged\n",
    "\n",
    "\n",
    "# Cuts the last happy pancakes, since they won't affect the # of steps needed\"\n",
    "def cut(pancakes,sign):\n",
    "    assert sign in [\"+\",\"-\"] , \"You're asking for a wrong sign! \"\n",
    "    while pancakes!=\"\" and pancakes[-1]==sign:\n",
    "        pancakes = pancakes[:-1]\n",
    "    return pancakes\n",
    "\n",
    "\n",
    "# Returns the minimum # of flips needed to give the answer\n",
    "def f(pancakes):\n",
    "    pancakes = cut(pancakes,\"+\")\n",
    "    return search(pancakes,\"-\",0)\n",
    "     \n",
    "def search(pancakes,sign,n):\n",
    "    if pancakes == \"\":\n",
    "        return n\n",
    "    else:\n",
    "        return search(cut(pancakes,sign),invert(sign),n+1)\n",
    "    \n",
    "def invert(sign):\n",
    "    assert sign in [\"+\",\"-\"] , \"You're asking to invert a wrong sign! \"\n",
    "    if sign == \"+\":\n",
    "        return \"-\"\n",
    "    else:\n",
    "        return \"+\"\n",
    "\n",
    "    \n",
    "\n",
    "## Reads the file and removes the first line\n",
    "def read_file(location):\n",
    "    return open(location,\"r\").read().split(\"\\n\")[1:]\n",
    "\n",
    "def answer():\n",
    "    k = 1\n",
    "    X = read_file(\"Input.txt\")\n",
    "    X = [x for x in X if x != '']\n",
    "    Y = map(lambda x:str(f(x)), X)\n",
    "    for i in range(len(Y)):\n",
    "        Y[i] = \"Case #\" + str(i+1) + \": \" + str (Y[i])\n",
    "    open(\"Output.txt\", \"wb\").write(\"\\n\".join(Y))\n",
    "    output = \"\\n\".join(Y)\n",
    "    return output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Case #1: 1\n",
      "Case #2: 1\n",
      "Case #3: 2\n",
      "Case #4: 0\n",
      "Case #5: 3\n",
      "Case #6: 3\n",
      "Case #7: 6\n",
      "Case #8: 3\n",
      "Case #9: 2\n",
      "Case #10: 3\n",
      "Case #11: 7\n",
      "Case #12: 2\n",
      "Case #13: 5\n",
      "Case #14: 1\n",
      "Case #15: 3\n",
      "Case #16: 5\n",
      "Case #17: 4\n",
      "Case #18: 3\n",
      "Case #19: 2\n",
      "Case #20: 4\n",
      "Case #21: 2\n",
      "Case #22: 3\n",
      "Case #23: 1\n",
      "Case #24: 7\n",
      "Case #25: 4\n",
      "Case #26: 3\n",
      "Case #27: 3\n",
      "Case #28: 6\n",
      "Case #29: 1\n",
      "Case #30: 6\n",
      "Case #31: 1\n",
      "Case #32: 1\n",
      "Case #33: 6\n",
      "Case #34: 2\n",
      "Case #35: 5\n",
      "Case #36: 10\n",
      "Case #37: 4\n",
      "Case #38: 5\n",
      "Case #39: 3\n",
      "Case #40: 6\n",
      "Case #41: 4\n",
      "Case #42: 5\n",
      "Case #43: 2\n",
      "Case #44: 5\n",
      "Case #45: 2\n",
      "Case #46: 3\n",
      "Case #47: 3\n",
      "Case #48: 4\n",
      "Case #49: 2\n",
      "Case #50: 7\n",
      "Case #51: 1\n",
      "Case #52: 6\n",
      "Case #53: 3\n",
      "Case #54: 6\n",
      "Case #55: 4\n",
      "Case #56: 3\n",
      "Case #57: 2\n",
      "Case #58: 4\n",
      "Case #59: 4\n",
      "Case #60: 5\n",
      "Case #61: 5\n",
      "Case #62: 5\n",
      "Case #63: 2\n",
      "Case #64: 6\n",
      "Case #65: 0\n",
      "Case #66: 4\n",
      "Case #67: 6\n",
      "Case #68: 4\n",
      "Case #69: 2\n",
      "Case #70: 6\n",
      "Case #71: 1\n",
      "Case #72: 2\n",
      "Case #73: 6\n",
      "Case #74: 4\n",
      "Case #75: 5\n",
      "Case #76: 4\n",
      "Case #77: 3\n",
      "Case #78: 5\n",
      "Case #79: 6\n",
      "Case #80: 7\n",
      "Case #81: 9\n",
      "Case #82: 1\n",
      "Case #83: 0\n",
      "Case #84: 0\n",
      "Case #85: 6\n",
      "Case #86: 3\n",
      "Case #87: 4\n",
      "Case #88: 5\n",
      "Case #89: 4\n",
      "Case #90: 4\n",
      "Case #91: 1\n",
      "Case #92: 3\n",
      "Case #93: 6\n",
      "Case #94: 6\n",
      "Case #95: 2\n",
      "Case #96: 0\n",
      "Case #97: 3\n",
      "Case #98: 2\n",
      "Case #99: 1\n",
      "Case #100: 3\n"
     ]
    }
   ],
   "source": [
    "print answer()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
