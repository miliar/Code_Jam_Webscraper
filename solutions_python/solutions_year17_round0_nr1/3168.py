{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# use breath-first search to solve it\n",
    "def check_all_positive(single_list_input):\n",
    "    if \"-\" in single_list_input:\n",
    "        return False\n",
    "    else:\n",
    "        return True\n",
    "\n",
    "def get_min_flip(S, K):\n",
    "    seen_already_set = {}\n",
    "    step_count = 0\n",
    "    want_to_check_in_next_step_list = []\n",
    "    all_positive = False\n",
    "    single_combination_length = len(S)\n",
    "    \n",
    "    # convert the string inputs to list\n",
    "    want_to_check_in_next_step_list.append([d for d in S])\n",
    "    \n",
    "    while (True):\n",
    "        # fast checking to see that there are potential candidates for checking\n",
    "        try:\n",
    "            check_got_elements_for_checking = want_to_check_in_next_step_list[0]\n",
    "        except:\n",
    "            step_count = \"IMPOSSIBLE\"\n",
    "            break\n",
    "        \n",
    "        # copy the next step candidate to this step list and check it, then empty the next step list for adding new candidates\n",
    "        want_check_in_current_step = want_to_check_in_next_step_list[:]\n",
    "        want_to_check_in_next_step_list = []\n",
    "        \n",
    "        for single_combination in want_check_in_current_step:\n",
    "            if check_all_positive(single_combination):\n",
    "                all_positive = True\n",
    "                break\n",
    "            else:\n",
    "                seen_already_set[tuple(single_combination)] = None\n",
    "                \n",
    "                # generate all possible combinations without repetition for next step check\n",
    "                for pancake_index in range((K - 1), single_combination_length):\n",
    "                    new_single_comb = []\n",
    "                    \n",
    "                    for flipping_index in range(0, single_combination_length):\n",
    "                        if (flipping_index > (pancake_index - K)) and (flipping_index <= pancake_index):\n",
    "                            # need to flip the current pancake\n",
    "                            if single_combination[flipping_index] == \"+\":\n",
    "                                new_single_comb.append(\"-\")\n",
    "                            else:\n",
    "                                new_single_comb.append(\"+\")\n",
    "                        else:\n",
    "                            new_single_comb.append(single_combination[flipping_index])\n",
    "                            \n",
    "                    # check whether the new combination has seen before\n",
    "                    new_single_comb_tuple = tuple(new_single_comb)\n",
    "                    \n",
    "                    if new_single_comb_tuple not in seen_already_set:\n",
    "                        seen_already_set[new_single_comb_tuple] = None\n",
    "                        want_to_check_in_next_step_list.append(new_single_comb)\n",
    "\n",
    "        if not all_positive:                        \n",
    "            step_count += 1\n",
    "        else:\n",
    "            break\n",
    "\n",
    "    return step_count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "---+-++- 3\n",
      "Case #1: 3\n",
      "+++++ 4\n",
      "Case #2: 0\n",
      "-+-+- 4\n",
      "Case #3: IMPOSSIBLE\n"
     ]
    }
   ],
   "source": [
    "t = int(input())\n",
    "for i in range(1, t + 1):\n",
    "    pancake_input = input().split()\n",
    "    s = pancake_input[0]\n",
    "    k = int(pancake_input[1])\n",
    "    print(\"Case #\" + str(i) + \": \" + str(get_min_flip(s, k)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Case #1: 3\n",
      "Case #2: 0\n",
      "Case #3: IMPOSSIBLE\n",
      "Case #4: 2\n",
      "Case #5: 4\n",
      "Case #6: IMPOSSIBLE\n",
      "Case #7: IMPOSSIBLE\n",
      "Case #8: 5\n",
      "Case #9: 1\n",
      "Case #10: IMPOSSIBLE\n",
      "Case #11: 0\n",
      "Case #12: IMPOSSIBLE\n",
      "Case #13: IMPOSSIBLE\n",
      "Case #14: 2\n",
      "Case #15: IMPOSSIBLE\n",
      "Case #16: IMPOSSIBLE\n",
      "Case #17: 1\n",
      "Case #18: 1\n",
      "Case #19: IMPOSSIBLE\n",
      "Case #20: 3\n",
      "Case #21: 3\n",
      "Case #22: IMPOSSIBLE\n",
      "Case #23: IMPOSSIBLE\n",
      "Case #24: IMPOSSIBLE\n",
      "Case #25: IMPOSSIBLE\n",
      "Case #26: IMPOSSIBLE\n",
      "Case #27: IMPOSSIBLE\n",
      "Case #28: IMPOSSIBLE\n",
      "Case #29: IMPOSSIBLE\n",
      "Case #30: 1\n",
      "Case #31: IMPOSSIBLE\n",
      "Case #32: 3\n",
      "Case #33: 2\n",
      "Case #34: IMPOSSIBLE\n",
      "Case #35: 1\n",
      "Case #36: IMPOSSIBLE\n",
      "Case #37: 1\n",
      "Case #38: 1\n",
      "Case #39: 2\n",
      "Case #40: 2\n",
      "Case #41: IMPOSSIBLE\n",
      "Case #42: 0\n",
      "Case #43: IMPOSSIBLE\n",
      "Case #44: IMPOSSIBLE\n",
      "Case #45: IMPOSSIBLE\n",
      "Case #46: IMPOSSIBLE\n",
      "Case #47: 2\n",
      "Case #48: IMPOSSIBLE\n",
      "Case #49: 0\n",
      "Case #50: 1\n",
      "Case #51: 9\n",
      "Case #52: 1\n",
      "Case #53: IMPOSSIBLE\n",
      "Case #54: 0\n",
      "Case #55: IMPOSSIBLE\n",
      "Case #56: 3\n",
      "Case #57: 1\n",
      "Case #58: IMPOSSIBLE\n",
      "Case #59: IMPOSSIBLE\n",
      "Case #60: 2\n",
      "Case #61: 1\n",
      "Case #62: IMPOSSIBLE\n",
      "Case #63: IMPOSSIBLE\n",
      "Case #64: 8\n",
      "Case #65: IMPOSSIBLE\n",
      "Case #66: IMPOSSIBLE\n",
      "Case #67: 1\n",
      "Case #68: IMPOSSIBLE\n",
      "Case #69: 1\n",
      "Case #70: IMPOSSIBLE\n",
      "Case #71: IMPOSSIBLE\n",
      "Case #72: 5\n",
      "Case #73: IMPOSSIBLE\n",
      "Case #74: 1\n",
      "Case #75: 0\n",
      "Case #76: 0\n",
      "Case #77: IMPOSSIBLE\n",
      "Case #78: 2\n",
      "Case #79: IMPOSSIBLE\n",
      "Case #80: 1\n",
      "Case #81: IMPOSSIBLE\n",
      "Case #82: IMPOSSIBLE\n",
      "Case #83: IMPOSSIBLE\n",
      "Case #84: IMPOSSIBLE\n",
      "Case #85: IMPOSSIBLE\n",
      "Case #86: IMPOSSIBLE\n",
      "Case #87: 2\n",
      "Case #88: IMPOSSIBLE\n",
      "Case #89: 2\n",
      "Case #90: IMPOSSIBLE\n",
      "Case #91: IMPOSSIBLE\n",
      "Case #92: IMPOSSIBLE\n",
      "Case #93: 0\n",
      "Case #94: IMPOSSIBLE\n",
      "Case #95: IMPOSSIBLE\n",
      "Case #96: 0\n",
      "Case #97: 1\n",
      "Case #98: 2\n",
      "Case #99: 3\n",
      "Case #100: IMPOSSIBLE\n",
      "Time to completion: 0.12308692932128906\n"
     ]
    }
   ],
   "source": [
    "import time\n",
    "start_time = time.time()\n",
    "\n",
    "# read input from file, and print the output\n",
    "line_count = 0\n",
    "output_file = open('C:\\\\Users\\\\Tan\\\\Dropbox\\\\practice_programming\\\\Competitive Programming\\\\Google Code Jam\\\\2017\\\\Qualification Round\\\\A - Oversized Pancake Flipper\\\\Dataset\\\\A-small-attempt0_output', 'w')\n",
    "\n",
    "with open(\"C:\\\\Users\\\\Tan\\\\Dropbox\\\\practice_programming\\\\Competitive Programming\\\\Google Code Jam\\\\2017\\\\Qualification Round\\\\A - Oversized Pancake Flipper\\\\Dataset\\\\A-small-attempt0 (1).in\") as f:\n",
    "    for line in f:\n",
    "        line = line.rstrip('\\n')\n",
    "        \n",
    "        if line_count == 0:\n",
    "            t = int(line)\n",
    "        else:\n",
    "            pancake_input = line.split()\n",
    "            s = pancake_input[0]\n",
    "            k = int(pancake_input[1])\n",
    "            output_line = \"Case #\" + str(line_count) + \": \" + str(get_min_flip(s, k))\n",
    "            print(output_line)\n",
    "            output_file.write(output_line + \"\\n\")\n",
    "            \n",
    "        line_count = line_count + 1\n",
    "\n",
    "output_file.close()\n",
    "\n",
    "elapsed_time = time.time() - start_time\n",
    "print(\"Time to completion: \" + str(elapsed_time))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
