{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import io, sys, difflib, itertools\n",
    "class InputReader(object):\n",
    "    def __init__(self, input_stream, debug=False):\n",
    "        self._stream = input_stream\n",
    "        self._lines = (line.rstrip('\\n') for line in input_stream)\n",
    "        if debug: self._lines = tuple(self._lines)\n",
    "        self._lines_iter = iter(self._lines)\n",
    "    def lines(self, n=None):\n",
    "        lines_tup = tuple(itertools.islice(self._lines_iter, n))\n",
    "        assert n is None or len(lines_tup) == n\n",
    "        return lines_tup\n",
    "    def chars(self, n=None):\n",
    "        chars = tuple(self.line())\n",
    "        assert n is None or len(chars) == n\n",
    "        return chars\n",
    "    def words(self, n=None):\n",
    "        words = tuple(self.line().split())\n",
    "        assert n is None or len(words) == n\n",
    "        return words\n",
    "    def ints(self, n=None): return tuple(map(int, self.words(n)))\n",
    "    def digits(self, n=None): return tuple(map(int, self.chars(n)))\n",
    "    def floats(self, n=None): return tuple(map(float, self.words(n)))\n",
    "    def line(self): return self.lines(1)[0]\n",
    "    def char(self): return self.chars(1)[0]\n",
    "    def word(self): return self.words(1)[0]\n",
    "    def int(self): return self.ints(1)[0]\n",
    "    def digit(self): return self.digits(1)[0]\n",
    "    def float(self): return self.floats(1)[0]\n",
    "def solve_cases(inp, out):\n",
    "    t = inp.int()\n",
    "    for i in range(1, t + 1):\n",
    "        out.write('Case #{}: '.format(i))\n",
    "        solve_case(inp, out)\n",
    "        out.write('\\n')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import itertools\n",
    "import collections\n",
    "flatten = itertools.chain.from_iterable\n",
    "\n",
    "def solve(inp, out):\n",
    "    solve_cases(inp, out)\n",
    "\n",
    "def solve_case(inp, out):\n",
    "    N = inp.int()\n",
    "    texts = {inp.line() for _ in range(N)}\n",
    "    objs = {tuple(enumerate(text.split())) for text in texts}\n",
    "    d = {}\n",
    "    for obj in objs:\n",
    "        d.setdefault(obj[0], set()).add(obj)\n",
    "        d.setdefault(obj[1], set()).add(obj)\n",
    "#     unique = {k: v for k, v in d.items() if len(v) == 1}\n",
    "#     unique_objs = set(flatten(unique.values()))\n",
    "#     for obj in unique_objs:\n",
    "#         for i in obj:\n",
    "#             d[i].remove(obj)\n",
    "#     for k in unique:\n",
    "#         d.pop(k)\n",
    "#     count = collections.Counter(flatten(d.values()))\n",
    "    keys_left_sorted = sorted(d)\n",
    "    def min_spanning_set(i, keys_completed):\n",
    "        if i == len(keys_left_sorted):\n",
    "            return set()\n",
    "        curr_key = keys_left_sorted[i]\n",
    "        if curr_key in keys_completed:\n",
    "            return min_spanning_set(i+1, keys_completed)\n",
    "        other_keys = [list(set(word) - {curr_key})[0] for word in d[curr_key]]\n",
    "        if any(k not in keys_completed for k in other_keys):\n",
    "            min_by_word = {}\n",
    "            for k, word in zip(other_keys, d[curr_key]):\n",
    "                if k not in keys_completed:\n",
    "                    keys_completed.add(k)\n",
    "                    min_by_word[word] = min_spanning_set(i+1, keys_completed)\n",
    "                    keys_completed.remove(k)\n",
    "            min_word = min(d[curr_key], key=lambda word: len(min_by_word.get(word, range(10000000))))\n",
    "            result = min_by_word[min_word]\n",
    "            result.add(min_word)\n",
    "            return result\n",
    "        else:\n",
    "            result = min_spanning_set(i+1, keys_completed)\n",
    "            result.add(next(iter(d[curr_key])))\n",
    "            return result\n",
    "    kc = set()\n",
    "    min_spanning = min_spanning_set(0, kc)\n",
    "    assert kc == set()\n",
    "    result = min_spanning  # | unique_objs\n",
    "    print([' '.join([o[0][1], o[1][1]]) for o in result])\n",
    "    out.write(str(len(texts) - len(result)))\n",
    "    globals().update(locals())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['HYDROCARBON COMBUSTION', 'QUAIL BEHAVIOR']\n",
      "['CODE JAM', 'PEARL JAM', 'SPACE JAM']\n",
      "['PLANETARY INTERGALACTIC', 'INTERGALACTIC PLANETARY']\n"
     ]
    }
   ],
   "source": [
    "TEST_IN = \"\"\"3\n",
    "3\n",
    "HYDROCARBON COMBUSTION\n",
    "QUAIL BEHAVIOR\n",
    "QUAIL COMBUSTION\n",
    "3\n",
    "CODE JAM\n",
    "SPACE JAM\n",
    "PEARL JAM\n",
    "2\n",
    "INTERGALACTIC PLANETARY\n",
    "PLANETARY INTERGALACTIC\n",
    "\"\"\"\n",
    "TEST_OUT = \"\"\"Case #1: 1\n",
    "Case #2: 0\n",
    "Case #3: 0\n",
    "\"\"\"\n",
    "\n",
    "def test_solver():\n",
    "    if TEST_IN:\n",
    "        test_in = io.StringIO(TEST_IN)\n",
    "        test_out = io.StringIO()\n",
    "        solve(InputReader(test_in), test_out)\n",
    "        test_out_str = test_out.getvalue()\n",
    "        if test_out_str != TEST_OUT:\n",
    "            print(''.join(difflib.ndiff(TEST_OUT.splitlines(True), test_out_str.splitlines(True))))\n",
    "            raise RuntimeError('TEST_IN and TEST_OUT did not match.')\n",
    "            \n",
    "test_solver()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['HYDROCARBON COMBUSTION', 'QUAIL BEHAVIOR']\n",
      "['CODE JAM', 'PEARL JAM', 'SPACE JAM']\n",
      "['PLANETARY INTERGALACTIC', 'INTERGALACTIC PLANETARY']\n",
      "['RI YE', 'TU HP', 'XQ RV', 'XL UI', 'QB SF', 'JF TW', 'TB KY', 'SW PS']\n",
      "['ZH BH', 'JR VF', 'CV KC', 'UB CJ', 'NG VD', 'JR IZ', 'PZ OY']\n",
      "['BA GN', 'GO LZ', 'IF FL', 'DD SZ', 'QE IG', 'TL SY', 'KH RR', 'LW MZ']\n",
      "['BI QQ', 'TN DI', 'XB RP', 'ZY CG']\n",
      "['SP DH', 'JB AE', 'IC HG', 'AH NC', 'HL OT', 'WR OJ', 'PW TE', 'LQ KT', 'OC PY', 'ET GI', 'PR LF', 'TL AT']\n",
      "['WA PP', 'RS EB', 'UJ BN', 'VU MB', 'SN DA', 'YN SI', 'RA HY', 'PC JA']\n",
      "['QP RV', 'AK NH', 'UY XN', 'JL SN', 'NB RF', 'JL FP', 'QR LT', 'AE RW', 'AE PM']\n",
      "['BD ZT', 'KB VX', 'VG JT', 'CD VI', 'BB SL', 'AE UT', 'BZ WL', 'EZ IM']\n",
      "['YV CE', 'SU IG', 'ZM FY', 'IC DY', 'IU AY', 'NJ VA', 'CU TA', 'FM SF', 'AU FY', 'IC AB', 'KY GD', 'FO YD', 'BQ DU']\n",
      "['OA UU', 'AH TS', 'TJ DU', 'WM JB', 'JM RD', 'CH YG', 'CX OC', 'JR MD']\n",
      "['ML OT', 'EH BS', 'IZ FP', 'TT ON', 'IZ NV', 'FP QK', 'RD QK', 'IY VG', 'BX DA']\n",
      "['QQ BM', 'SF MI', 'UF ML', 'GV GD', 'UZ HW', 'GF XU', 'FA HL', 'HH TT', 'ZC VV', 'OE QC', 'NZ HV', 'GW TT']\n",
      "['YU XR', 'YY QU', 'VW DY', 'FL PK']\n",
      "['LH NL', 'YI MH', 'DC KN', 'CU PE', 'EO XY']\n",
      "['XT ZE', 'LI MO', 'IT HF', 'AB ZE', 'DE OG', 'CV CU', 'AN AR', 'CO UM', 'SX ZE', 'LI TZ', 'BY PZ']\n",
      "['RECURSIVE CHARACTERIZATIONS', 'INTERACTIVE CONSTRUCTION', 'DENSITY IDENTITIES', 'DELAUNAY GAMES', 'MAJORITY ARRANGEMENTS', 'CONNECTIVITY SORTING', 'DATA LOCALIZATION', 'SYMBOLIC GRAPHS', 'STATE DATA', 'CONNECTIVITY LIMITS', 'DESIGN DESIGN', 'PARTITION DESIGN']\n",
      "['KK BW', 'YU TW', 'KK RZ', 'HL LP']\n",
      "['DN EG', 'ZK MT', 'BC OU', 'UW WQ', 'UW JZ', 'XI NC']\n",
      "['EB HC', 'JU DM', 'YE BR', 'DT ZE', 'DX RL', 'GP PG', 'KD PL', 'JG XQ']\n",
      "['ZS AZ', 'VZ AB', 'PA PZ', 'VU EY', 'UQ PZ', 'MH JZ']\n",
      "['CD AK', 'TQ PB', 'UQ HS', 'JU HR', 'MP AX', 'IU FS', 'JL LB', 'PQ AK', 'JU YG', 'AF IZ', 'OE ZG']\n",
      "['UQ RG', 'KS QU', 'UQ JT', 'BY SL', 'GN MX', 'GW EI', 'DU TZ', 'UD SL']\n",
      "['NP GH', 'RL CT', 'UH CT', 'JM TE', 'OH II', 'BU NY', 'OG KF', 'ND GH', 'LM TC', 'OH AM']\n",
      "['AP XT', 'RI IY', 'TA UO', 'ZN YE', 'ZU FX', 'XS YM', 'VR YY', 'XO JS']\n",
      "['IT JT', 'PQ KF', 'FE XD']\n",
      "['IX FE', 'DF BV', 'WA WZ', 'BY DF', 'CZ GT', 'DS BV', 'DT CA', 'YD EI', 'BY BB', 'MR OM']\n",
      "['SZ ZV', 'CW NR', 'XU NO', 'DE CH', 'TL HS', 'WP IH', 'SQ TV', 'NM FU', 'DE YJ']\n",
      "['NG OK', 'OR PZ', 'OR SH', 'WZ YB']\n",
      "['YY ZW', 'CK YI', 'XJ HJ', 'WL MU', 'HY FP', 'HY XU', 'ZS EN', 'JZ EE', 'RR HJ', 'CK SR', 'NY EN']\n",
      "['DK TH', 'ZF FK', 'PS US', 'SJ MO', 'EC KG', 'ZC BD', 'ZO UN', 'FF WY', 'JQ KB', 'TW QE']\n",
      "['SY MM', 'PU EI', 'SY YK', 'MZ UK', 'PU YJ', 'PU LX', 'RR WU', 'SY SF']\n",
      "['BA UG', 'WC UK', 'RV AC', 'CB JB', 'VP AN', 'NS FH', 'OR IT', 'YJ UD']\n",
      "['UG JD', 'CR UC', 'BL VT', 'JP MV', 'CV BH', 'IU KG', 'OA UQ', 'WE WG', 'GM AT']\n",
      "['AZ ZT', 'XO EH', 'YB EV', 'XJ KF', 'JL PN', 'TD TK', 'QD GN', 'IF BA', 'QY IV']\n",
      "['SW OZ', 'IA ZW', 'BI MF', 'MG NU', 'KO GM', 'WD ZY', 'TY LN', 'PK NF', 'PB OZ', 'YI NU', 'WD HV', 'ZF NK']\n",
      "['SEMISTABLE SPARSITY', 'BINOMIAL DISTANCE', 'FRACTION WIDTH', 'BOOLEAN SUMS', 'NONLINEAR STREAMING', 'TOPOLOGY SPACES', 'POLYTIME REDUCTION', 'BINOMIAL TOPOLOGY']\n",
      "['ND QC', 'EA VE', 'XQ EO', 'LQ MX', 'UY LW', 'OH EK', 'DN GX', 'AV LT']\n",
      "['VM KS', 'SX RP', 'JB CX', 'GJ QV', 'SE KS', 'QQ KQ', 'SX TA', 'MM JJ', 'KW RT', 'MW DP']\n",
      "['XX FM', 'XC II', 'DM EA', 'GV SC']\n",
      "['RW CV', 'BY OA', 'BT NG', 'TD AQ', 'TD FZ', 'PQ MQ', 'KN YU', 'HU VN']\n",
      "['UP SH', 'FI DS', 'EC JP', 'XN AF', 'BK BY', 'ZT WN', 'RW IX', 'CS BA', 'RT SH', 'DH QC', 'GR KN', 'LE WB']\n",
      "['TQ AR', 'II EL', 'QE RQ', 'XS KR', 'SM UC', 'JU VU', 'VJ AS', 'BG VK', 'TM KX', 'LG EE']\n",
      "['LG MN', 'BW CO', 'KE QR', 'MW YG']\n",
      "['XG QC', 'VV AT', 'RW SL', 'DT AR', 'QG XO', 'QG TC', 'PB RP', 'YI RP', 'DT CE', 'QG CL']\n",
      "['FO YP', 'WT EZ', 'IZ XQ', 'XR OH', 'YD YP', 'TC WO', 'VR UB', 'GJ XH', 'FV XQ', 'UE RE']\n",
      "['WB GX', 'FK MX', 'BE FD', 'QG NR', 'DO EO', 'WQ TH', 'VE TF', 'GI IA', 'FD GO', 'QG WX', 'IZ IT', 'GO QS', 'VQ XW']\n",
      "['PR WS', 'TP QK', 'IE SH', 'ZF ZX', 'WH PZ', 'VE EE', 'TU HB', 'WB KT']\n",
      "['XN SJ', 'CO YM', 'HJ CX', 'XW YC', 'CT CI', 'CH QC', 'JC QC', 'WW OV', 'DP HK']\n",
      "['XP BC', 'PV WU', 'PV CK', 'OE IC', 'CB HX', 'PY PH', 'SZ LW', 'ZJ GA', 'ZL FK', 'TN TB', 'AQ FA', 'UT CV']\n",
      "['PF FC', 'NO FC', 'XM AR', 'DB RV', 'PJ NY', 'RJ SX', 'RH JO', 'IL FC']\n",
      "['CJ RQ', 'CJ ES', 'YH OC', 'RL JH', 'RL VU', 'SU BN', 'VX AJ', 'CJ VK', 'VX EW']\n",
      "['KW AL', 'RT RO', 'QC EY', 'TG IL', 'EP GA', 'BB QG', 'BB WR']\n",
      "['WQ WU', 'WQ EB', 'WQ AP', 'QG SD', 'OY GH', 'VC TQ', 'AR WQ', 'CQ EW', 'PZ UP', 'WQ GE', 'CQ CC']\n",
      "['PA WI', 'ZP LW', 'OT BR', 'GJ JW', 'SN TF', 'MS GK', 'QU BR', 'MA IG', 'ZP ZC', 'PA DG']\n",
      "['WI KO', 'MP BO', 'IG VR', 'VC YU', 'AG BH', 'AM HY', 'RC DX', 'SK OD', 'HZ ZE', 'KT LF', 'IL GX']\n",
      "['UNITARY COMPUTING', 'SMALL DUALITY', 'LEARNING OPTIMALITY', 'TOTAL HARDNESS', 'CONSTRAINT SAMPLING', 'SAMPLING QUERIES', 'ENTROPY CONSTRUCTION', 'MULTIVARIATE LATTICES', 'GROUP HARDNESS']\n",
      "['ND ID', 'AH SX', 'AH KF', 'FM CL', 'SY WP', 'OT QA', 'FO NT', 'MR CI']\n",
      "['QU TJ', 'WE RI', 'UM TJ', 'GM RI', 'US TJ', 'VW RI', 'JQ TJ']\n",
      "['MM HW', 'FV TK', 'GY HU', 'CY MR', 'OG ZZ', 'TP TK', 'LF TG', 'ND HF']\n",
      "['IZ PL', 'QZ PX', 'TN RO', 'KG AG', 'GH LO', 'AU AY', 'YZ SD', 'JS AU']\n",
      "['OD UD', 'QW QX', 'YI PM', 'PT OX', 'HC GG', 'DX MF', 'VI RS', 'RU WY']\n",
      "['JY VL', 'MH WB', 'TU QG', 'LD GT', 'DK IM', 'JK ZQ', 'VM OP', 'MZ YH']\n",
      "['RR KE', 'MG EF', 'TQ HS', 'IU PE', 'FA TJ', 'ND UM', 'MO BA', 'VK HY']\n",
      "['CD VM', 'UD IM', 'CR UL', 'PN ZV', 'HA DK', 'CN VZ', 'AH WJ', 'LS WR', 'ZU AR', 'DN SK', 'FB JB', 'KC LR', 'FI HP']\n",
      "['YK IN', 'XZ PG', 'EW PG', 'UP MQ', 'EH PG', 'TB JQ', 'OY ET', 'PZ MQ', 'PG IN', 'XL MQ']\n",
      "['ABELIAN ALGEBRA', 'ACYCLIC ALLOCATION', 'ABSTRACT ALGEBRAS', 'ABSTRACTION ALGORITHMS', 'SUBDIFFERENTIABILITY PSEUDOTRIANGULATIONS', 'ACCESS ALIGNMENT', 'INDISTINGUISHABILITY ABSTRACTION', 'Q PSEUDOAPPROXIMATIONS']\n",
      "['CY BA', 'SS SV', 'WY LM', 'QW TO', 'FO JR', 'WY JN', 'MH BH', 'XA IO', 'WC VX', 'IH LB', 'TJ UG']\n",
      "['QUANTUM TRANSGRESSION', 'TRANSFORMATIVE HERMENEUTICS', 'BOUNDARY GRAVITY']\n",
      "['RI KI', 'PB WF', 'BZ LN', 'DP ZI', 'VQ EL', 'VW VH', 'MM XX', 'DR DS', 'ND WQ', 'XN EA', 'MM WS']\n",
      "['FT TH', 'OG YP', 'UZ OR', 'KT HT', 'FW YP', 'CE NX', 'CE YV']\n",
      "['PS TL', 'VF AX', 'ND NS', 'AD FT', 'XR CG', 'QT XE', 'YB OZ', 'QT CE', 'MD PA', 'BD OL', 'AD HK', 'VF IP']\n",
      "['WO DV', 'WI ZA', 'FK HO', 'KB DV', 'OW OJ', 'OQ VS', 'QZ NO', 'VV NO']\n",
      "['LD YO', 'DE VK', 'YU XU', 'TN DQ', 'NZ TH', 'HU JO', 'QZ MJ', 'LD GP', 'BV RP', 'NU SE']\n",
      "['ML WO', 'MN AN', 'BY MW', 'VG FI', 'QX AN', 'ML VU', 'YM AN', 'ZM FI']\n",
      "['ZK ST', 'ZK RT', 'KX PA', 'IY DB', 'OR YY', 'PI IV', 'PI VE', 'BJ KR', 'AZ PA', 'IY OU', 'ID WF', 'OR YR']\n",
      "['GENERATION IMPLEMENTATION', 'DEFORMATION ORBITS', 'RANKING SYSTEMS', 'IMPLEMENTATION ORIENTATIONS', 'SPHERICAL COVERINGS', 'COMPUTING EIGENVALUES', 'SIMILARITY GENERATION', 'MINIMIZATION CONSTRUCTIONS', 'INTERACTIVE INFERENCE', 'DISTRIBUTION ORBITS']\n",
      "['UW WA', 'WJ EL', 'UW PP', 'WJ TW']\n",
      "['BB PR', 'XK KF', 'QN WI', 'RE MJ', 'KO CZ', 'ZR TO', 'QZ TK', 'EM XT', 'JZ XT', 'YO PS']\n",
      "['VE TO', 'SC YV', 'GH YL', 'RG VV', 'SC DJ', 'HB QC', 'WG MS', 'FR QA', 'GA JF', 'KY MS']\n",
      "['MK VZ', 'ZN FL', 'YV GC', 'BJ IN']\n",
      "['LR VL', 'AV VN', 'OV VN', 'EG GM', 'UY VN', 'LI GF', 'MY VJ']\n",
      "['JZ GK', 'HY OG', 'HN ON', 'TH HY', 'ZC GK', 'QJ WK', 'HY ZS', 'ZS YD']\n",
      "['LL TF', 'LH OL', 'YO BY', 'MZ ZT', 'QH RF', 'KH QX', 'EE FX', 'BX DT', 'GE JX', 'LQ IU', 'SI EE', 'FG PX']\n",
      "['GB JQ', 'EK XR', 'RX PO', 'SH CP', 'GB HD', 'ZY QD', 'EK BJ', 'OQ NZ', 'RX WW', 'TR NZ', 'SH BM']\n",
      "['RY CW', 'GX SK', 'EU NX', 'MS IF', 'TL BO', 'JH KA', 'DM FM', 'RM TT', 'NZ XR', 'QI YG', 'QX OG', 'RK EX', 'NZ WM']\n",
      "['NQ QO', 'TY NT', 'TY GE', 'NQ FY', 'UO KY', 'FL SX']\n",
      "['JS LJ', 'GN WW', 'CR GG', 'MW FL', 'CR FR', 'GN OT']\n",
      "['SJ LS', 'GJ CA', 'QH EF', 'VH UB', 'EX GA', 'SP EF', 'SJ BQ', 'OM ZF', 'VH EA', 'OY PD', 'WA OG']\n",
      "['ZH VN', 'ES XD', 'BR XC', 'UT UG', 'NJ FN', 'FI OG', 'HE NZ', 'NW LF', 'ZH HN']\n",
      "['MV UI', 'GU XO', 'YU LS', 'SQ PZ', 'VX HD', 'BJ XU', 'AT WE', 'DG NM']\n",
      "['IM ZC', 'HN AT', 'PU ZC', 'OX WH', 'OX KC', 'SU NA', 'UW AT', 'XV QH', 'XV EJ', 'XA FQ']\n",
      "['HX AD', 'DY KZ', 'ER ML', 'WN WK', 'ZZ AY', 'IA DM', 'CN OR', 'ER XD', 'GG BQ', 'EW KL']\n",
      "['RC ML', 'XY YR', 'DR XO', 'NO UA', 'XY SF', 'UM ML', 'NO QZ']\n",
      "['TS ST', 'TS VD', 'QH EV', 'HN TZ', 'UT AU', 'YC ZK', 'YC HG', 'UT AI']\n",
      "['CW WH', 'ZW LE', 'JA DK', 'OH QI', 'CW PV', 'SZ YY', 'TJ ZS', 'GS QH', 'CP BV', 'IB HF']\n",
      "['FEASIBILITY POINTS', 'TRANSITIVE CONSTRUCTIONS', 'UNSTRUCTURED TRAJECTORIES', 'TOPOLOGY TRAJECTORIES', 'LOGARITHMIC SEARCH', 'CONJUGACY COMPLEXES']\n",
      "['ED MT', 'MB BH', 'MB EK', 'FG PG', 'VN MT', 'OK II', 'GX HP']\n"
     ]
    }
   ],
   "source": [
    "def main():\n",
    "    input_stream = sys.stdin and open(r\"C:\\Users\\Joseph\\Downloads\\C-small-attempt0.in\")\n",
    "    out = sys.stdout and open(r\"C:\\Users\\Joseph\\Downloads\\C-small-attempt0.out\", 'w')\n",
    "    inp = InputReader(input_stream)\n",
    "\n",
    "    solve(inp, out)\n",
    "    \n",
    "if __name__ == '__main__': main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
