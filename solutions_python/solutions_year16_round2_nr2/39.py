import StringIO

import itertools

from ecodejam.input_parser import *


def solve_g(case_index):
    c, j = list(read_word()), list(read_word())
    next_line()

    cbigger, jbigger = False, False

    for i, (cl, jl) in enumerate(zip(c, j)):
        if not cbigger and not jbigger:
            if cl == '?' and jl == '?':
                c[i] = j[i] = '0'
            elif cl == '?':
                c[i] = j[i]
            elif jl == '?':
                j[i] = c[i]
            elif cl > jl:
                cbigger = True
            elif jl > cl:
                jbigger = True
        elif cbigger:
            if cl == '?':
                c[i] = '0'
            if jl == '?':
                j[i] = '9'
        elif jbigger:
            if cl == '?':
                c[i] = '9'
            if jl == '?':
                j[i] = '0'

    return "".join(c) + " " + "".join(j)


def score(curc, curj):
    c = int("".join(map(str, curc)))
    j = int("".join(map(str, curj)))

    return (abs(c-j), c, j)


def solve(case_index):
    print case_index
    c, j = list(read_word()), list(read_word())
    next_line()

    cindices = [i for i in xrange(len(c)) if c[i] == '?']
    jindices = [i for i in xrange(len(j)) if j[i] == '?']

    bestc = None
    bestj = None
    bestscore = None

    for coptions in itertools.product(*[range(10) for i in xrange(len(cindices))]):
        curc = list(c)
        for cindex, coption in zip(cindices, coptions):
            curc[cindex] = coption

        for joptions in itertools.product(*[range(10) for i in xrange(len(jindices))]):
            curj = list(j)
            for jindex, joption in zip(jindices, joptions):
                curj[jindex] = joption

            scr = score(curc, curj)

            if (bestc is None or bestj is None) or scr < bestscore:
                bestc = curc
                bestj = curj
                bestscore = scr

    return "".join(map(str, bestc)) + " " + "".join(map(str, bestj))


SAMPLE = """
200
1? 2?
?2? ??3
? ?
?5 ?0
3?7 76?
6?? ???
?2? ?6?
?99 ??0
?3? 727
? 5
99 ??
?93 9?8
2?8 ?57
?3? ?8?
070 ??3
?5? ?0?
9?9 ??0
10 ?5
15? 5?3
445 18?
?9 0?
?66 677
8?? ?7?
0? 99
??9 6?1
674 ???
9?? 989
32? ?36
?49 ???
?70 ?0?
?2? 9?5
9? 0?
?? 9?
9? ?5
653 ???
?33 ???
?5 0?
?7? 0?6
?5 9?
0? ?5
99? ?0?
?8? ?3?
?0? ?4?
5 ?
?9 ?0
820 3??
?43 9??
686 9??
?1? ?7?
??? ??2
43? 92?
?8? ?2?
?5 ??
??3 0?6
?0? 99?
?53 ?64
??? ???
?0 0?
?67 ???
5?0 4??
?7? ?2?
?9 ?5
915 ?3?
278 ??9
784 06?
??8 ??7
5?? ?41
79? ??8
?38 ??1
?87 3??
0 ?
?? ?5
?52 5??
?4? ??6
35? 6?7
?45 9?8
??0 ??9
?0 ?5
3?? 8?6
?8? 9??
?92 ??3
?21 67?
?9 99
?3? ?9?
??9 ?3?
?9 9?
?4? ?8?
??3 7?4
?5? ?1?
93 ?8
?68 4?1
?0 ?9
?? 99
?? ??
43? 3??
?28 8?2
?22 ?54
? 9
?9? ?5?
?3? ?7?
??6 ?82
?5? ?9?
691 ???
3?8 ?10
?7? ?3?
?5 ?9
?0 ??
699 ?5?
?0 99
36? 5?6
96? 0??
?? ?9
?8 93
9? ??
0?? 0?9
8?7 ??0
5?? ???
1?? 59?
9? ?0
3?7 ??1
817 63?
9?8 ?92
?0? 6?4
5?9 21?
9?8 ?93
?6? ?0?
??0 9?9
?9? ?4?
0? ?9
99 ?0
?67 1?6
??? 9??
9? 99
?4? ?9?
?4? ?0?
?4? ?2?
?59 1?1
?5 10
??7 4?1
??7 5?0
??? ?80
?48 ???
0? 9?
99 9?
?0? ?6?
??0 ?99
??? 930
9 ?
?5 99
?98 ??3
0?? 9?9
99 ?9
??? 955
??9 ??9
?? ?0
?1? ?6?
15? ?47
80? 6??
?67 11?
??7 1??
??? 63?
?9? ?3?
?6? ?17
99 0?
?1? ?5?
?92 9?8
?9? ?1?
?0 9?
?2? ?8?
?1? ?65
4?5 ??9
?6? ?1?
??? 6?0
?99 1??
??7 8??
7?? ???
94? ???
8?7 ?5?
0? ??
?08 ?8?
6?5 ??4
3?6 70?
? 0
1?1 ?2?
?0? ?5?
99 ?5
0? ?0
?2? ?7?
?9 ??
?6? ?2?
?? 0?
?7? ?1?
439 ???
??2 ?98
??3 ?98
??? 65?
17? 332
504 ??6
9? ?9
?8? ?4?
"""

if __name__ == "__main__":
    set_parsed_input(
        StringIO.StringIO(SAMPLE)
    )
    run_solver(solve)
