
# coding: utf-8

# In[71]:

inputs = """99
2525 1
2400 5
300 2
120 60
60 90
675010013 1
160636268 1740
976417564 1
859228525 8366
32215138 1
29018622 214
897294135 1
834333165 5440
94180 1
2119 2492
765838199 1
763648256 8326
271645337 1
244253252 6689
690175551 1
45253464 3709
358753492 1
9708549 914
872577934 1
293765546 1621
1000000000 2
999999997 2
999999996 3
726411944 1
381598976 5634
837536873 1
727937514 3185
756457704 1
370828970 7086
553366314 1
147772077 5158
987797082 1
981803937 2455
200000 2
5001 1
5000 4
1000000000 2
12345675 3
12345676 2
798182064 1
722030162 6206
481890814 1
195018753 6159
540614401 1
391750031 2325
654827952 1
344503296 5361
1000000000 1
1 10000
696306399 1
80959189 6101
100059522 1
96991841 2549
898174373 1
724742709 1000
2 1
1 1
394237397 1
252065816 9470
175836021 1
149813893 9504
67366125 1
62493161 3559
611995935 2
570841710 1024
35479304 4945
603431810 1
523450107 2844
1000000000 2
999000000 10000
998000000 10000
808611866 1
116973729 893
171889216 1
34331470 3486
415433683 1
76990221 3747
1000000000 2
999999999 2
999999998 3
213940016 1
155426248 3542
702635727 1
359484292 9735
563658349 1
475587559 3220
947463806 1
400040164 4738
497032231 1
45409094 7137
552940220 1
202100270 2955
336017648 1
204814809 1173
430685210 1
370035138 244
900692386 1
784580774 3551
116269188 1
35606325 5734
978645657 1
676243775 6080
786681221 1
408066363 102
1000000000 2
1 3
2 2
958469623 1
903254296 7530
307665905 1
110168665 9954
38252252 1
35369159 3762
78438599 1
42208071 7876
438278141 1
276842755 2998
689573778 1
637567022 9887
694448792 1
59987270 1598
1000000000 1
999999999 1
349597291 1
329771676 7325
650863869 1
28432971 4961
902441022 1
383608400 390
481751452 1
21775864 3579
746708596 1
463037792 9267
923286352 1
738033597 515
336576302 1
314299608 1941
198439579 1
172563538 1904
564818333 1
290652095 2919
434771680 1
39829921 3026
985825287 1
414473624 783
602568917 2
420707320 6122
333741210 184
312058700 1
261130922 1080
1000000000 2
200 10000
100 10000
581243546 1
511723968 5616
692584528 1
627128124 9257
376276831 1
137488498 1340
803644942 1
523556598 4178
228913339 1
134990982 7079
675685354 1
618398517 3427
515368493 1
478409134 6022
631667000 1
509396885 8417
532451467 1
118318230 6311
1000000000 1
1 1
845562226 1
11457116 5678
43650858 1
18435698 2721
556452342 1
189485523 7390
981420781 1
346289307 3798
1000000000 1
999999999 10000
863173372 1
38354883 1489
2 1
1 10000
859438175 1
831750369 1763
259622195 1
34699905 5315
79911156 1
61774139 2630
1000000000 2
999999997 3
999999998 2
881553547 1
585148058 8162
999228722 1
369931078 6029
429395642 1
242936843 8890
1000000000 2
998000000 1
999000000 1""".split('\n')


# In[72]:

NumP = int(inputs[0]);


# In[73]:

inputs = inputs[1:]


# In[74]:

problem_index = 0;
while NumP > 0:
    D, N= [int(z) for z in inputs.pop(0).split()];
    horses_distance = [];
    horses_speed = [];
    while N > 0:
        d, s = [int(z) for z in inputs.pop(0).split()];
        horses_distance.append(d);
        horses_speed.append(s);
        N = N-1;
        
    max_horse_time = max([(D-z[0])/z[1] for z in zip(horses_distance, horses_speed)]);
    max_my_speed = round(D/max_horse_time, 6);
    print("Case #"+str(problem_index+1)+":", '{0:.6f}'.format(max_my_speed));
    NumP=NumP-1;
    problem_index+=1;
    
        
        


# In[ ]:



