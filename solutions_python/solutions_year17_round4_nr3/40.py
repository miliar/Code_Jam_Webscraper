{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "deletable": true,
    "editable": true
   },
   "source": [
    "# Google Code Jam 2017 — Round 2 — problem C\n",
    "## User: jdemeyer\n",
    "\n",
    "This is a Jupyter notebook to be run with SageMath version 8.0.beta6 on a 64-bit GNU/Linux system. Although the precise version of SageMath probably does not matter that much."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "%%cython\n",
    "\n",
    "include \"signals.pxi\"\n",
    "\n",
    "import os, sys, datetime, time\n",
    "from sage.rings.integer cimport Integer\n",
    "import numpy as np\n",
    "\n",
    "\n",
    "def log(msg):\n",
    "    sys.stderr.write(msg + \"\\n\")\n",
    "    sys.stderr.flush()\n",
    "\n",
    "\n",
    "class CodejamProblem(object):\n",
    "    def __init__(self, input):\n",
    "        self.inputlines = iter(input.splitlines())\n",
    "        self.cases = []\n",
    "    \n",
    "    def readline(self):\n",
    "        return next(self.inputlines)\n",
    "        \n",
    "    def readint(self):\n",
    "        return Integer(self.readline())\n",
    "\n",
    "    def readints(self):\n",
    "        return [Integer(x) for x in self.readline().split()]\n",
    "        \n",
    "    def solve(self, f=sys.stdout, raw=False):\n",
    "        for i, case in enumerate(self.cases, 1):\n",
    "            sig_check()\n",
    "            ans = self.solvecase(case)\n",
    "            if raw:\n",
    "                ans = repr(ans)\n",
    "            else:\n",
    "                ans = self.formatanswer(ans)\n",
    "            f.write(\"Case #{0}: {1}\\n\".format(i, ans))\n",
    "        f.flush()\n",
    "        \n",
    "    def solvecheck(self, output):\n",
    "        from StringIO import StringIO\n",
    "        out = StringIO()\n",
    "        self.solve(out)\n",
    "        assert out.getvalue() == output\n",
    "            \n",
    "    def formatanswer(self, ans):\n",
    "        if ans is None:\n",
    "            return \"IMPOSSIBLE\"\n",
    "        return \"POSSIBLE\\n\" + ans\n",
    "\n",
    "    @classmethod\n",
    "    def precompute(cls):\n",
    "        pass\n",
    "    \n",
    "    @classmethod\n",
    "    def autosolve(cls, filein, fileout, *args, **kwds):\n",
    "        log(\"precomputing...\")\n",
    "        cls.precompute()\n",
    "\n",
    "        log(\"autosolving...\")\n",
    "\n",
    "        nexc = 0\n",
    "        while nexc < 10:\n",
    "            sig_check()\n",
    "            t0 = datetime.datetime.now()\n",
    "            try:\n",
    "                input = open(filein).read()\n",
    "            except IOError:\n",
    "                time.sleep(0.2)\n",
    "                continue\n",
    "            d = datetime.datetime.now() - t0\n",
    "            log(\"Read input in %.2fs\" % d.total_seconds())\n",
    "            \n",
    "            t0 = datetime.datetime.now()\n",
    "            try:\n",
    "                problem = cls(input, *args, **kwds)\n",
    "            except Exception:\n",
    "                from traceback import print_exc\n",
    "                print_exc(file=sys.stderr)\n",
    "                nexc += 1\n",
    "                time.sleep(0.5)\n",
    "                continue\n",
    "            d = datetime.datetime.now() - t0\n",
    "            ncases = len(problem.cases)\n",
    "            log(\"Parsed input in %.2fs, got %s cases\" % (d.total_seconds(), ncases))\n",
    "            \n",
    "            t0 = datetime.datetime.now()\n",
    "            with open(fileout, 'w') as out:\n",
    "                problem.solve(out)\n",
    "            d = datetime.datetime.now() - t0\n",
    "            log(\"Solved problem in %.2fs\" % d.total_seconds())\n",
    "\n",
    "            problem.notify()\n",
    "            return\n",
    "        \n",
    "    @staticmethod\n",
    "    def notify():\n",
    "        os.system(\"mplayer /usr/share/apps/kgoldrunner/themes/default/victory.ogg >/dev/null\")\n",
    "\n",
    "    \n",
    "\n",
    "class Problem(CodejamProblem):\n",
    "    def __init__(self, input):\n",
    "        CodejamProblem.__init__(self, input)\n",
    "        \n",
    "        T = self.readint()\n",
    "        for i in range(T):\n",
    "            R, C = self.readints()\n",
    "            grid = []\n",
    "            for i in range(R):\n",
    "                grid.append(self.readline())\n",
    "            self.cases.append((R, C, grid))\n",
    "        \n",
    "    def solvecase(self, case):\n",
    "        R, C, grid = case\n",
    "        \n",
    "        empty = dict()\n",
    "        beams = dict()\n",
    "        revbeams = dict()\n",
    "        for i in range(R):\n",
    "            for j in range(C):\n",
    "                s = grid[i][j]\n",
    "                if s == \".\":\n",
    "                    empty[(i,j)] = len(empty)\n",
    "                elif s in \"-|\":\n",
    "                    beams[(i,j)] = len(beams)\n",
    "                    revbeams[beams[(i,j)]] = (i,j)\n",
    "                    \n",
    "        # Empty square: [(Beam, Direction), ...]\n",
    "        forbidden = []\n",
    "        coverage = {e:[] for e in range(len(empty))}\n",
    "        for t in beams:\n",
    "            empty_sq = [[], []]\n",
    "            for (dx, dy, dir) in [(-1,0,0), (1,0,0), (0,-1,1), (0,1,1)]:\n",
    "                y, x = t\n",
    "                while True:\n",
    "                    x += dx\n",
    "                    y += dy\n",
    "                    if x < 0 or y < 0 or x >= C or y >= R:\n",
    "                        break\n",
    "                    if grid[y][x] == \"#\":\n",
    "                        break\n",
    "                    elif grid[y][x] in \"-|\":\n",
    "                        forbidden.append((beams[t], dir))\n",
    "                        break\n",
    "                    elif grid[y][x] == \"\\\\\":\n",
    "                        dx, dy = dy, dx\n",
    "                    elif grid[y][x] == \"/\":\n",
    "                        dx, dy = -dy, -dx\n",
    "                    elif grid[y][x] == \".\":\n",
    "                        empty_sq[dir].append((y,x))\n",
    "                    else:\n",
    "                        assert False\n",
    "                    \n",
    "            for dir in [0,1]:\n",
    "                for yx in empty_sq[dir]:\n",
    "                    coverage[empty[yx]].append((beams[t], dir))\n",
    "                        \n",
    "        # Solve\n",
    "        from sage.all import Graph\n",
    "        G = Graph(2 * len(beams))\n",
    "        \n",
    "        for b in range(len(beams)):\n",
    "            G.add_edge((2*b, 2*b+1))\n",
    "         \n",
    "        #print(\"coverage: {}\".format(coverage))\n",
    "        for e, bd in coverage.items():\n",
    "            if not bd:\n",
    "                return None\n",
    "            elif len(bd) == 1:\n",
    "                forbidden.append((bd[0][0], 1-bd[0][1]))\n",
    "            elif len(bd) == 2:\n",
    "                v1 = 2*bd[0][0] + (1-bd[0][1])\n",
    "                v2 = 2*bd[1][0] + (1-bd[1][1])\n",
    "                G.add_edge((v1,v2))\n",
    "            else:\n",
    "                print(\"e = {}; bd = {}\".format(e, bd))\n",
    "                assert False\n",
    "                \n",
    "        for bd in set(forbidden):\n",
    "            v1 = 2*bd[0] + bd[1]\n",
    "            G.delete_vertex(v1)\n",
    "\n",
    "        S = G.independent_set()\n",
    "        assert(len(S) <= len(beams))\n",
    "        if len(S) < len(beams):\n",
    "            return None\n",
    "        \n",
    "        # Adjust grid\n",
    "        ngrid = [list(row) for row in grid]\n",
    "        for s in S:\n",
    "            b = s // 2\n",
    "            d = s % 2\n",
    "            i, j = revbeams[b]\n",
    "            if d == 0:\n",
    "                ngrid[i][j] = \"-\"\n",
    "            else:\n",
    "                ngrid[i][j] = \"|\"\n",
    "        \n",
    "        return \"\\n\".join(\"\".join(row) for row in ngrid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "input=\"\"\"\n",
    "5\n",
    "1 3\n",
    "-.-\n",
    "3 4\n",
    "#.##\n",
    "#--#\n",
    "####\n",
    "2 2\n",
    "-.\n",
    "#|\n",
    "4 3\n",
    ".|.\n",
    "-//\n",
    ".-.\n",
    "#\\\\/\n",
    "3 3\n",
    "/|\\\\\n",
    "\\\\\\\\/\n",
    "./#\n",
    "\"\"\"\n",
    "\n",
    "output=\"\"\"\n",
    "Case #1: IMPOSSIBLE\n",
    "Case #2: POSSIBLE\n",
    "#.##\n",
    "#||#\n",
    "####\n",
    "Case #3: POSSIBLE\n",
    "|.\n",
    "#|\n",
    "Case #4: POSSIBLE\n",
    ".-.\n",
    "|//\n",
    ".|.\n",
    "#\\/\n",
    "Case #5: IMPOSSIBLE\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "input = \"\".join(line+\"\\n\" for line in input.splitlines() if line)\n",
    "output = \"\".join(line+\"\\n\" for line in output.splitlines() if line)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": [
    "P = Problem(input)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Case #1: IMPOSSIBLE\n",
      "Case #2: POSSIBLE\n",
      "#.##\n",
      "#||#\n",
      "####\n",
      "Case #3: POSSIBLE\n",
      "-.\n",
      "#-\n",
      "Case #4: POSSIBLE\n",
      ".-.\n",
      "|//\n",
      ".-.\n",
      "#\\/\n",
      "Case #5: IMPOSSIBLE\n"
     ]
    },
    {
     "ename": "AssertionError",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAssertionError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-170-8f788fb27dcd>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mP\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msolve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mraw\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mP\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msolvecheck\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moutput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;32m/home/jdemeyer/.sage/temp/tamiyo/28743/spyx/_home_jdemeyer__sage_temp_tamiyo_28743_tmp_MV4JcS_spyx/_home_jdemeyer__sage_temp_tamiyo_28743_tmp_MV4JcS_spyx_0.pyx\u001b[0m in \u001b[0;36m_home_jdemeyer__sage_temp_tamiyo_28743_tmp_MV4JcS_spyx_0.CodejamProblem.solvecheck (_home_jdemeyer__sage_temp_tamiyo_28743_tmp_MV4JcS_spyx_0.c:4404)\u001b[0;34m()\u001b[0m\n\u001b[1;32m     41\u001b[0m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mStringIO\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msolve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 43\u001b[0;31m         \u001b[0;32massert\u001b[0m \u001b[0mout\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetvalue\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0moutput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     44\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     45\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mformatanswer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mans\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mAssertionError\u001b[0m: "
     ]
    }
   ],
   "source": [
    "P.solve(raw=False)\n",
    "P.solvecheck(output)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "precomputing...\n",
      "autosolving...\n",
      "Read input in 0.00s\n",
      "Traceback (most recent call last):\n",
      "  File \"_home_jdemeyer__sage_temp_tamiyo_28743_tmp_MV4JcS_spyx_0.pyx\", line 75, in _home_jdemeyer__sage_temp_tamiyo_28743_tmp_MV4JcS_spyx_0.CodejamProblem.autosolve (_home_jdemeyer__sage_temp_tamiyo_28743_tmp_MV4JcS_spyx_0.c:5192)\n",
      "    problem = cls(input, *args, **kwds)\n",
      "  File \"_home_jdemeyer__sage_temp_tamiyo_28743_tmp_MV4JcS_spyx_0.pyx\", line 105, in _home_jdemeyer__sage_temp_tamiyo_28743_tmp_MV4JcS_spyx_0.Problem.__init__ (_home_jdemeyer__sage_temp_tamiyo_28743_tmp_MV4JcS_spyx_0.c:6151)\n",
      "    T = self.readint()\n",
      "  File \"_home_jdemeyer__sage_temp_tamiyo_28743_tmp_MV4JcS_spyx_0.pyx\", line 23, in _home_jdemeyer__sage_temp_tamiyo_28743_tmp_MV4JcS_spyx_0.CodejamProblem.readint (_home_jdemeyer__sage_temp_tamiyo_28743_tmp_MV4JcS_spyx_0.c:3444)\n",
      "    return Integer(self.readline())\n",
      "  File \"_home_jdemeyer__sage_temp_tamiyo_28743_tmp_MV4JcS_spyx_0.pyx\", line 20, in _home_jdemeyer__sage_temp_tamiyo_28743_tmp_MV4JcS_spyx_0.CodejamProblem.readline (_home_jdemeyer__sage_temp_tamiyo_28743_tmp_MV4JcS_spyx_0.c:3365)\n",
      "    return next(self.inputlines)\n",
      "StopIteration\n",
      "Read input in 0.00s\n",
      "Parsed input in 0.00s, got 99 cases\n",
      "Solved problem in 0.20s\n"
     ]
    }
   ],
   "source": [
    "P.autosolve(\"in/C-small-attempt0.in\", \"out\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "SageMath 8.0.beta4",
   "language": "",
   "name": "sagemath"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
