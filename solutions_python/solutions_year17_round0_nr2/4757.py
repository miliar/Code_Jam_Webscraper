{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Case #1: 129\n",
      "Case #2: 999\n",
      "Case #3: 7\n",
      "Case #4: 489\n",
      "Case #5: 589\n",
      "Case #6: 279\n",
      "Case #7: 679\n",
      "Case #8: 459\n",
      "Case #9: 479\n",
      "Case #10: 149\n",
      "Case #11: 799\n",
      "Case #12: 699\n",
      "Case #13: 599\n",
      "Case #14: 449\n",
      "Case #15: 599\n",
      "Case #16: 599\n",
      "Case #17: 5\n",
      "Case #18: 399\n",
      "Case #19: 499\n",
      "Case #20: 199\n",
      "Case #21: 699\n",
      "Case #22: 569\n",
      "Case #23: 999\n",
      "Case #24: 899\n",
      "Case #25: 589\n",
      "Case #26: 399\n",
      "Case #27: 459\n",
      "Case #28: 499\n",
      "Case #29: 499\n",
      "Case #30: 777\n",
      "Case #31: 12\n",
      "Case #32: 149\n",
      "Case #33: 699\n",
      "Case #34: 678\n",
      "Case #35: 799\n",
      "Case #36: 335\n",
      "Case #37: 224\n",
      "Case #38: 149\n",
      "Case #39: 299\n",
      "Case #40: 189\n",
      "Case #41: 669\n",
      "Case #42: 299\n",
      "Case #43: 289\n",
      "Case #44: 369\n",
      "Case #45: 699\n",
      "Case #46: 199\n",
      "Case #47: 156\n",
      "Case #48: 899\n",
      "Case #49: 789\n",
      "Case #50: 899\n",
      "Case #51: 789\n",
      "Case #52: 77\n",
      "Case #53: 469\n",
      "Case #54: 236\n",
      "Case #55: 1\n",
      "Case #56: 259\n",
      "Case #57: 237\n",
      "Case #58: 699\n",
      "Case #59: 899\n",
      "Case #60: 299\n",
      "Case #61: 499\n",
      "Case #62: 269\n",
      "Case #63: 468\n",
      "Case #64: 599\n",
      "Case #65: 889\n",
      "Case #66: 699\n",
      "Case #67: 115\n",
      "Case #68: 299\n",
      "Case #69: 167\n",
      "Case #70: 799\n",
      "Case #71: 189\n",
      "Case #72: 289\n",
      "Case #73: 399\n",
      "Case #74: 789\n",
      "Case #75: 139\n",
      "Case #76: 399\n",
      "Case #77: 599\n",
      "Case #78: 599\n",
      "Case #79: 79\n",
      "Case #80: 222\n",
      "Case #81: 499\n",
      "Case #82: 699\n",
      "Case #83: 69\n",
      "Case #84: 299\n",
      "Case #85: 199\n",
      "Case #86: 146\n",
      "Case #87: 899\n",
      "Case #88: 339\n",
      "Case #89: 199\n",
      "Case #90: 899\n",
      "Case #91: 589\n",
      "Case #92: 699\n",
      "Case #93: 679\n",
      "Case #94: 599\n",
      "Case #95: 799\n",
      "Case #96: 579\n",
      "Case #97: 469\n",
      "Case #98: 699\n",
      "Case #99: 369\n",
      "Case #100: 499\n"
     ]
    }
   ],
   "source": [
    "def lee(N):\n",
    "    N=int(N)\n",
    "    N=str(N)\n",
    "    if(len(N)==1):\n",
    "        return N\n",
    "    \n",
    "    elif(len(N)==2):\n",
    "        if(int(N)==10):\n",
    "            N=int(N)-1\n",
    "            return N\n",
    "        else:\n",
    "            return caso_2(N)\n",
    "            \n",
    "    elif(len(N)==3):\n",
    "        if(int(N)==100):\n",
    "            N=int(N)-1\n",
    "            return N\n",
    "        else:\n",
    "            return caso_3(N)\n",
    "    elif(int(N)==1000):\n",
    "        N=int(N)-1\n",
    "        return N\n",
    "        \n",
    "def caso_2(N):\n",
    "    a=N[0]\n",
    "    b=N[1]\n",
    "    if(a<=b):\n",
    "        return N\n",
    "    elif(a>b):\n",
    "        while(1):\n",
    "            N = int(N)-1\n",
    "            N=str(N)\n",
    "            a_=N[0]\n",
    "            b_=N[1]\n",
    "            if(a_<b_):\n",
    "                return N\n",
    "                break\n",
    "            else:\n",
    "                continue\n",
    "    elif(a==b):\n",
    "        return N\n",
    "\n",
    "        \n",
    "def caso_3(N):\n",
    "    a=N[0]\n",
    "    b=N[1]\n",
    "    c=N[2]\n",
    "    if(int(N[1])==0):\n",
    "        aux=str(int(N[0])-1)\n",
    "        N=str(aux)+str(99)\n",
    "        return N\n",
    "    elif(a<=b and b<=c):\n",
    "        return N\n",
    "    elif(a>b or b>c):\n",
    "        while(1):\n",
    "            N=int(N)-1\n",
    "            N=str(N)\n",
    "            a_=N[0]\n",
    "            b_=N[1]\n",
    "            c_=N[2]\n",
    "            if(a_<=b_ and b_<=c_):\n",
    "                return N\n",
    "                break\n",
    "            else:\n",
    "                continue\n",
    "\n",
    "                \n",
    "if __name__ == \"__main__\":\n",
    "    archivo = open(\"xxx.in\",\"r\")\n",
    "    contenido = archivo.readlines()\n",
    "    i=1\n",
    "    for k in range(1,101):\n",
    "        N = contenido[k]\n",
    "        N = str(N)\n",
    "        case=lee(N)\n",
    "        output=open(\"lemus.txt\", \"a\")\n",
    "        output.write(\"Case#\"+str(i)+\":\"+str(case))\n",
    "        print(\"Case #\"+str(i)+\": \"+str(case))\n",
    "        i=i+1\n",
    "    output.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
