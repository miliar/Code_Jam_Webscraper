{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['132', '1000', '7', '111111111111111110', '905', '391458953027532635', '723897627649600590', '11122233441', '412223334467890000', '522444557790', '771206424036780011', '89', '811112333445578899', '999999999999999999', '430315219406019114', '11333445538', '10999999999', '21233455667777788', '839744037703188439', '123334660146', '11111223333444441', '468091894546410352', '62', '270268070556368391', '71244667900', '549', '485379876698498904', '34166538267235763', '134798929036721004', '866433223939793507', '13378801123478899', '625768649238376319', '110', '311123444556666888', '661334556899', '655117260471837669', '969029391256960441', '406040728221622439', '32597726358849364', '24418431731', '41122445667889', '21', '111111111082590416', '111111122222222200', '72', '11223455688887', '11131234458', '86968879979', '11122222334444433', '827', '22233345566677889', '222142849565', '22244567888', '119892253166711850', '205189601823081245', '145868669967', '1000000000000000000', '712245667778', '25343589837', '112224555511', '214566777888', '451325057379850438', '11111111111100', '568565500917251027', '549679922519235684', '33', '457600632250227540', '180788405795872325', '453631111486311627', '439999999999', '780', '122222211635179876', '76999999999999', '351476985533135900', '11123444567788889', '780424905887093387', '12234445566728969', '9', '252244566677899999', '314628981565438056', '25567899559567', '460669185871677122', '107884168971852062', '71123345678898', '32999999999999999', '1', '11234445666882438', '14458999373', '62223466778', '989999999999999999', '111111111110', '653161544328834085', '767667779778', '67468469469984', '773792795920127467', '82233334456679', '12333162168292', '12355566778900', '11411234445899', '111100001222556799']\n"
     ]
    }
   ],
   "source": [
    "S = []\n",
    "with open('numb.in','r') as f:\n",
    "    for line in f :\n",
    "        S.append(line.strip())\n",
    "del S[0]\n",
    "print(S)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "out_n = []\n",
    "for number in S :\n",
    "    p = int(number[0])\n",
    "    L = len(number)\n",
    "    j=0\n",
    "    for j in range(1,L) :\n",
    "        q = int(number[j])\n",
    "        if p > q :\n",
    "            number = number[:j-1] +str(p-1) + '9'*(L-j)\n",
    "            break\n",
    "        p = q\n",
    "    p = int(number[j-1])\n",
    "    for k in range(j-1,0,-1) :\n",
    "        q = int(number[k-1])\n",
    "        if q <= p :\n",
    "            break\n",
    "        number = number[:k-1] +str(q-1) + '9' + number[k+1:]\n",
    "        p = q-1\n",
    "    out_n.append(number.strip('0'))\n",
    "#print(S)\n",
    "#print(out_n)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "with open('numb.out','w') as f2 :\n",
    "    for idx,ans in enumerate(out_n) :\n",
    "        f2.write('Case #{}: {}\\n'.format(idx+1,ans))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
