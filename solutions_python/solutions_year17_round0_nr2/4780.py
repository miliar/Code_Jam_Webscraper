{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Case #1: 129\n",
      "Case #2: 999\n",
      "Case #3: 7\n",
      "Case #4: 499\n",
      "Case #5: 899\n",
      "Case #6: 199\n",
      "Case #7: 299\n",
      "Case #8: 449\n",
      "Case #9: 149\n",
      "Case #10: 699\n",
      "Case #11: 569\n",
      "Case #12: 699\n",
      "Case #13: 899\n",
      "Case #14: 169\n",
      "Case #15: 899\n",
      "Case #16: 689\n",
      "Case #17: 599\n",
      "Case #18: 599\n",
      "Case #19: 279\n",
      "Case #20: 679\n",
      "Case #21: 389\n",
      "Case #22: 299\n",
      "Case #23: 299\n",
      "Case #24: 799\n",
      "Case #25: 334\n",
      "Case #26: 799\n",
      "Case #27: 168\n",
      "Case #28: 899\n",
      "Case #29: 789\n",
      "Case #30: 559\n",
      "Case #31: 379\n",
      "Case #32: 199\n",
      "Case #33: 899\n",
      "Case #34: 899\n",
      "Case #35: 799\n",
      "Case #36: 599\n",
      "Case #37: 499\n",
      "Case #38: 399\n",
      "Case #39: 799\n",
      "Case #40: 117\n",
      "Case #41: 799\n",
      "Case #42: 339\n",
      "Case #43: 369\n",
      "Case #44: 377\n",
      "Case #45: 499\n",
      "Case #46: 48\n",
      "Case #47: 1\n",
      "Case #48: 226\n",
      "Case #49: 355\n",
      "Case #50: 579\n",
      "Case #51: 899\n",
      "Case #52: 569\n",
      "Case #53: 899\n",
      "Case #54: 499\n",
      "Case #55: 369\n",
      "Case #56: 899\n",
      "Case #57: 699\n",
      "Case #58: 699\n",
      "Case #59: 599\n",
      "Case #60: 899\n",
      "Case #61: 599\n",
      "Case #62: 679\n",
      "Case #63: 599\n",
      "Case #64: 46\n",
      "Case #65: 899\n",
      "Case #66: 789\n",
      "Case #67: 799\n",
      "Case #68: 689\n",
      "Case #69: 699\n",
      "Case #70: 799\n",
      "Case #71: 589\n",
      "Case #72: 899\n",
      "Case #73: 367\n",
      "Case #74: 699\n",
      "Case #75: 799\n",
      "Case #76: 499\n",
      "Case #77: 469\n",
      "Case #78: 349\n"
     ]
    },
    {
     "ename": "IndexError",
     "evalue": "string index out of range",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-13-a4e79beccb0c>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m()\u001b[0m\n\u001b[0;32m     73\u001b[0m         \u001b[0mN\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mcontenido\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mk\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     74\u001b[0m         \u001b[0mN\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mstr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mN\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 75\u001b[1;33m         \u001b[0mcase\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mlee\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mN\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     76\u001b[0m         \u001b[0moutput\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mopen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"salida1.txt\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"a\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     77\u001b[0m         \u001b[0moutput\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mwrite\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Case #\"\u001b[0m\u001b[1;33m+\u001b[0m\u001b[0mstr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mi\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m+\u001b[0m\u001b[1;34m\": \"\u001b[0m\u001b[1;33m+\u001b[0m\u001b[0mstr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcase\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m+\u001b[0m\u001b[1;34m\"\\n\"\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<ipython-input-13-a4e79beccb0c>\u001b[0m in \u001b[0;36mlee\u001b[1;34m(N)\u001b[0m\n\u001b[0;32m     17\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mN\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     18\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 19\u001b[1;33m             \u001b[1;32mreturn\u001b[0m \u001b[0mcaso_3\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mN\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     20\u001b[0m     \u001b[1;32melif\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mN\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m==\u001b[0m\u001b[1;36m1000\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     21\u001b[0m         \u001b[0mN\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mN\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m-\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32m<ipython-input-13-a4e79beccb0c>\u001b[0m in \u001b[0;36mcaso_3\u001b[1;34m(N)\u001b[0m\n\u001b[0;32m     58\u001b[0m             \u001b[0mpa_\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mN\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m0\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     59\u001b[0m             \u001b[0mpb_\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mN\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m1\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 60\u001b[1;33m             \u001b[0mpc_\u001b[0m\u001b[1;33m=\u001b[0m\u001b[0mN\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;36m2\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     61\u001b[0m             \u001b[1;32mif\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpa_\u001b[0m\u001b[1;33m<=\u001b[0m\u001b[0mpb_\u001b[0m \u001b[1;32mand\u001b[0m \u001b[0mpb_\u001b[0m\u001b[1;33m<=\u001b[0m\u001b[0mpc_\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     62\u001b[0m                 \u001b[1;32mreturn\u001b[0m \u001b[0mN\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mIndexError\u001b[0m: string index out of range"
     ]
    }
   ],
   "source": [
    "def lee(N):\n",
    "    N=int(N)\n",
    "    N=str(N)\n",
    "    if(len(N)==1):\n",
    "        return N\n",
    "    \n",
    "    elif(len(N)==2):\n",
    "        if(int(N)==10):\n",
    "            N=int(N)-1\n",
    "            return N\n",
    "        else:\n",
    "            return caso_2(N)\n",
    "            \n",
    "    elif(len(N)==3):\n",
    "        if(int(N)==100):\n",
    "            N=int(N)-1\n",
    "            return N\n",
    "        else:\n",
    "            return caso_3(N)\n",
    "    elif(int(N)==1000):\n",
    "        N=int(N)-1\n",
    "        return N\n",
    "        \n",
    "def caso_2(N):\n",
    "    pa=N[0]\n",
    "    pb=N[1]\n",
    "    if(pa<=pb):\n",
    "        return N\n",
    "    elif(pa>pb):\n",
    "        while(1):\n",
    "            N = int(N)-1\n",
    "            N=str(N)\n",
    "            pa_=N[0]\n",
    "            pb_=N[1]\n",
    "            if(pa_<pb_):\n",
    "                return N\n",
    "                break\n",
    "            else:\n",
    "                continue\n",
    "    elif(pa==pb):\n",
    "        return N\n",
    "\n",
    "        \n",
    "def caso_3(N):\n",
    "    pa=N[0]\n",
    "    pb=N[1]\n",
    "    pc=N[2]\n",
    "    if(int(N[1])==0):\n",
    "        aux=str(int(N[0])-1)\n",
    "        N=str(aux)+str(99)\n",
    "        return N\n",
    "    elif(pa<=pb and pb<=pc):\n",
    "        return N\n",
    "    elif(pa>pb or pb>pc):\n",
    "        while(1):\n",
    "            N=int(N)-1\n",
    "            N=str(N)\n",
    "            pa_=N[0]\n",
    "            pb_=N[1]\n",
    "            pc_=N[2]\n",
    "            if(pa_<=pb_ and pb_<=pc_):\n",
    "                return N\n",
    "                break\n",
    "            else:\n",
    "                continue\n",
    "\n",
    "                \n",
    "if __name__ == \"__main__\":\n",
    "    archivo = open(\"B-small-attempt8.in\",\"r\")\n",
    "    contenido = archivo.readlines()\n",
    "    i=1\n",
    "    for k in range(1,101):\n",
    "        N = contenido[k]\n",
    "        N = str(N)\n",
    "        case=lee(N)\n",
    "        output=open(\"salida1.txt\", \"a\")\n",
    "        output.write(\"Case #\"+str(i)+\": \"+str(case)+\"\\n\")\n",
    "        print(\"Case #\"+str(i)+\": \"+str(case))\n",
    "        i=i+1\n",
    "    output.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
