{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def is_tidy_number(target_num_list):\n",
    "    is_tidy_num = True\n",
    "\n",
    "    for checking_digit_index in range(1, len(target_num_list)):\n",
    "        if target_num_list[checking_digit_index] < target_num_list[checking_digit_index - 1]:\n",
    "            is_tidy_num = False\n",
    "            break\n",
    "            \n",
    "    return is_tidy_num\n",
    "\n",
    "def get_largest_tidy_number(N):\n",
    "    largest_tidy_num = None\n",
    "    \n",
    "    # separate each digit of input to respective digit stored in list\n",
    "    N_list = [int(d) for d in str(N)]\n",
    "    \n",
    "    if not is_tidy_number(N_list):\n",
    "        # get largest tidy number that is <= N\n",
    "        # iterate through each digit to get the largest tidy number\n",
    "        for reverse_check_digit_index in range((len(N_list) - 1), 0, -1):\n",
    "            if N_list[reverse_check_digit_index - 1] > N_list[reverse_check_digit_index]:\n",
    "                # if the previous number is larger than later number, (previous_number - 1) and (later_number all become 9)\n",
    "                N_list[reverse_check_digit_index - 1] = N_list[reverse_check_digit_index - 1] - 1\n",
    "                \n",
    "                for alter_digit_index in range((len(N_list) - 1), (reverse_check_digit_index - 1), -1):\n",
    "                    N_list[alter_digit_index] = 9 \n",
    "\n",
    "        # check whether the first digit is 0\n",
    "        if N_list[0] == 0:\n",
    "            original_num_length = len(N_list)\n",
    "            \n",
    "            N_list = []\n",
    "            \n",
    "            for restructure_num_index in range(0, (original_num_length - 1)):\n",
    "                N_list.append(9)\n",
    "            \n",
    "    largest_tidy_num = ''.join(str(x) for x in N_list)  \n",
    "    \n",
    "    return largest_tidy_num"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4\n",
      "132\n",
      "Case #1: 129\n",
      "1000\n",
      "Case #2: 999\n",
      "7\n",
      "Case #3: 7\n",
      "111111111111111110\n",
      "Case #4: 99999999999999999\n"
     ]
    }
   ],
   "source": [
    "t = int(input())\n",
    "for i in range(1, t + 1):\n",
    "    n = int(input())\n",
    "    print(\"Case #\" + str(i) + \": \" + str(get_largest_tidy_number(n)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Case #1: 129\n",
      "Case #2: 999\n",
      "Case #3: 7\n",
      "Case #4: 99999999999999999\n",
      "Time to completion: 0.001001119613647461\n"
     ]
    }
   ],
   "source": [
    "# for testing dataset\n",
    "import time\n",
    "start_time = time.time()\n",
    "\n",
    "# read input from file, and print the output\n",
    "line_count = 0\n",
    "output_file = open('C:\\\\Users\\\\Tan\\\\Dropbox\\\\practice_programming\\\\Competitive Programming\\\\Google Code Jam\\\\2017\\\\Qualification Round\\\\B - Tidy Numbers\\\\Dataset\\\\Experiment\\\\testing_input-output', 'w')\n",
    "\n",
    "with open(\"C:\\\\Users\\\\Tan\\\\Dropbox\\\\practice_programming\\\\Competitive Programming\\\\Google Code Jam\\\\2017\\\\Qualification Round\\\\B - Tidy Numbers\\\\Dataset\\\\Experiment\\\\testing_input.txt\") as f:\n",
    "    for line in f:\n",
    "        line = line.rstrip('\\n')\n",
    "        \n",
    "        if line_count == 0:\n",
    "            t = int(line)\n",
    "        else:\n",
    "            n = int(line)\n",
    "            output_line = \"Case #\" + str(line_count) + \": \" + str(get_largest_tidy_number(n))\n",
    "            print(output_line)\n",
    "            output_file.write(output_line + \"\\n\")\n",
    "            \n",
    "        line_count = line_count + 1\n",
    "\n",
    "output_file.close()\n",
    "\n",
    "elapsed_time = time.time() - start_time\n",
    "print(\"Time to completion: \" + str(elapsed_time))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Case #1: 129\n",
      "Case #2: 999\n",
      "Case #3: 7\n",
      "Case #4: 356\n",
      "Case #5: 339\n",
      "Case #6: 689\n",
      "Case #7: 199\n",
      "Case #8: 899\n",
      "Case #9: 899\n",
      "Case #10: 899\n",
      "Case #11: 899\n",
      "Case #12: 299\n",
      "Case #13: 389\n",
      "Case #14: 499\n",
      "Case #15: 399\n",
      "Case #16: 39\n",
      "Case #17: 379\n",
      "Case #18: 599\n",
      "Case #19: 799\n",
      "Case #20: 899\n",
      "Case #21: 499\n",
      "Case #22: 34\n",
      "Case #23: 299\n",
      "Case #24: 699\n",
      "Case #25: 19\n",
      "Case #26: 359\n",
      "Case #27: 599\n",
      "Case #28: 399\n",
      "Case #29: 49\n",
      "Case #30: 379\n",
      "Case #31: 389\n",
      "Case #32: 459\n",
      "Case #33: 699\n",
      "Case #34: 335\n",
      "Case #35: 799\n",
      "Case #36: 148\n",
      "Case #37: 399\n",
      "Case #38: 699\n",
      "Case #39: 499\n",
      "Case #40: 199\n",
      "Case #41: 359\n",
      "Case #42: 355\n",
      "Case #43: 499\n",
      "Case #44: 399\n",
      "Case #45: 179\n",
      "Case #46: 589\n",
      "Case #47: 499\n",
      "Case #48: 229\n",
      "Case #49: 569\n",
      "Case #50: 469\n",
      "Case #51: 599\n",
      "Case #52: 366\n",
      "Case #53: 799\n",
      "Case #54: 579\n",
      "Case #55: 568\n",
      "Case #56: 779\n",
      "Case #57: 899\n",
      "Case #58: 279\n",
      "Case #59: 499\n",
      "Case #60: 799\n",
      "Case #61: 279\n",
      "Case #62: 599\n",
      "Case #63: 159\n",
      "Case #64: 699\n",
      "Case #65: 699\n",
      "Case #66: 499\n",
      "Case #67: 238\n",
      "Case #68: 889\n",
      "Case #69: 479\n",
      "Case #70: 399\n",
      "Case #71: 169\n",
      "Case #72: 599\n",
      "Case #73: 166\n",
      "Case #74: 569\n",
      "Case #75: 899\n",
      "Case #76: 499\n",
      "Case #77: 599\n",
      "Case #78: 559\n",
      "Case #79: 777\n",
      "Case #80: 799\n",
      "Case #81: 199\n",
      "Case #82: 999\n",
      "Case #83: 1\n",
      "Case #84: 899\n",
      "Case #85: 459\n",
      "Case #86: 499\n",
      "Case #87: 889\n",
      "Case #88: 899\n",
      "Case #89: 899\n",
      "Case #90: 289\n",
      "Case #91: 229\n",
      "Case #92: 189\n",
      "Case #93: 229\n",
      "Case #94: 55\n",
      "Case #95: 169\n",
      "Case #96: 899\n",
      "Case #97: 339\n",
      "Case #98: 8\n",
      "Case #99: 599\n",
      "Case #100: 558\n",
      "Time to completion: 0.0070056915283203125\n"
     ]
    }
   ],
   "source": [
    "# for small dataset\n",
    "import time\n",
    "start_time = time.time()\n",
    "\n",
    "# read input from file, and print the output\n",
    "line_count = 0\n",
    "output_file = open('C:\\\\Users\\\\Tan\\\\Dropbox\\\\practice_programming\\\\Competitive Programming\\\\Google Code Jam\\\\2017\\\\Qualification Round\\\\B - Tidy Numbers\\\\Dataset\\\\B-small-attempt0-output', 'w')\n",
    "\n",
    "with open(\"C:\\\\Users\\\\Tan\\\\Dropbox\\\\practice_programming\\\\Competitive Programming\\\\Google Code Jam\\\\2017\\\\Qualification Round\\\\B - Tidy Numbers\\\\Dataset\\\\B-small-attempt0.in\") as f:\n",
    "    for line in f:\n",
    "        line = line.rstrip('\\n')\n",
    "        \n",
    "        if line_count == 0:\n",
    "            t = int(line)\n",
    "        else:\n",
    "            n = int(line)\n",
    "            output_line = \"Case #\" + str(line_count) + \": \" + str(get_largest_tidy_number(n))\n",
    "            print(output_line)\n",
    "            output_file.write(output_line + \"\\n\")\n",
    "            \n",
    "        line_count = line_count + 1\n",
    "\n",
    "output_file.close()\n",
    "\n",
    "elapsed_time = time.time() - start_time\n",
    "print(\"Time to completion: \" + str(elapsed_time))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# for large dataset\n",
    "import time\n",
    "start_time = time.time()\n",
    "\n",
    "# read input from file, and print the output\n",
    "line_count = 0\n",
    "output_file = open('C:\\\\Users\\\\Tan\\\\Dropbox\\\\practice_programming\\\\Competitive Programming\\\\Google Code Jam\\\\2017\\\\Qualification Round\\\\B - Tidy Numbers\\\\Dataset\\\\', 'w')\n",
    "\n",
    "with open(\"C:\\\\Users\\\\Tan\\\\Dropbox\\\\practice_programming\\\\Competitive Programming\\\\Google Code Jam\\\\2017\\\\Qualification Round\\\\B - Tidy Numbers\\\\Dataset\\\\\") as f:\n",
    "    for line in f:\n",
    "        line = line.rstrip('\\n')\n",
    "        \n",
    "        if line_count == 0:\n",
    "            t = int(line)\n",
    "        else:\n",
    "            n = int(line)\n",
    "            output_line = \"Case #\" + str(line_count) + \": \" + str(get_largest_tidy_number(n))\n",
    "            print(output_line)\n",
    "            output_file.write(output_line + \"\\n\")\n",
    "            \n",
    "        line_count = line_count + 1\n",
    "\n",
    "output_file.close()\n",
    "\n",
    "elapsed_time = time.time() - start_time\n",
    "print(\"Time to completion: \" + str(elapsed_time))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
