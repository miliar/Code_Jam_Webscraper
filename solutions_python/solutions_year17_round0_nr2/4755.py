{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": false,
    "deletable": true,
    "editable": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Case #1: 129\n",
      "Case #2: 999\n",
      "Case #3: 7\n",
      "Case #4: 299\n",
      "Case #5: 269\n",
      "Case #6: 399\n",
      "Case #7: 899\n",
      "Case #8: 589\n",
      "Case #9: 169\n",
      "Case #10: 399\n",
      "Case #11: 499\n",
      "Case #12: 288\n",
      "Case #13: 599\n",
      "Case #14: 456\n",
      "Case #15: 799\n",
      "Case #16: 339\n",
      "Case #17: 799\n",
      "Case #18: 139\n",
      "Case #19: 799\n",
      "Case #20: 199\n",
      "Case #21: 599\n",
      "Case #22: 8\n",
      "Case #23: 899\n",
      "Case #24: 588\n",
      "Case #25: 499\n",
      "Case #26: 359\n",
      "Case #27: 499\n",
      "Case #28: 599\n",
      "Case #29: 899\n",
      "Case #30: 489\n",
      "Case #31: 399\n",
      "Case #32: 299\n",
      "Case #33: 779\n",
      "Case #34: 599\n",
      "Case #35: 469\n",
      "Case #36: 699\n",
      "Case #37: 39\n",
      "Case #38: 899\n",
      "Case #39: 566\n",
      "Case #40: 799\n",
      "Case #41: 599\n",
      "Case #42: 799\n",
      "Case #43: 999\n",
      "Case #44: 899\n",
      "Case #45: 399\n",
      "Case #46: 199\n",
      "Case #47: 499\n",
      "Case #48: 479\n",
      "Case #49: 599\n",
      "Case #50: 799\n",
      "Case #51: 59\n",
      "Case #52: 235\n",
      "Case #53: 239\n",
      "Case #54: 899\n",
      "Case #55: 589\n",
      "Case #56: 899\n",
      "Case #57: 299\n",
      "Case #58: 799\n",
      "Case #59: 157\n",
      "Case #60: 899\n",
      "Case #61: 339\n",
      "Case #62: 199\n",
      "Case #63: 899\n",
      "Case #64: 599\n",
      "Case #65: 279\n",
      "Case #66: 399\n",
      "Case #67: 899\n",
      "Case #68: 899\n",
      "Case #69: 499\n",
      "Case #70: 799\n",
      "Case #71: 259\n",
      "Case #72: 466\n",
      "Case #73: 19\n",
      "Case #74: 199\n",
      "Case #75: 599\n",
      "Case #76: 799\n",
      "Case #77: 799\n",
      "Case #78: 46\n",
      "Case #79: 499\n",
      "Case #80: 225\n",
      "Case #81: 689\n",
      "Case #82: 599\n",
      "Case #83: 1\n",
      "Case #84: 379\n",
      "Case #85: 679\n",
      "Case #86: 199\n",
      "Case #87: 599\n",
      "Case #88: 279\n",
      "Case #89: 899\n",
      "Case #90: 799\n",
      "Case #91: 899\n",
      "Case #92: 279\n",
      "Case #93: 149\n",
      "Case #94: 255\n",
      "Case #95: 899\n",
      "Case #96: 559\n",
      "Case #97: 699\n",
      "Case #98: 13\n",
      "Case #99: 499\n",
      "Case #100: 699\n"
     ]
    }
   ],
   "source": [
    "def lee(N):\n",
    "    N=int(N)\n",
    "    N=str(N)\n",
    "    if(len(N)==1):\n",
    "        return N\n",
    "    \n",
    "    elif(len(N)==2):\n",
    "        if(int(N)==10):\n",
    "            N=int(N)-1\n",
    "            return N\n",
    "        else:\n",
    "            return caso_2(N)\n",
    "            \n",
    "    elif(len(N)==3):\n",
    "        if(int(N)==100):\n",
    "            N=int(N)-1\n",
    "            return N\n",
    "        else:\n",
    "            return caso_3(N)\n",
    "    elif(int(N)==1000):\n",
    "        N=int(N)-1\n",
    "        return N\n",
    "        \n",
    "def caso_2(N):\n",
    "    pa=N[0]\n",
    "    pb=N[1]\n",
    "    if(pa<=pb):\n",
    "        return N\n",
    "    elif(pa>pb):\n",
    "        while(1):\n",
    "            N = int(N)-1\n",
    "            N=str(N)\n",
    "            pa_=N[0]\n",
    "            pb_=N[1]\n",
    "            if(pa_<pb_):\n",
    "                return N\n",
    "                break\n",
    "            else:\n",
    "                continue\n",
    "    elif(pa==pb):\n",
    "        return N\n",
    "\n",
    "        \n",
    "def caso_3(N):\n",
    "    pa=N[0]\n",
    "    pb=N[1]\n",
    "    pc=N[2]\n",
    "    if(int(N[1])==0):\n",
    "        aux=str(int(N[0])-1)\n",
    "        N=str(aux)+str(99)\n",
    "        return N\n",
    "    elif(pa<=pb and pb<=pc):\n",
    "        return N\n",
    "    elif(pa>pb or pb>pc):\n",
    "        while(1):\n",
    "            N=int(N)-1\n",
    "            N=str(N)\n",
    "            pa_=N[0]\n",
    "            pb_=N[1]\n",
    "            pc_=N[2]\n",
    "            if(pa_<=pb_ and pb_<=pc_):\n",
    "                return N\n",
    "                break\n",
    "            else:\n",
    "                continue\n",
    "\n",
    "                \n",
    "if __name__ == \"__main__\":\n",
    "    archivo = open(\"subir.in\",\"r\")\n",
    "    contenido = archivo.readlines()\n",
    "    i=1\n",
    "    for k in range(1,101):\n",
    "        N = contenido[k]\n",
    "        N = str(N)\n",
    "        case=lee(N)\n",
    "        output=open(\"small.txt\", \"a\")\n",
    "        output.write(\"Case#\"+str(i)+\":\"+str(case))\n",
    "        print(\"Case #\"+str(i)+\": \"+str(case))\n",
    "        i=i+1\n",
    "    output.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true,
    "deletable": true,
    "editable": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
