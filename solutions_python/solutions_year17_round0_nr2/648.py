{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "with open('A-large.in', 'r') as inp:\n",
    "    with open('answer.txt', 'w') as outp:\n",
    "        T = int(inp.readline())\n",
    "        for i in range(T):\n",
    "            line, k = inp.readline().rstrip().split(' ')\n",
    "            k = int(k)\n",
    "            answer = solve1(line, k)\n",
    "            outp.write(\"Case #{0}: {1}\\n\".format(str(i + 1), [str(answer), \"IMPOSSIBLE\"][answer == -1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def solve1(s, k):\n",
    "    answer = 0\n",
    "    current_on = []\n",
    "    for i, sym in enumerate(s):\n",
    "        if i + k <= len(s):\n",
    "            current_state = sum(current_on[-(k - 1):]) + int(sym == '-')\n",
    "            if current_state % 2 == 1:\n",
    "                current_on.append(1)\n",
    "                answer += 1\n",
    "            else:\n",
    "                current_on.append(0)\n",
    "        else:\n",
    "            current_state = sum(current_on[-(k - 1):]) + int(sym == '-')\n",
    "            if current_state % 2 == 1:\n",
    "                answer = -1\n",
    "                break\n",
    "            current_on.append(0)\n",
    "    return answer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1 1 2\n",
      "132\n",
      "129\n",
      " \n",
      "0 0 1\n",
      "1000\n",
      "999\n",
      " \n",
      "7\n",
      "7\n",
      " \n",
      "0 16 17\n",
      "111111111111111110\n",
      "99999999999999999\n",
      " \n",
      "0 0 1\n",
      "2135590\n",
      "1999999\n",
      " \n",
      "0 0 1\n",
      "989\n",
      "899\n",
      " \n",
      "0 3 4\n",
      "11110529079557384\n",
      "9999999999999999\n",
      " \n",
      "0 0 1\n",
      "94668954877547588\n",
      "89999999999999999\n",
      " \n",
      "0 0 1\n",
      "964752577414117207\n",
      "899999999999999999\n",
      " \n",
      "0 0 1\n",
      "605283771027601840\n",
      "599999999999999999\n",
      " \n",
      "0 0 1\n",
      "531775742520856772\n",
      "499999999999999999\n",
      " \n",
      "0 0 1\n",
      "60\n",
      "59\n",
      " \n",
      "2 2 3\n",
      "667065185529441886\n",
      "666999999999999999\n",
      " \n",
      "0 0 1\n",
      "723562675157133306\n",
      "699999999999999999\n",
      " \n",
      "0 5 6\n",
      "1111110\n",
      "999999\n",
      " \n",
      "1 1 2\n",
      "592499570081487229\n",
      "589999999999999999\n",
      " \n",
      "1 1 2\n",
      "791233344566678899\n",
      "789999999999999999\n",
      " \n",
      "1 1 2\n",
      "69333444688888999\n",
      "68999999999999999\n",
      " \n",
      "10 11 12\n",
      "1112233333443\n",
      "1112233333399\n",
      " \n",
      "14 16 17\n",
      "123334467777889998\n",
      "123334467777888999\n",
      " \n",
      "0 0 1\n",
      "511233444455677999\n",
      "499999999999999999\n",
      " \n",
      "1 1 2\n",
      "251123920720775628\n",
      "249999999999999999\n",
      " \n",
      "2 2 3\n",
      "1252754\n",
      "1249999\n",
      " \n",
      "11 11 12\n",
      "1111244566780\n",
      "1111244566779\n",
      " \n",
      "4 4 5\n",
      "114675998796755859\n",
      "114669999999999999\n",
      " \n",
      "3 4 5\n",
      "111771381272348488\n",
      "111699999999999999\n",
      " \n",
      "1 1 2\n",
      "1533344455666688\n",
      "1499999999999999\n",
      " \n",
      "0 0 1\n",
      "5499999\n",
      "4999999\n",
      " \n",
      "0 0 1\n",
      "725\n",
      "699\n",
      " \n",
      "0 0 1\n",
      "214025022305385480\n",
      "199999999999999999\n",
      " \n",
      "0 0 1\n",
      "31\n",
      "29\n",
      " \n",
      "1 1 2\n",
      "274368138452272672\n",
      "269999999999999999\n",
      " \n",
      "11\n",
      "11\n",
      " \n",
      "0 0 1\n",
      "326031824488507802\n",
      "299999999999999999\n",
      " \n",
      "0 0 1\n",
      "511223345556667898\n",
      "499999999999999999\n",
      " \n",
      "13 13 14\n",
      "11222333344558185\n",
      "11222333344557999\n",
      " \n",
      "8 14 15\n",
      "11111111222222213\n",
      "11111111199999999\n",
      " \n",
      "1111222455666777\n",
      "1111222455666777\n",
      " \n",
      "0 0 1\n",
      "846601042066016785\n",
      "799999999999999999\n",
      " \n",
      "3 3 4\n",
      "366811144444456689\n",
      "366799999999999999\n",
      " \n",
      "2233355\n",
      "2233355\n",
      " \n",
      "2 2 3\n",
      "226344684742879175\n",
      "225999999999999999\n",
      " \n",
      "0 0 1\n",
      "7444455666667899\n",
      "6999999999999999\n",
      " \n",
      "1 1 2\n",
      "272570365187256114\n",
      "269999999999999999\n",
      " \n",
      "10 14 15\n",
      "1222333477888880\n",
      "1222333477799999\n",
      " \n",
      "1\n",
      "1\n",
      " \n",
      "3 5 6\n",
      "1234443339837\n",
      "1233999999999\n",
      " \n",
      "339\n",
      "339\n",
      " \n",
      "0 0 1\n",
      "8111133445555800\n",
      "7999999999999999\n",
      " \n",
      "0 1 2\n",
      "3318242575461\n",
      "2999999999999\n",
      " \n",
      "0 0 1\n",
      "8122345556677\n",
      "7999999999999\n",
      " \n",
      "1 1 2\n",
      "460174219875955061\n",
      "459999999999999999\n",
      " \n",
      "0 0 1\n",
      "530298362835878959\n",
      "499999999999999999\n",
      " \n",
      "999999999999999999\n",
      "999999999999999999\n",
      " \n",
      "1444556666777\n",
      "1444556666777\n",
      " \n",
      "23\n",
      "23\n",
      " \n",
      "0 0 1\n",
      "925846576652183170\n",
      "899999999999999999\n",
      " \n",
      "0 0 1\n",
      "543315094217931803\n",
      "499999999999999999\n",
      " \n",
      "3 3 4\n",
      "1278185679796\n",
      "1277999999999\n",
      " \n",
      "1 1 2\n",
      "343715468395266488\n",
      "339999999999999999\n",
      " \n",
      "0 0 1\n",
      "535076128682470703\n",
      "499999999999999999\n",
      " \n",
      "0 0 1\n",
      "10\n",
      "9\n",
      " \n",
      "0 0 1\n",
      "611222344567777999\n",
      "599999999999999999\n",
      " \n",
      "1 1 2\n",
      "381179118797318971\n",
      "379999999999999999\n",
      " \n",
      "0 0 1\n",
      "1000000000000000000\n",
      "999999999999999999\n",
      " \n",
      "2 8 9\n",
      "3355555552437564\n",
      "3349999999999999\n",
      " \n",
      "0 0 1\n",
      "21244455667788899\n",
      "19999999999999999\n",
      " \n",
      "0 11 12\n",
      "111111111111044559\n",
      "99999999999999999\n",
      " \n",
      "1 1 2\n",
      "895419713677370979\n",
      "889999999999999999\n",
      " \n",
      "1 1 2\n",
      "696105815750702813\n",
      "689999999999999999\n",
      " \n",
      "3 4 5\n",
      "2446624\n",
      "2445999\n",
      " \n",
      "0 0 1\n",
      "31223344555677890\n",
      "29999999999999999\n",
      " \n",
      "3 3 4\n",
      "2334388\n",
      "2333999\n",
      " \n",
      "0 0 1\n",
      "6355998\n",
      "5999999\n",
      " \n",
      "8 11 12\n",
      "1222344455553359\n",
      "1222344449999999\n",
      " \n",
      "3 5 6\n",
      "12344423596997657\n",
      "12339999999999999\n",
      " \n",
      "1 1 2\n",
      "231291366728364010\n",
      "229999999999999999\n",
      " \n",
      "0 0 1\n",
      "961693496977353599\n",
      "899999999999999999\n",
      " \n",
      "0 0 1\n",
      "6000112344579\n",
      "5999999999999\n",
      " \n",
      "0 0 1\n",
      "439999999999999999\n",
      "399999999999999999\n",
      " \n",
      "2 2 3\n",
      "178426278751428766\n",
      "177999999999999999\n",
      " \n",
      "3 4 5\n",
      "1123322245556689\n",
      "1122999999999999\n",
      " \n",
      "1 1 2\n",
      "2623356\n",
      "2599999\n",
      " \n",
      "0 0 1\n",
      "6599999999999\n",
      "5999999999999\n",
      " \n",
      "1 1 2\n",
      "142\n",
      "139\n",
      " \n",
      "12 15 16\n",
      "11222333444566665\n",
      "11222333444559999\n",
      " \n",
      "0 0 1\n",
      "6223466667778998\n",
      "5999999999999999\n",
      " \n",
      "0 0 1\n",
      "10999999999999999\n",
      "9999999999999999\n",
      " \n",
      "0 0 1\n",
      "846\n",
      "799\n",
      " \n",
      "0 0 1\n",
      "8799999999999999\n",
      "7999999999999999\n",
      " \n",
      "8 15 16\n",
      "111122234444444407\n",
      "111122233999999999\n",
      " \n",
      "0 0 1\n",
      "31222444556667898\n",
      "29999999999999999\n",
      " \n",
      "9\n",
      "9\n",
      " \n",
      "10 13 14\n",
      "1333446667888849\n",
      "1333446667799999\n",
      " \n",
      "126\n",
      "126\n",
      " \n",
      "6 10 11\n",
      "1111112222215\n",
      "1111111999999\n",
      " \n",
      "6 8 9\n",
      "1111112221128\n",
      "1111111999999\n",
      " \n",
      "0 0 1\n",
      "8345638\n",
      "7999999\n",
      " \n",
      "1 1 2\n",
      "251521272138993888\n",
      "249999999999999999\n",
      " \n",
      "0 0 1\n",
      "811224455567777900\n",
      "799999999999999999\n",
      " \n"
     ]
    }
   ],
   "source": [
    "with open('B-large.in', 'r') as inp:\n",
    "    with open('answer2.txt', 'w') as outp:\n",
    "        T = int(inp.readline())\n",
    "        for i in range(T):\n",
    "            n = inp.readline().rstrip()\n",
    "            answer = solve2(list(n))\n",
    "            print n\n",
    "            print str(int(''.join(answer)))\n",
    "            print ' '\n",
    "            if int(n) < int(str(int(''.join(answer)))):\n",
    "                print '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'\n",
    "            outp.write(\"Case #{0}: {1}\\n\".format(str(i + 1), str(int(''.join(answer)))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def solve2(n):\n",
    "    bad = None\n",
    "    for i, sym in enumerate(n):\n",
    "        if i != 0 and sym < n[i - 1]:\n",
    "            bad = i\n",
    "            break\n",
    "    if bad is None:\n",
    "        return n\n",
    "    last_to_change = bad - 1\n",
    "    first_to_change = bad - 1\n",
    "    while first_to_change != 0 and n[first_to_change - 1] == n[last_to_change]:\n",
    "        first_to_change -= 1\n",
    "        if first_to_change == 0:\n",
    "            break\n",
    "    print first_to_change, last_to_change, bad\n",
    "    for i in range(first_to_change, last_to_change + 1):\n",
    "        n[i] = str(int(n[i]) - 1)\n",
    "    for i in range(first_to_change + 1, len(n)):\n",
    "        n[i] = '9'\n",
    "    return n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'9'"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "str(int('09'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [conda root]",
   "language": "python",
   "name": "conda-root-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
