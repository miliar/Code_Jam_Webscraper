{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2017-04-08T12:15:36.561074",
     "start_time": "2017-04-08T12:15:36.455216"
    },
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Case #1: 129\n",
      "Case #2: 999\n",
      "Case #3: 7\n",
      "Case #4: 99999999999999999\n",
      "Case #5: 499999999999999999\n",
      "Case #6: 299999999999999999\n",
      "Case #7: 67\n",
      "Case #8: 123999999999999\n",
      "Case #9: 699999999999999999\n",
      "Case #10: 49999999999999999\n",
      "Case #11: 689999999999999999\n",
      "Case #12: 899999999999999999\n",
      "Case #13: 999999999999999\n",
      "Case #14: 999999999999999999\n",
      "Case #15: 334445557777889999\n",
      "Case #16: 1133356999\n",
      "Case #17: 599999999999999999\n",
      "Case #18: 899999999999999999\n",
      "Case #19: 46\n",
      "Case #20: 599999999999999999\n",
      "Case #21: 112222344445555999\n",
      "Case #22: 799999999999999999\n",
      "Case #23: 599999999999999999\n",
      "Case #24: 2999999999999999\n",
      "Case #25: 399999999999999999\n",
      "Case #26: 199999999999999\n",
      "Case #27: 112445555559999999\n",
      "Case #28: 99999999999999\n",
      "Case #29: 1222299999999999\n",
      "Case #30: 299\n",
      "Case #31: 3999999999\n",
      "Case #32: 23499999999999999\n",
      "Case #33: 3459999999\n",
      "Case #34: 146999999999999999\n",
      "Case #35: 599999999999999999\n",
      "Case #36: 1113456667777889\n",
      "Case #37: 69999999999999999\n",
      "Case #38: 899999999999999999\n",
      "Case #39: 779999999999999999\n",
      "Case #40: 39999999999999999\n",
      "Case #41: 339999999999999999\n",
      "Case #42: 111222344555999999\n",
      "Case #43: 5999999999\n",
      "Case #44: 11999999999999999\n",
      "Case #45: 499999999999999999\n",
      "Case #46: 11122222235569999\n",
      "Case #47: 359999999999999999\n",
      "Case #48: 2999999999\n",
      "Case #49: 299999999999999\n",
      "Case #50: 3399999999999999\n",
      "Case #51: 147\n",
      "Case #52: 889999999999999999\n",
      "Case #53: 499999999999999999\n",
      "Case #54: 1112334456888999\n",
      "Case #55: 1123333999\n",
      "Case #56: 111345555556999\n",
      "Case #57: 569999999999999999\n",
      "Case #58: 599999999999999\n",
      "Case #59: 1112244499\n",
      "Case #60: 238\n",
      "Case #61: 6999999999999999\n",
      "Case #62: 19999999999999999\n",
      "Case #63: 259999999999999999\n",
      "Case #64: 99999999999999999\n",
      "Case #65: 1133566999999999\n",
      "Case #66: 799999999999999999\n",
      "Case #67: 99\n",
      "Case #68: 119999999999999999\n",
      "Case #69: 19999999999999999\n",
      "Case #70: 1256778888999999\n",
      "Case #71: 11111333333344499\n",
      "Case #72: 599999999999999\n",
      "Case #73: 899999999999999999\n",
      "Case #74: 245666788999999\n",
      "Case #75: 11111111999999999\n",
      "Case #76: 222299999999999\n",
      "Case #77: 124999999999999999\n",
      "Case #78: 6\n",
      "Case #79: 999999999999999999\n",
      "Case #80: 699999999999999999\n",
      "Case #81: 3344999999\n",
      "Case #82: 4999999999\n",
      "Case #83: 224\n",
      "Case #84: 24\n",
      "Case #85: 5799999999\n",
      "Case #86: 499\n",
      "Case #87: 189999999999999999\n",
      "Case #88: 69\n",
      "Case #89: 7999999999999999\n",
      "Case #90: 99999999999999999\n",
      "Case #91: 1\n",
      "Case #92: 299999999999999\n",
      "Case #93: 559999999999999999\n",
      "Case #94: 11114445667778899\n",
      "Case #95: 19\n",
      "Case #96: 1223333344444499\n",
      "Case #97: 6999999999\n",
      "Case #98: 559999999999999999\n",
      "Case #99: 599999999999999999\n",
      "Case #100: 229999999999999\n"
     ]
    }
   ],
   "source": [
    "from __future__ import division, print_function\n",
    "from builtins import input\n",
    "import numpy as np\n",
    "import sys\n",
    "\n",
    "def main():\n",
    "    for tc in range(int(input().strip())):\n",
    "        s = input().strip()\n",
    "        #print(s)\n",
    "        s = np.array([int(x) for x in s])\n",
    "        for i in range(len(s)-1):\n",
    "            if s[i] > s[i+1]:\n",
    "                s[i] -= 1\n",
    "                for j in range(i-1, -1, -1):\n",
    "                    if s[j]>s[j+1]:\n",
    "                        s[j] -= 1\n",
    "                        s[j+1] = 9\n",
    "                for j in range(i+1, len(s)):\n",
    "                    s[j] = 9\n",
    "                break\n",
    "        n = int(\"\".join([str(x) for x in s]))\n",
    "        print(\"Case #%d: %s\"%(tc+1, n))\n",
    "\n",
    "#sys.stdin = open(\"./B.in\")\n",
    "#sys.stdin = open(\"./B-small-attempt1.in\")\n",
    "#sys.stdout = open(\"./B-small-attempt1.out\",\"w\")\n",
    "sys.stdin = open(\"./B-large.in\")\n",
    "sys.stdout = open(\"./B-large.out\",\"w\")\n",
    "\n",
    "main()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
