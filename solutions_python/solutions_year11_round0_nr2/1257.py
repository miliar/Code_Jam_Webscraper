'''
Created on May 7, 2011

@author: Barant
'''
s = """
100
0 0 2 EA
1 QRI 0 4 RRQR
1 QFT 1 QF 7 FAQFDFQ
1 EEZ 1 QE 7 QEEEERA
0 1 QW 2 QW
1 AEH 1 SD 10 EAEAREQQRD
1 WAI 1 AR 10 RWAWDQDDDR
1 RDI 1 QE 10 FQARDEEEQW
1 EET 1 SD 10 SFEERQDQRS
1 QSJ 1 SF 10 QEREAWSQED
1 FFM 1 QF 10 QARFFRFFAS
1 SWT 1 SD 10 WSDWSQSQDD
1 QDK 1 SR 10 ARSWAAARDQ
1 FWK 1 QE 10 WWFAEQRWRD
1 FRU 1 QR 10 FSSSWARFRW
1 ASG 1 AS 10 AQWERASDFS
1 WWB 1 WF 10 RWWESQSAAE
1 WEY 1 SR 10 SRERSQSDEW
1 DWH 1 WE 10 FEADWDRDSR
1 ERN 1 AD 10 DFRQWFREAA
1 SEJ 1 SF 10 EWSSEFAADQ
0 1 DR 8 REWARDED
1 QWU 1 QE 10 WQQAESWRWR
1 WQN 1 WD 10 FSQWDDRRRS
1 RWB 1 WR 10 RRQERWRAWA
1 QDJ 1 SD 10 DQASAEERQA
1 QEN 1 AQ 10 AWAREEQESS
1 DAG 1 AR 10 FASDAAFRFR
1 ARM 1 SF 10 FEFQWWARWF
1 RWN 1 SE 10 WRWRWEEEWE
1 RQO 1 SR 10 QSRFAFRQRW
1 QEY 1 WR 10 WQEQEEQSAD
1 SSZ 1 WD 10 ARDQSSSQRQ
1 DEK 1 WD 10 SWWAEDSADD
0 0 1 F
1 AAI 1 WR 10 RAASQSQESA
1 AQC 1 AR 10 DAQSSFQQAD
1 ESP 0 7 DRESSES
1 DDY 1 QD 10 SWFRDDFDRR
1 EFX 1 SD 10 RSEFSSQAFR
1 WSP 1 WF 10 ADERADQWSQ
1 SAO 1 SE 10 RRWFDAEFAS
1 DFV 1 WE 10 FDFDSEWRSQ
1 AWH 1 QD 10 ASRAWEFASE
1 WQV 1 QR 10 RSDEEDFWQF
1 FDY 1 QR 10 SFDQSRQSER
1 FSM 1 WE 10 SREEASFSRQ
1 QRN 1 SE 10 EQAERQWASR
1 RSX 1 WR 10 QWRFAAQDRS
1 FQM 1 QF 10 ARWAREFQWE
1 FRK 1 WF 10 SSRFERWSFA
1 ASG 1 AS 10 QQWERASDFS
1 WDO 1 AF 10 DWFFAQFRDA
1 QFZ 1 AE 10 WSQSRFQSDF
1 RAN 1 QE 10 RARDEWRDSF
1 AEP 1 SF 10 ARWWEEAWAW
1 RSK 1 AR 10 DFSRSAWFQR
1 AAZ 1 AQ 10 AAAAAAAAAA
1 RRV 1 SE 10 FRRWARAWER
1 WDJ 1 QF 10 ADSWDFDEED
1 REJ 1 QR 10 FWSFFERFEA
1 QSN 1 WF 10 ADDSFFSQRS
1 SDP 1 WR 10 AAEWDFEDSF
1 FAX 1 AF 10 DWQAFFAWRQ
1 SEI 1 QD 10 QQRFFWASES
1 EQL 1 SD 10 RDQEQEDAAE
0 1 DR 10 FREEREWARD
1 RQK 1 QE 10 ERQREWAQRW
1 ERZ 1 SE 10 ERSSAFSRDW
1 EWZ 1 WF 10 RREWRRRAFA
0 0 9 DEAFDEARS
1 EWG 1 SD 10 DEWRFFRERS
1 QFM 1 QF 10 DFFWQFEQDS
1 QQH 1 QE 10 DEQQSQQQQW
1 FSG 1 SR 10 SFAFSDESRF
1 SQV 1 SR 10 QQDADSQQFF
1 FWV 1 AE 10 WFAWFDDQSR
1 AFK 1 SR 10 SSEREFAEWW
1 WQP 1 AD 10 SRRAAWQAWA
1 DAO 1 QR 10 QDSADSEWWD
1 EDK 1 WD 10 FASQSEFDED
1 ASL 1 QF 10 SAAQDFDQRE
1 RDY 1 AE 10 DSWQDRWWSE
1 WEP 1 SD 10 WEWFAFEAQD
0 0 10 AAAAAAAAAA
1 EFV 1 WE 10 WEFSREWDSD
1 FWO 1 WR 10 ASREFWFAFS
1 AWT 1 SF 10 FWARWWWWWE
1 QAK 1 QD 10 SDQDDDQAQQ
1 AQJ 1 SE 10 AAQWDEAQRQ
1 AEP 1 SF 10 EEAWFQEAQD
1 DQB 1 WD 10 EFRDQAQSRR
1 EEY 1 WR 10 QWEEWDAEDA
1 SWJ 1 WR 10 SDAAREWSAQ
1 QEX 1 SE 10 SFWQEWARSE
1 WWM 1 WE 10 WFDSWWASRA
1 DSN 1 SD 10 WWADSFQEDF
1 RWC 1 AD 10 RADDSDRWAE
1 QQO 1 SD 10 QQSEWQEDQE
1 EQI 1 AD 10 RFEQWFQSDW
"""

a = s.split()

n_testcases = int(a.pop(0))

caseTable = {}

for testCase in range(n_testcases):
    combTable = {}
    opposites = {}
    test = ""
    n_combine = int(a.pop(0))
    for x in range(n_combine):
        c = a.pop(0)
        combTable[(c[0], c[1])] = c[2]
        combTable[(c[1], c[0])] = c[2]
    n_opposites = int(a.pop(0))
    for x in range(n_opposites):
        c = a.pop(0)
        opposites[c[0]] = c[1]
        opposites[c[1]] = c[0]
    a.pop(0)
    test = a.pop(0)
    caseTable[testCase] = combTable, opposites, test
    
for testCase in range(n_testcases):
    combTable, opposites, test = caseTable[testCase]
    queueSoFar = []
    for letter in test:
        if len(queueSoFar) == 0:
            queueSoFar.append(letter)
            continue
        
        if (letter, queueSoFar[-1]) in combTable:
            queueSoFar[-1] = combTable[letter, queueSoFar[-1]]
        else:
            queueSoFar.append(letter)
        if queueSoFar[-1] in opposites:
            if opposites[queueSoFar[-1]] in queueSoFar:
                queueSoFar = []
    print "Case #" + str(testCase+1) + ":", queueSoFar