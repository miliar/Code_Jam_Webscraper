
in_s = """100
0 0 2 EA
1 QRI 0 4 RRQR
1 QFT 1 QF 7 FAQFDFQ
1 EEZ 1 QE 7 QEEEERA
0 1 QW 2 QW
1 AWP 1 SR 10 RAQSQAWSWE
1 ADI 1 AR 10 QWFRQWADWS
1 SST 1 AF 10 FSSEQRDWWW
1 SAH 1 QD 10 QWRQDFEDSA
1 ARP 1 QE 10 ASFRARAAWS
1 QQT 1 WF 10 FDWFFAQQFW
1 FEL 1 QF 10 ADWEAFEFWQ
1 DQV 1 WF 10 QFRQQDWFAW
0 0 10 AAAAAAAAAA
1 EEK 1 WR 10 QAAWFWRWEE
1 RRI 1 AF 10 RSDRRQDFQA
1 AFK 1 WF 10 WSWAFWESES
1 QEN 1 AQ 10 AWAREEQESS
1 EQY 1 AE 10 WSEQEFAQQR
1 SWK 1 SD 10 WSWAFQSAWD
1 WAI 1 AF 10 WQEQWSSWAR
1 WQC 1 WD 10 FSWARWQDED
1 FAM 1 SE 10 WAWAQAWFAF
1 ESP 0 7 DRESSES
1 FWN 1 WE 10 WEQDFQQFWF
1 FFL 1 AD 10 QRSFDAFFQR
1 WDJ 1 WE 10 REQWRWADWD
1 WEM 1 SR 10 SQQSEWEFRA
1 DEY 1 AD 10 EDREWAAWQF
1 SQN 1 WF 10 EWSRQSQDQA
1 AAZ 1 AQ 10 AAAAAAAAAA
1 QSP 1 AF 10 QSFSDFQFWE
1 QRY 1 SE 10 RRESRQERQE
1 WEY 1 AF 10 AWEQEWDSAR
1 WRI 1 WR 10 WRQRWFAQSW
1 SWB 1 QE 10 WSRERRRWFF
1 FQN 1 QF 10 RFQQFRDESE
1 DRJ 1 QD 10 DQFRFEQRDF
1 RSH 1 QD 10 ASREWQRRAD
1 EAO 1 AR 10 SDREAEDWRR
1 SRB 1 AE 10 WDDFSREQDW
1 EDY 1 WF 10 AWQAQQDEEW
1 FDN 1 AF 10 FSREFFDDRD
1 EEY 1 AE 10 SWEEWWWERQ
1 DSP 1 AE 10 QWDDDSSAEE
1 WRO 1 SD 10 QDWRRQEFRF
1 AAJ 1 SE 10 AADFFDRDQA
1 ESB 1 AD 10 DFASRSESRE
1 FRG 1 SE 10 WSRSFRRFAA
1 ADB 1 WR 10 WRDRDAFRFR
1 WDO 1 WD 10 FSAQDQWDEW
1 FRO 1 SF 10 FRQREWEDAQ
1 AQV 1 QE 10 AQFFAWDWFS
1 SWG 1 WR 10 DFQDRSWAFR
1 AQT 1 WR 10 FAWEAESAAQ
1 DSN 1 WF 10 EWSDSWEAER
1 QRK 1 AD 10 RQWWDAWAAS
1 DQO 1 AE 10 SEASRDQAFD
1 ARH 1 WF 10 SSARRSERWF
1 REO 1 SD 10 DQDEREQFQS
0 0 1 F
1 QQI 1 AD 10 QQDSSRAQQR
1 DFG 1 WF 10 DEFDSSQDEQ
1 AEN 1 AR 10 QEAEWAQFFE
1 WWB 1 SD 10 WFWSQDRFWW
1 EQV 1 SF 10 EEQEAAQFEQ
1 REI 1 AE 10 SSWREWEREE
1 REO 1 AR 10 ERQAEWAEFS
1 RDO 1 WD 10 ASWADRAAFR
1 AEB 1 AR 10 AEDDDFWEQF
1 ASG 1 AS 10 AQWERASDFS
0 1 DR 8 REWARDED
0 0 9 DEAFDEARS
1 EWV 1 AR 10 AWFSDWREEW
1 WQL 1 WE 10 AFSAQWRQEA
1 FEU 1 SF 10 FEWWRFEAWW
1 DWI 1 WR 10 FRFWDSEQWE
1 FSU 1 SE 10 REWRAQRFSA
1 ASG 1 AS 10 QQWERASDFS
1 WAP 1 SR 10 AWAWWRQDWQ
1 SFJ 1 WD 10 EFSAERWAFS
1 WQO 1 SD 10 RQEFQWWADW
1 EQG 1 WE 10 WQERDAQQAF
1 WWT 1 AD 10 SDRQASFSWW
1 RWV 1 QR 10 FWQQWWEWRW
1 FWH 1 SF 10 WFAQRDSERW
1 DDK 1 SR 10 QDDWDDWQDA
1 WFC 1 SF 10 EFWAEFDAEQ
1 FQO 1 AR 10 SQSAFQDFDE
1 EWY 1 SE 10 AADEWQDWER
1 QSL 1 SE 10 SQDADWEADR
1 QET 1 QE 10 DESQEQWASE
0 1 DR 10 FREEREWARD
1 SAU 1 WE 10 DSSDDRQRSA
1 DQZ 1 AR 10 AFDQDSQWEE
1 AQV 1 QD 10 SEEFWSAQWA
1 QFB 1 WF 10 DAEFQQEFWQ
1 QWM 1 WD 10 AQRQWQAQWF
1 SEV 1 AD 10 SSEQFASRQR
1 QRX 1 SF 10 FSDWRRARQQ"""

in_s = in_s.split('\n')
in_s = in_s[1:]

cases = []
for raw_case in in_s:
	raw_case = raw_case.split(' ')
	
	if raw_case[0] == '0':
		combiners = []
		raw_case = raw_case[1:]
	else:
		combiners = [raw_case[1][x:x+3] for x in xrange(0, len(raw_case[1]), 3)]
		raw_case = raw_case[2:]
	
	if raw_case[0] == '0':
		opposers = []
		raw_case = raw_case[1:]
	else:
		opposers = [raw_case[1][x:x+2] for x in xrange(0, len(raw_case[1]), 2)]
		raw_case = raw_case[2:]
	
	elements = raw_case[1]
	
	cases.append((elements, combiners, opposers))

case_num = 1
for elements, combiners, opposers in cases:
	q = []
	for element in elements:
		q.append(element)
		
		for combiner in combiners:
			try:
				if set([q[-1], q[-2]]) == set(combiner[:2]):
					q = q[:-2]
					q.append(combiner[2])
			except IndexError: pass
		
		for opposer in opposers:
			if opposer[0] in q and opposer[1] in q:
				q = []
	print 'Case #' + str(case_num) + ": " + str(q).replace('\'', '')
	case_num += 1