from re import *
from sys import stderr
def readint():
	return int(raw_input())
def readfloat():
	return float(raw_input())
def readarray(N, foo=raw_input):
	return [foo() for i in xrange(N)]
def readlinearray(foo=int):
	return map(foo, raw_input().split())

def NOD(a, b):
	while b:
		a,b = b, a%b
	return a

def gen_primes(max):
	primes = [1]*(max+1)
	for i in range(2, max+1):
		if primes[i]:
			for j in range(i+i, max+1, i):
				primes[j] = 0
	primes[0] = 0
	return [x for x in range(max+1) if primes[x]]

def is_prime(N):
	i = 3
	if not(N % 2):
		return 0
	while i*i < N:
		if not(N % i):
			return 0
		i += 3
	return 1

mod = 100003

#def factor1(N):
	#return not(N) and 1 or reduce(lambda x,y: x*y, range(1,N+1))
#factors = map(factor1, range(600))
#def factor(N):
	#return factors[N]
#def C1(n,k):
	#if (k < 0) or (n < 0) or (n < k):
		#return 0
	#print n, k
	#return (factor(n)/factor(k)/factor(n-k)) % mod
#C_matr = [[int(C1(n,k)) for k in range(0, 502)] for n in range(0, 502)]
#def C(n,k):
	#if (k < 0) or (n < 0) or (n < k):
		#return 0
	#return C_matr[n][k]

#pures = [[]]*600
#for i in range(600):
	##pures[i] = {}
	##for j in range(0, i+1):
		##pures[i][j] = 0
	#pures[i] = [0]*600
	#pures[i][1] = 1

#for i in range(3, 505):
	#print i
	#for j in range(2, i):
		#for k in range(max(0, 2*j-i), j+1):
			#pures[i][j] += (pures[j][k] * C(i-j-1, j-k-1)) % mod
		##pures[i] += pures[j] * 2**(i-j-1)
##print pures[10][:15]
#print map(lambda x: sum(x) % mod, pures)
#exit()
#it is too slow in python
pures = [1, 1, 1, 2, 3, 5, 8, 14, 24, 43, 77, 140, 256, 472, 874, 1628, 3045, 5719, 10780, 20388, 38674, 73562, 40265, 68060, 13335, 84884, 92821, 43462, 23352, 56615, 99399, 90460, 79723, 47661, 82387, 36134, 90530, 80512, 94771, 91488, 39258, 4085, 71786L, 18438L, 3291L, 15552L, 40863L, 43908L, 61443L, 3476L, 2231L, 83916L, 6077L, 5121L, 75068L, 93061L, 28529L, 11102L, 33328L, 13544L, 38719L, 22147L, 75250L, 98299L, 51867L, 3042L, 15509L, 71001L, 79202L, 88117L, 22007L, 22204L, 84791L, 73527L, 84770L, 65094L, 31968L, 83587L, 70608L, 8624L, 98205L, 83597L, 35973L, 18760L, 65333L, 5949L, 55507L, 40716L, 42177L, 2742L, 62601L, 35263L, 78222L, 90159L, 56453L, 65697L, 50769L, 43477L, 5217L, 3192L, 1212L, 25179L, 10218L, 53524L, 91003L, 65840L, 8152L, 19392L, 65263L, 44884L, 58688L, 42411L, 93826L, 98441L, 18467L, 13228L, 49097L, 41783L, 9822L, 82582L, 52937L, 9354L, 14433L, 25012L, 37033L, 40789L, 88200L, 75857L, 63727L, 56690L, 72249L, 54827L, 36637L, 38971L, 33285L, 71308L, 79155L, 2751L, 10076L, 12360L, 35295L, 81449L, 43252L, 34122L, 43129L, 77005L, 21515L, 22983L, 6560L, 58304L, 24016L, 91283L, 49190L, 83611L, 14319L, 94648L, 16498L, 2180L, 70071L, 95357L, 43812L, 77823L, 38280L, 35916L, 9317L, 7835L, 64256L, 47873L, 21824L, 89971L, 72162L, 77846L, 7791L, 12226L, 10232L, 18496L, 55209L, 37625L, 41846L, 29198L, 37972L, 77869L, 12177L, 31572L, 8816L, 87272L, 17792L, 45272L, 40748L, 80949L, 78910L, 60774L, 65164L, 26965L, 28246L, 41272L, 53943L, 4867L, 68457L, 63131L, 3723L, 13839L, 60779L, 36111L, 68702L, 124L, 69706L, 9444L, 25974L, 86672L, 72357L, 41370L, 58811L, 99144L, 46459L, 5718L, 68682L, 23044L, 73145L, 21255L, 54899L, 41220L, 40095L, 91180L, 92777L, 17548L, 88012L, 21893L, 36234L, 53519L, 4274L, 18725L, 6869L, 840L, 81128L, 1981L, 88472L, 39458L, 62237L, 19249L, 806L, 37985L, 72000L, 55366L, 21988L, 94531L, 32573L, 61239L, 67783L, 80535L, 31871L, 26522L, 83030L, 80188L, 79131L, 5509L, 90630L, 13491L, 96208L, 55896L, 25083L, 99599L, 71210L, 65313L, 75709L, 97529L, 19924L, 57673L, 83041L, 8337L, 34572L, 27043L, 97908L, 43165L, 68002L, 33831L, 58120L, 13758L, 59482L, 4816L, 68702L, 79542L, 98771L, 97255L, 97938L, 97114L, 40396L, 53912L, 58764L, 68960L, 77445L, 68418L, 98046L, 74058L, 12905L, 21192L, 18161L, 33462L, 89488L, 4754L, 39939L, 49052L, 20029L, 16446L, 9663L, 19349L, 40696L, 89175L, 51140L, 13323L, 83221L, 75047L, 74009L, 578L, 90080L, 46173L, 22200L, 1723L, 70975L, 99520L, 4220L, 52446L, 83209L, 98324L, 53767L, 63102L, 73398L, 93763L, 26592L, 99519L, 93324L, 40204L, 42178L, 68290L, 76936L, 31191L, 88343L, 60982L, 35492L, 32382L, 54214L, 19216L, 97597L, 47850L, 66165L, 27343L, 63468L, 57248L, 38748L, 91229L, 81156L, 67957L, 35464L, 53775L, 58054L, 32982L, 69077L, 39439L, 10497L, 91603L, 57245L, 94413L, 24106L, 1669L, 31403L, 78331L, 54279L, 12513L, 61076L, 5389L, 10940L, 76721L, 6954L, 98098L, 45346L, 28935L, 80366L, 10589L, 52437L, 78333L, 830L, 66731L, 85469L, 39774L, 57092L, 63979L, 72219L, 53310L, 56492L, 36546L, 44445L, 74101L, 36708L, 73836L, 76941L, 23472L, 28249L, 67376L, 8401L, 20725L, 42723L, 30427L, 22697L, 10893L, 9940L, 43700L, 68826L, 66709L, 19072L, 66413L, 46069L, 6230L, 86825L, 82782L, 39656L, 3687L, 38100L, 30340L, 90493L, 24664L, 99783L, 30817L, 65884L, 18596L, 45034L, 85052L, 67592L, 38631L, 99372L, 56094L, 92239L, 92072L, 90498L, 48661L, 16954L, 42881L, 43084L, 32889L, 79849L, 68132L, 50413L, 38840L, 12516L, 46672L, 77923L, 49986L, 29109L, 80547L, 37874L, 5824L, 82167L, 68378L, 8663L, 23341L, 68093L, 47797L, 66735L, 60872L, 27860L, 86647L, 37201L, 88666L, 56307L, 32826L, 70612L, 17436L, 68239L, 83617L, 11032L, 87551L, 37713L, 63974L, 6841L, 26490L, 44536L, 35969L, 30334L, 30992L, 31878L, 74565L, 71462L, 23245L, 5331L, 16611L, 2569L, 9734L, 699L, 6257L, 70440L, 24677L, 88156L, 11770L, 41949L, 65977L, 61022L, 96680L, 81014L, 93845L, 9237L, 48697L, 40434L, 78731L, 75480L, 14021L, 90391L, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
#for i in range(2, 25):
	#print i, sum(pures[i])
#exit()
case_number = readint()
for case in xrange(case_number):
	n = readint()
	print "Case #%s: %s" % (case + 1, pures[n] % 100003)
