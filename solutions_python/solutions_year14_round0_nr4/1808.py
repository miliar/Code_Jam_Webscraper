def input_parse(s):
    
    a = s.split('\n')
    num_cases = a[0]
    return num_cases, a[1:]


def deceitful_war(case):
    score = 0
    n_blks = case[1].split()
    k_blks = case[2].split()

    while len(n_blks)>0:
        n_told = 0
        n_min = float(min(n_blks))
        n_max = float(max(n_blks))
        n = min(n_blks)
        k_max = float(max(k_blks))
        k_min = float(min(k_blks))
        k_choices = []

        if n_min > k_min:
            n_told = str(k_max + .0000001)

        elif n_max > k_min:
            n_told = str(k_max - .0000001)
            
        else:
            n_told = str(n_min)

        
        
        for x in k_blks:
            if x > n_told:
                k_choices.append(x)

        if len(k_choices) > 0:
            k = min(k_choices)

        else:
            k = min(k_blks)
            score +=1

        k_blks.remove(k)
        n_blks.remove(n)
    
    return score

def optimal_war(case):
    score=0
    n_blks = case[1].split()
    k_blks = case[2].split()
    
    
    while len(n_blks)>0:
        n = max(n_blks)
        k_choices = []
        
        for x in k_blks:
            if x > n:
                k_choices.append(x)
                
        if len(k_choices) > 0:
            k = min(k_choices)
            
        else:
            k = min(k_blks)
            score+=1
        
        k_blks.remove(k)
        n_blks.remove(n)
        
        
        
        
    return score


a = '''50
10
0.464 0.545 0.009 0.991 0.054 0.652 0.679 0.420 0.223 0.402
0.205 0.393 0.500 0.884 0.875 0.848 0.170 0.196 0.134 0.795
1
0.4
0.8
10
0.704 0.096 0.530 0.496 0.861 0.130 0.765 0.626 0.487 0.226
0.426 0.904 0.948 0.374 0.383 0.061 0.035 0.209 0.574 0.722
6
0.43 0.31 0.21 0.98 0.05 0.74
0.87 0.13 0.46 0.64 0.28 0.75
10
0.12 0.69 0.31 0.22 0.91 0.16 0.88 0.78 0.84 0.81
0.56 0.62 0.66 0.41 0.44 0.38 0.09 0.72 0.34 0.28
4
0.68 0.60 0.88 0.52
0.40 0.12 0.04 0.16
4
0.38 0.97 0.15 0.51
0.08 0.79 0.54 0.23
10
0.74 0.08 0.34 0.94 0.28 0.64 0.02 0.06 0.84 0.54
0.90 0.88 0.76 0.36 0.46 0.98 0.20 0.44 0.24 0.92
10
0.07 0.90 0.23 0.43 0.63 0.27 0.40 0.03 0.30 0.20
0.57 0.33 0.13 0.80 0.10 0.70 0.73 0.17 0.53 0.77
9
0.29 0.90 0.47 0.69 0.83 0.24 0.57 0.91 0.81
0.98 0.72 0.88 0.33 0.09 0.71 0.60 0.40 0.03
8
0.42 0.91 0.31 0.06 0.29 0.71 0.36 0.34
0.47 0.52 0.41 0.38 0.65 0.05 0.64 0.43
1
0.7
0.9
8
0.77 0.90 0.51 0.92 0.82 0.74 0.67 0.79
0.46 0.28 0.41 0.21 0.18 0.49 0.36 0.33
10
0.44 0.67 0.42 0.78 0.48 0.70 0.56 0.19 0.97 0.89
0.95 0.33 0.11 0.06 0.55 0.50 0.31 0.53 0.41 0.58
10
0.03 0.54 0.22 0.38 0.48 0.16 0.11 0.40 0.52 0.17
0.60 0.95 0.79 0.62 0.92 0.70 0.94 0.86 0.57 0.78
10
0.41 0.91 0.32 0.85 0.46 0.29 0.49 0.72 0.59 0.07
0.38 0.93 0.37 0.26 0.63 0.62 0.88 0.90 0.56 0.66
10
0.73 0.47 0.70 0.06 0.42 0.82 0.18 0.78 0.66 0.14
0.35 0.22 0.10 0.55 0.34 0.28 0.16 0.33 0.37 0.71
10
0.28 0.04 0.16 0.84 0.68 0.24 0.20 0.52 0.88 0.44
0.72 0.80 0.96 0.08 0.32 0.60 0.40 0.92 0.76 0.12
4
0.03 0.17 0.80 0.43
0.57 0.51 0.94 0.09
8
0.39 0.61 0.59 0.62 0.28 0.64 0.89 0.41
0.84 0.56 0.11 0.25 0.38 0.21 0.36 0.34
10
0.771 0.092 0.028 0.936 0.321 0.807 0.615 0.128 0.083 0.165
0.899 0.541 0.991 0.459 0.284 0.578 0.624 0.927 0.569 0.706
10
0.55 0.48 0.66 0.96 0.87 0.71 0.73 0.74 0.50 0.72
0.32 0.30 0.39 0.28 0.20 0.12 0.29 0.37 0.22 0.34
2
0.9 0.3
0.4 0.8
8
0.76 0.37 0.13 0.83 0.26 0.72 0.96 0.70
0.24 0.48 0.93 0.74 0.91 0.80 0.44 0.61
10
0.871 0.198 0.653 0.574 0.485 0.990 0.020 0.554 0.337 0.931
0.693 0.277 0.356 0.139 0.218 0.752 0.762 0.525 0.950 0.624
9
0.10 0.15 0.07 0.37 0.44 0.26 0.25 0.01 0.19
0.93 0.94 0.46 0.50 0.75 0.85 0.78 0.69 0.82
7
0.11 0.72 0.33 0.52 0.59 0.67 0.50
0.13 0.20 0.89 0.46 0.02 0.24 0.76
10
0.70 0.11 0.85 0.63 0.59 0.07 0.89 0.30 0.19 0.56
0.41 0.96 0.74 0.26 0.93 0.15 0.33 0.67 0.52 0.04
9
0.104 0.651 0.679 0.453 0.830 0.642 0.858 0.415 0.708
0.330 0.887 0.340 0.698 0.132 0.972 0.123 0.406 0.736
10
0.05 0.71 0.95 0.07 0.49 0.08 0.04 0.89 0.91 0.53
0.03 0.54 0.83 0.63 0.50 0.47 0.14 0.20 0.79 0.61
10
0.77 0.18 0.68 0.64 0.09 0.27 0.95 0.82 0.41 0.55
0.50 0.91 0.23 0.73 0.05 0.14 0.86 0.32 0.45 0.59
10
0.67 0.71 0.43 0.81 0.14 0.48 0.57 0.62 0.19 0.33
0.52 0.24 0.38 0.76 0.95 0.29 0.10 0.90 0.05 0.86
6
0.75 0.60 0.40 0.68 0.43 0.12
0.38 0.20 0.15 0.03 0.27 0.17
10
0.08 0.02 0.92 0.88 0.55 0.59 0.47 0.90 0.06 0.18
0.51 0.20 0.69 0.29 0.98 0.63 0.96 0.71 0.12 0.82
10
0.19 0.31 0.93 0.66 0.03 0.79 0.87 0.57 0.48 0.96
0.25 0.39 0.01 0.04 0.30 0.07 0.70 0.76 0.78 0.33
10
0.79 0.92 0.59 0.80 0.70 0.84 0.95 0.51 0.43 0.31
0.82 0.25 0.74 0.62 0.61 0.21 0.72 0.85 0.77 0.36
10
0.77 0.13 0.50 0.60 0.23 0.70 0.33 0.80 0.73 0.63
0.93 0.43 0.67 0.37 0.40 0.03 0.10 0.17 0.53 0.30
10
0.85 0.30 0.58 0.90 0.22 0.43 0.95 0.63 0.10 0.80
0.50 0.27 0.70 0.15 0.45 0.25 0.68 0.93 0.78 0.08
10
0.86 0.45 0.91 0.64 0.02 0.84 0.95 0.30 0.34 0.93
0.25 0.73 0.14 0.57 0.07 0.27 0.36 0.48 0.77 0.80
10
0.52 0.85 0.22 0.81 0.15 0.78 0.26 0.93 0.67 0.37
0.63 0.30 0.19 0.74 0.89 0.59 0.70 0.11 0.48 0.33
8
0.28 0.84 0.96 0.76 0.20 0.48 0.52 0.72
0.64 0.16 0.08 0.56 0.32 0.04 0.60 0.80
10
0.69 0.55 0.47 0.40 0.91 0.27 0.85 0.58 0.15 0.49
0.25 0.45 0.64 0.98 0.38 0.76 0.29 0.24 0.96 0.93
1
0.9
0.1
4
0.86 0.70 0.43 0.07
0.59 0.95 0.64 0.02
7
0.71 0.96 0.79 0.21 0.04 0.92 0.12
0.33 0.25 0.83 0.87 0.58 0.08 0.29
10
0.10 0.71 0.65 0.81 0.58 0.21 0.52 0.27 0.40 0.38
0.79 0.23 0.35 0.13 0.02 0.17 0.08 0.96 0.94 0.25
2
0.06 0.44
0.88 0.62
10
0.40 0.16 0.46 0.62 0.21 0.34 0.97 0.69 0.26 0.88
0.99 0.56 0.01 0.28 0.79 0.38 0.37 0.13 0.47 0.85
10
0.186 0.424 0.500 0.924 0.678 0.203 0.042 0.881 0.398 0.373
0.136 0.958 0.076 0.983 0.271 0.025 0.619 0.788 0.847 0.059
8
0.78 0.47 0.70 0.35 0.98 0.14 0.11 0.10
0.24 0.18 0.22 0.49 0.09 0.38 0.68 0.86'''

num_cases, cases = input_parse(a)
test_case = 1
while len(cases) >1:
    case = cases[0:3]
    print("Case #" + str(test_case) + ": "
          + str(deceitful_war(case)) + ' ' + str(optimal_war(case)))
          
    cases = cases[3:]
    test_case+=1
