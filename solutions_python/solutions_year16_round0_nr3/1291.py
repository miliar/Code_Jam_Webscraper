{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import sys\n",
    "\n",
    "def ReadInts(fname):\n",
    "    with open(fname, 'r') as f:\n",
    "        read_data = f.read()\n",
    "    return list(map(str, read_data.strip().split()))\n",
    "\n",
    "fname = 'B-large.in'\n",
    "#data = ReadInts(fname)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "------------------------Question 3------------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import random\n",
    "from random import choice\n",
    "\n",
    "_mrpt_num_trials = 5 # number of bases to test\n",
    "\n",
    "N = 32\n",
    "J = 500"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Case #1:\n",
      "11001011110011110110011001101101 3 2 5 2 5 2 3 2 11\n",
      "11110001000111011111010111001011 61 2 11 2 5 2 101 2 7\n",
      "10111111000100010101011000010101 3 2 11 2 23 2 3 2 17\n",
      "10111100001100101111101101100001 131 2 3 2 197 2 11 2 3\n",
      "10010011000111010111100110011011 61 2 3 2 31 2 5 2 3\n",
      "10100010101110010010011110011111 5 2 3 2 17 2 11 2 3\n",
      "10001111111110100001110111000001 3 2 3 2 7 2 3 2 3\n",
      "11110101010001101100101011100101 113 2 3 2 643 2 43 2 3\n",
      "10100000011000001011010010101101 3 7 13 3 13 43 3 47 7\n",
      "10010000101111110001111110001101 3 2 3 2 7 2 3 2 3\n",
      "10001101001111111101011111101011 3 2 5 2 7 2 3 2 11\n",
      "10010110010110000001000111100111 3 11 3 3 5 3 3 281 3\n",
      "10100000111001011111100111110001 3 2 3 2 7 2 3 2 3\n",
      "10000110111000111110111100001101 11 2 3 2 41 2 89 2 3\n",
      "10100011110010001110011001001011 53 2 37 2 101 2 313 2 7\n",
      "10011010010111111011011010001101 43 5 7 109 13 71 5 83 19\n",
      "11110111100100010010101100011011 3 2 3 2 7 2 3 2 3\n",
      "10000111010000101101100101111001 67 2 83 2 47 2 17 2 23\n",
      "11010100100000011001101010101001 337 2 19 2 53 2 5 2 17\n",
      "11111001011110110000010110101111 3 2 5 2 5 2 3 2 7\n",
      "10001111110001111110011001011011 3 2 5 2 5 2 3 2 7\n",
      "11010111010010100101011110000011 3 13 11 3 109 29 3 127 17\n",
      "11001001000001000010111110000111 3 2 5 2 7 2 3 2 11\n",
      "11010101100101101011110101100111 5 2 17 2 5 2 5 2 101\n",
      "10011000010100101011000101010001 3 7 13 3 31 43 3 23 7\n",
      "10100001000011010000001010000101 3 2 5 2 5 2 3 2 11\n",
      "10111100100101111011100001110001 3 2 3 2 7 2 3 2 3\n",
      "10101010111111001010100011100011 13 2 3 2 503 2 19 2 3\n",
      "10100111000000100101110000011101 5 2 17 2 29 2 5 2 101\n",
      "10110001100000101010111101010101 3 2 5 2 7 2 3 2 11\n",
      "10100100011110110111011110011011 3 2 5 2 5 2 3 2 11\n",
      "11100011110000110100010111100101 3 173 7 3 19 5 3 367 19\n",
      "11010111001001010100111000011011 3 7 13 3 31 43 3 29 7\n",
      "10001011001011011010111111011011 7 2 7 2 5 2 53 2 131\n",
      "11011011000011111011010000101101 3 2 3 2 7 2 3 2 3\n",
      "11011011100100010110011101110001 5 2 3 2 11 2 67 2 3\n",
      "11000110111011101000110101010101 7 2 3 2 43 2 5 2 3\n",
      "10101111011100000010100000000111 109 2 71 2 53 2 7 2 13\n",
      "10000110010100101100011000001111 3 2 5 2 7 2 3 2 7\n",
      "10101011011010111000010111011011 3 7 7 3 11 5 3 23 7\n",
      "10100011100101011010011001110111 3 2 3 2 7 2 3 2 3\n",
      "10000001001111100110110101100011 3 2 5 2 7 2 3 2 11\n",
      "11010111101000001000011111010111 5 2 3 2 37 2 5 2 3\n",
      "10110111110001000000110010101111 7 5 11 193 421 17 5 7 157\n",
      "11101111110011010010111010011001 53 2 229 2 5 2 5 2 7\n",
      "10011111010000101101000001101011 3 2 5 2 7 2 3 2 11\n",
      "11111100000001001011011111101001 3 2 3 2 7 2 3 2 3\n",
      "10011111010011110001001011110001 7 2 3 2 67 2 31 2 3\n",
      "10111110110011011110101010100101 7 2 11 2 5 2 31 2 41\n",
      "11010100000101010011101011110011 3 5 7 3 61 11 3 17 7\n",
      "11100100100011111010100001010111 409 5 863 37 19 11 5 59 311\n",
      "10111001111110101000110000001111 5 2 3 2 43 2 73 2 3\n",
      "11010001110010101010001011001001 3 17 3 3 5 3 3 421 3\n",
      "10101111101111101001100000010011 13 2 3 2 89 2 5 2 3\n",
      "11101100000011101100001111010111 3 2 3 2 7 2 3 2 3\n",
      "11011001011011100000110111101111 3 2 5 2 5 2 3 2 11\n",
      "11000000010011010001010001111101 3 2 11 2 41 2 3 2 19\n",
      "10101001010001110110011010000111 3 2 5 2 7 2 3 2 11\n",
      "11011000110001010000101000110101 17 2 19 2 17 2 7 2 17\n",
      "10001110010110111110110111101011 3 103 3 3 89 3 3 491 3\n",
      "10100111001100001111110001000011 3 2 5 2 7 2 3 2 11\n",
      "10001001111101101111011000110111 3 2 5 2 5 2 3 2 7\n",
      "10111001011100001010010111011011 3 2 3 2 7 2 3 2 3\n",
      "11100111100100111110010001111101 17 2 31 2 5 2 11 2 59\n",
      "10110010100101111111100100000111 3 2 3 2 7 2 3 2 3\n",
      "11111100001110101100001100010001 3 2 5 2 7 2 3 2 11\n",
      "10000111100000010010110110100101 3 2 5 2 7 2 3 2 11\n",
      "11110101000000010100010100001011 11 107 5 23 307 379 757 5 79\n",
      "10100010111100100101110111100101 3 2 3 2 7 2 3 2 3\n",
      "10110101001000010001111100000111 3 7 3 3 5 3 3 7 3\n",
      "10010011010111011100000001010101 11 5 3 79 5 3 5 137 3\n",
      "11100001100000110001111000011111 3 2 5 2 7 2 3 2 7\n",
      "11011010110000101110101001110101 7 2 3 2 43 2 17 2 3\n",
      "11111001111100100001000011001001 3 2 5 2 7 2 3 2 11\n",
      "10110011110011000101000110001101 5 2 107 2 127 2 23 2 23\n",
      "10001110010100100001111000001111 7 13 3 31 5 3 73 7 3\n",
      "10101100111101001100110000110111 3 2 3 2 7 2 3 2 3\n",
      "10110110010011011111001101111111 7 2 11 2 197 2 17 2 73\n",
      "11010110011110010111101010101101 3 2 5 2 5 2 3 2 11\n",
      "10100101001000001000111001010111 3 2 5 2 7 2 3 2 7\n",
      "11111000111010000111000100010011 3 2 5 2 7 2 3 2 11\n",
      "11100110010001110001001010111001 3 2 5 2 7 2 3 2 11\n",
      "11101011001101001001101111101011 11 2 11 2 5 2 37 2 251\n",
      "11100100010101001000010101010111 7 13 3 19 5 3 73 7 3\n",
      "11110010110110101010010101110001 3 2 3 2 7 2 3 2 3\n",
      "11000111111011111010111110111011 5 2 3 2 13 2 5 2 3\n",
      "10101001001001101001010110110101 3 2 5 2 7 2 3 2 11\n",
      "11001000010111101010000011000111 31 59 3 13 5 3 617 239 3\n",
      "10101101000111011010011111100001 3 2 3 2 7 2 3 2 3\n",
      "10010111001101101000001001101101 3 2 5 2 7 2 3 2 11\n",
      "11011111111000000111010000111001 5 2 3 2 37 2 5 2 3\n",
      "11100011111110100000100010010111 3 7 41 3 11 31 3 7 7\n",
      "10011111011001000111000011111001 5 2 3 2 29 2 5 2 3\n",
      "10111001000101001011010100110001 3 5 3 3 5 3 3 17 3\n",
      "11100011000101010011001000010011 79 2 23 2 11 2 7 2 419\n",
      "11010011001011110110111000100101 3 2 3 2 7 2 3 2 3\n",
      "10111001111010001101101000000001 3 19 3 3 5 3 3 29 3\n",
      "11110111101011111001101001101001 3 11 3 3 167 3 3 11 3\n",
      "10100001100110100101000110111011 7 2 167 2 107 2 19 2 313\n",
      "10011001010110111000101100100001 7 13 3 31 5 3 29 7 3\n",
      "11000010111000000110110000010001 3 2 3 2 7 2 3 2 3\n",
      "11110010011001010010001010010111 3 2 5 2 7 2 3 2 11\n",
      "10001000110011111000111000100011 5 719 3 41 5 3 179 5 3\n",
      "11110011010101110110101010010111 101 2 199 2 5 2 5 2 13\n",
      "11101111000010001101101111001001 23 2 3 2 41 2 37 2 3\n",
      "11001110101010001000010000000111 3 11 73 3 11 127 3 373 67\n",
      "10101011001111100101001000001111 3 7 43 3 19 5 3 11 7\n",
      "11110101011110110000011111010111 5 11 3 11 137 3 7 5 3\n",
      "10111111001101100001001001011011 3 2 3 2 7 2 3 2 3\n",
      "10011110011010011000011000010001 3 2 5 2 7 2 3 2 7\n",
      "10100001110010001110100100001011 5 2 137 2 19 2 7 2 7\n",
      "11111100001001000100001110111001 3 2 5 2 7 2 3 2 11\n",
      "11010000100100010101011100001111 5 13 3 31 5 3 73 5 3\n",
      "11110010000000001000101110011001 3 7 13 3 31 43 3 73 7\n",
      "11010011101011010111100011010101 3 5 13 3 317 13 3 13 23\n",
      "10011110001110011001011001000011 3 2 5 2 7 2 3 2 11\n",
      "10110000011000000000010000001101 17 7 3 139 11 3 449 31 3\n",
      "11101110011110010010100111101011 5 2 17 2 5 2 5 2 29\n",
      "11010110101000011001010100010011 3 7 3 3 5 3 3 47 3\n",
      "10111101111111111110110101011001 5 2 3 2 43 2 73 2 3\n",
      "10011101110011011000101011111011 59 2 61 2 5 2 13 2 19\n",
      "11101000100110111100000011100101 23 2 7 2 167 2 5 2 97\n",
      "11101110001000011111000101111111 3 2 5 2 5 2 3 2 11\n",
      "11100011011000001101001100100111 3 2 5 2 7 2 3 2 11\n",
      "10100110111110000010011010010111 3 5 7 3 19 17 3 197 23\n",
      "11110110110000000011100001011011 3 2 5 2 7 2 3 2 11\n",
      "11110011110111010010101111011011 3 2 5 2 7 2 3 2 7\n",
      "10111111001111100111000110100101 3 2 5 2 5 2 3 2 11\n",
      "10100000001111000110101101110101 3 2 5 2 7 2 3 2 11\n",
      "10011010111110000101011000001011 163 2 19 2 151 2 251 2 131\n",
      "11010111001011010101001111000011 163 2 3 2 71 2 107 2 3\n",
      "10000100100100101100001000000101 3 2 5 2 5 2 3 2 11\n",
      "10000010000101101010101100011111 3 5 3 3 5 3 3 7 3\n",
      "10111101100010100001111110101001 17 2 3 2 79 2 337 2 3\n",
      "10100011111010010001110000010101 5 19 3 29 5 3 173 107 3\n",
      "10011000100111001010000010111101 3 23 3 3 5 3 3 739 3\n",
      "10001010001101000011111111001111 5 2 3 2 11 2 5 2 3\n",
      "11011000010011010101100000110101 11 41 3 7 5 3 59 5 3\n",
      "10001101101100011100000100101111 3 2 5 2 7 2 3 2 7\n",
      "10001001000010111111011111000001 3 2 5 2 7 2 3 2 11\n",
      "11001101001001001001000110001011 3 2 5 2 7 2 3 2 7\n",
      "11000000110010101101011011011111 3 2 3 2 7 2 3 2 3\n",
      "10101000010010111010000101010101 3 2 5 2 7 2 3 2 7\n",
      "10100001111100101101011111000101 5 2 3 2 11 2 5 2 3\n",
      "11011100100100000001000100010011 5 2 3 2 11 2 73 2 3\n",
      "11101001111001010110000110100001 3 2 5 2 7 2 3 2 11\n",
      "11101110110110011111010010011111 3 2 5 2 7 2 3 2 11\n",
      "10000011101011001011011000110011 29 2 43 2 13 2 83 2 13\n",
      "11111111001110100001001101110011 3 2 5 2 5 2 3 2 11\n",
      "11101001010111011101101111110011 61 2 7 2 523 2 37 2 13\n",
      "11001010101011011110011010111111 7 5 3 17 59 3 5 5 3\n",
      "11001011001011100000010111010011 3 2 5 2 7 2 3 2 11\n",
      "11010010111111000010000011111011 5 2 3 2 37 2 5 2 3\n",
      "11110110011111111101010111111001 5 2 3 2 37 2 5 2 3\n",
      "10011101101101011100001101110101 5 7 5 131 67 5 79 5 7\n",
      "11100000000010101101010101101111 3 2 5 2 7 2 3 2 11\n",
      "11101010001101011001100001001101 3 2 5 2 7 2 3 2 11\n",
      "11101111010111010000011010111011 3 2 5 2 5 2 3 2 11\n",
      "10010100010000110101100111100011 3 41 3 3 5 3 3 43 3\n",
      "11110011001010000111100100111101 3 2 3 2 7 2 3 2 3\n",
      "10101100100111001010110111101001 31 2 3 2 103 2 83 2 3\n",
      "10001011010100000110001011110111 3 2 5 2 7 2 3 2 7\n",
      "10010110111111111111010011101001 3 2 5 2 7 2 3 2 11\n",
      "11000110100010001011010111000011 5 53 3 47 5 3 31 233 3\n",
      "10010001101011100101111001101001 67 13 11 241 29 17 19 23 19\n",
      "11100001100100011000001111111001 3 2 5 2 7 2 3 2 11\n",
      "10010111000111101101101110111011 7 13 3 31 43 3 7 7 3\n",
      "10111111111011000101011011001111 3 2 5 2 7 2 3 2 11\n",
      "10110000011111011001101001000011 3 2 5 2 7 2 3 2 11\n",
      "10110010110011100001110110110011 389 2 3 2 13 2 251 2 3\n",
      "11000100100001010100011010111011 11 5 3 11 5 3 5 53 3\n",
      "11000010011001111010101001101101 3 11 47 3 167 13 3 13 167\n",
      "11110110101001001100011011110001 3 2 3 2 7 2 3 2 3\n",
      "11101000101010110101111101000011 5 2 3 2 29 2 5 2 3\n",
      "11000111001110100100010010010001 5 2 17 2 37 2 5 2 101\n",
      "10110101111111100101001100100111 13 2 653 2 5 2 5 2 7\n",
      "10011110111111011001110011000011 3 2 5 2 5 2 3 2 11\n",
      "10100100100110000011001010001001 7 2 3 2 17 2 73 2 3\n",
      "10100110001100110110001110010101 3 2 5 2 7 2 3 2 11\n",
      "11110101111000001000001000100101 3 2 5 2 7 2 3 2 11\n",
      "11110001110101000100111100010111 3 2 3 2 37 2 3 2 3\n",
      "11010101010000101100110101010101 281 2 29 2 19 2 11 2 19\n",
      "11011100011001010110111001000101 5 5 5 479 127 5 5 5 631\n",
      "11110010100110011111011111111001 3 2 5 2 7 2 3 2 11\n",
      "10110001000010010100011101111111 3 5 13 3 31 43 3 17 7\n",
      "11011011101101111100001111001111 3 2 5 2 7 2 3 2 11\n",
      "10010110101000000100100110010111 3 2 5 2 7 2 3 2 11\n",
      "11001001100101111000011101100111 5 2 3 2 37 2 5 2 3\n",
      "11111101110110010011101100101001 3 2 5 2 5 2 3 2 11\n",
      "10011100110111010000111110100011 3 2 3 2 7 2 3 2 3\n",
      "10000001100000100101111100001001 3 2 3 2 7 2 3 2 3\n",
      "10011001101111111010010001111101 3 2 5 2 5 2 3 2 11\n",
      "10001110111100000101011110101101 3 2 3 2 7 2 3 2 3\n",
      "10110010000110100110111000001101 3 977 3 3 5 3 3 17 3\n",
      "10000101110000111100001010110001 3 2 5 2 7 2 3 2 11\n",
      "10001100111000010101011100100001 5 2 17 2 37 2 5 2 101\n",
      "11111010111100010110000111100001 3 2 3 2 7 2 3 2 3\n",
      "10110011000101111100010000010001 5 2 29 2 127 2 7 2 19\n",
      "11111100001111110000110101110101 5 2 17 2 5 2 5 2 101\n",
      "11000010001101101011101111010011 17 2 3 2 211 2 229 2 3\n",
      "11111011011001110011110110001111 3 2 5 2 7 2 3 2 11\n",
      "10100110100111100011101101011001 239 2 3 2 71 2 19 2 3\n",
      "11011001001100010011101110110101 41 2 3 2 89 2 857 2 3\n",
      "10100011100011111000101111000111 7 2 3 2 43 2 73 2 3\n",
      "11101000010111111110101100111101 19 23 3 29 587 3 7 19 3\n",
      "11111001011000101000110000010001 3 2 5 2 7 2 3 2 11\n",
      "11001101011001001111001110010011 5 2 3 2 37 2 5 2 3\n",
      "11001111110111011000101000011001 3 2 3 2 7 2 3 2 3\n",
      "11111001101101011100100111101001 3 2 5 2 5 2 3 2 11\n",
      "10011101100000111001111000011001 3 2 5 2 7 2 3 2 7\n",
      "10001101100101011010100011011001 3 2 5 2 7 2 3 2 11\n",
      "11000001111100101110000001111111 3 2 3 2 7 2 3 2 3\n",
      "11000100110011100111010010111011 3 2 3 2 7 2 3 2 3\n",
      "11110101110010101001001111000101 59 2 3 2 23 2 109 2 3\n",
      "10000100111001110110101010010101 3 2 5 2 7 2 3 2 7\n",
      "11000111010001110100111101010011 3 2 3 2 53 2 3 2 3\n",
      "11001001001111110011110101011101 11 2 19 2 5 2 29 2 151\n",
      "11001110000000110111100111010111 5 2 3 2 13 2 5 2 3\n",
      "10100111000100110111110000101001 3 2 5 2 7 2 3 2 11\n",
      "10110010101100111000101000011001 5 5 3 11 5 3 5 5 3\n",
      "11101001010100010011101010011111 3 2 3 2 7 2 3 2 3\n",
      "10111011011011011011000000010001 3 2 5 2 7 2 3 2 11\n",
      "10101000111010101001001111110011 3 2 3 2 71 2 3 2 3\n",
      "11110111101000000100000011110011 3 2 5 2 7 2 3 2 7\n",
      "11001101111110010010001010110001 5 31 7 11 293 5 199 263 769\n",
      "11001110111011001000011100111001 593 2 3 2 29 2 79 2 3\n",
      "10100100010111100101101001101111 3 2 3 2 7 2 3 2 3\n",
      "10001000010100101101010111010111 17 2 23 2 47 2 43 2 7\n",
      "10001111000101011010010010001111 3 2 5 2 7 2 3 2 11\n",
      "10100010100001111011000100001011 5 2 857 2 59 2 7 2 13\n",
      "11111001111111010011110111001111 5 2 3 2 193 2 61 2 3\n",
      "11011101100001100010001100110011 3 2 5 2 7 2 3 2 11\n",
      "11100101101011001110011010101001 5 2 3 2 17 2 41 2 3\n",
      "11110110101100110100000010001101 3 2 5 2 7 2 3 2 11\n",
      "10010100000101010000101001101101 3 7 13 3 31 43 3 11 7\n",
      "11011100111000110101111110001011 3 2 5 2 5 2 3 2 11\n",
      "10111110100111010000011000001101 3 2 5 2 7 2 3 2 11\n",
      "10111010001101000100100011000011 5 2 13 2 37 2 5 2 101\n",
      "11000100010001101111110110100111 37 2 3 2 19 2 23 2 3\n",
      "10011100100110111100011001100001 3 2 5 2 7 2 3 2 11\n",
      "11101010110111111001100001110111 7 7 3 31 11 3 7 7 3\n",
      "11011101100101101111001111100101 3 19 3 3 19 3 3 7 3\n",
      "11110001100101100000010101101101 5 2 17 2 37 2 5 2 101\n",
      "10110010001111110110010011111101 3 2 5 2 5 2 3 2 11\n",
      "11100010110101111011000010110101 3 2 3 2 7 2 3 2 3\n",
      "11110100001100010000001100010001 7 2 3 2 43 2 5 2 3\n",
      "10100100100001010001001001110001 59 2 3 2 283 2 11 2 3\n",
      "11010001101000110001100010110111 3 2 5 2 7 2 3 2 11\n",
      "11010110110111011111011101100111 5 31 5 11 41 5 379 5 149\n",
      "11001100010011010001010100010101 17 2 7 2 11 2 5 2 29\n",
      "11111111001100011000110010010011 3 2 3 2 7 2 3 2 3\n",
      "10110001110011000001111101000011 157 2 29 2 17 2 67 2 7\n",
      "11010010110000011100000101011011 3 5 3 3 5 3 3 11 3\n",
      "11010000110011110101011111100001 151 2 3 2 277 2 11 2 3\n",
      "11011111101000000001011000010101 3 7 3 3 5 3 3 29 3\n",
      "10010010011011000110101010011001 3 181 3 3 5 3 3 23 3\n",
      "10101001001011000111010111000111 7 37 11 661 101 43 349 7 31\n",
      "11010001011000001000101011110111 3 2 5 2 7 2 3 2 11\n",
      "10000100000111111101000111000011 3 5 3 3 5 3 3 7 3\n",
      "10111001100101000100011000010111 3 7 3 3 5 3 3 7 3\n",
      "11100010100100011000011011001011 3 89 3 3 5 3 3 967 3\n",
      "11110001001100001011001010111111 127 2 3 2 29 2 5 2 3\n",
      "10010111010011011101111010111101 3 7 3 3 31 3 3 73 3\n",
      "11000101010110110010101010001101 3 2 5 2 7 2 3 2 11\n",
      "10010010100111100100010011001111 3 2 5 2 7 2 3 2 11\n",
      "10001100100111111101111001010101 3 7 13 3 23 43 3 67 7\n",
      "10100101011111001110000000000111 5 13 3 7 5 3 73 7 3\n",
      "10001010100101111101100100011111 3 2 3 2 7 2 3 2 3\n",
      "10111000010010011100001100010011 3 2 5 2 7 2 3 2 11\n",
      "11100011110010001100110101011011 3 2 3 2 7 2 3 2 3\n",
      "11000010010110101111010101101011 3 2 3 2 7 2 3 2 3\n",
      "11101001110011001010101100111001 5 2 3 2 13 2 31 2 3\n",
      "10011010110001011110010000101101 3 2 5 2 7 2 3 2 11\n",
      "11010101111010111100111010101101 7 13 3 31 13 3 7 7 3\n",
      "10100000001001000110010000011001 3 2 5 2 5 2 3 2 7\n",
      "10001110111010111100101001111001 5 7 5 53 47 5 463 5 7\n",
      "11110001100111100010111111011001 3 2 5 2 5 2 3 2 11\n",
      "11101001100100000111111001001111 3 2 3 2 7 2 3 2 3\n",
      "11001011110110110101001000111111 3 2 5 2 5 2 3 2 11\n",
      "10011001011101111100101010000111 3 2 3 2 7 2 3 2 3\n",
      "11010111110010000001001010010101 3 5 3 3 5 3 3 199 3\n",
      "11001110100010100110110111000001 13 2 241 2 11 2 37 2 7\n",
      "11011001000011111000000010011111 3 2 5 2 7 2 3 2 11\n",
      "10110111100100001111010100111001 11 2 3 2 23 2 389 2 3\n",
      "10111101111100011110001011110001 3 2 5 2 5 2 3 2 11\n",
      "11111111110001110011111101101011 3 2 3 2 7 2 3 2 3\n",
      "11111111111011010011101110011011 7 2 3 2 79 2 5 2 3\n",
      "10101011101100001101100110000111 3 7 137 3 11 29 3 7 7\n",
      "11001101001110100100000011111001 3 2 5 2 7 2 3 2 11\n",
      "11110111110101111110100011101001 3 2 5 2 7 2 3 2 11\n",
      "10111101110101110110100011100011 3 2 5 2 5 2 3 2 11\n",
      "10100100100011110101101011011011 7 2 3 2 13 2 73 2 3\n",
      "11011100010000110101001111010111 3 2 3 2 37 2 3 2 3\n",
      "10011000100100010000001110101001 7 2 3 2 43 2 59 2 3\n",
      "11111111110011001010101110000001 3 19 11 3 11 13 3 449 17\n",
      "10110001110011010011100010000001 3 2 5 2 7 2 3 2 11\n",
      "10100001010101110111011100000001 7 13 3 31 5 3 13 5 3\n",
      "11101110001000110110110110110001 23 2 3 2 163 2 293 2 3\n",
      "11100010111100110111111001110001 3 2 5 2 5 2 3 2 7\n",
      "11110001011110101100101100000001 3 2 5 2 7 2 3 2 7\n",
      "11111110100001100001110101101111 3 2 5 2 5 2 3 2 11\n",
      "11100111011110011110101101100011 7 11 3 31 11 3 7 7 3\n",
      "11101100011111010000000011100011 3 2 5 2 7 2 3 2 11\n",
      "11101110101110000110011100011001 5 2 3 2 11 2 5 2 3\n",
      "11011001101110100101011111000101 3 5 73 3 11 829 3 7 43\n",
      "11000111111101011000000001001001 3 491 3 3 5 3 3 7 3\n",
      "10110000000000110110100110010111 3 2 5 2 7 2 3 2 11\n",
      "10011101001111101001101001100101 3 2 3 2 7 2 3 2 3\n",
      "10001010000101101101001101100001 3 2 5 2 7 2 3 2 11\n",
      "10000101000101010110101010000111 5 2 17 2 37 2 5 2 101\n",
      "10011111010101011111101001100101 5 2 17 2 5 2 5 2 73\n",
      "10010011001100100011011011111101 3 2 3 2 7 2 3 2 3\n",
      "10100101111011110110000000011001 3 2 5 2 7 2 3 2 11\n",
      "11101000000010111011011000101101 5 2 7 2 37 2 5 2 101\n",
      "11010000011110001011000011000011 3 2 5 2 7 2 3 2 11\n",
      "10011110111000101110000000011011 5 2 17 2 37 2 5 2 7\n",
      "10111100101100101000010001101011 5 2 17 2 37 2 5 2 67\n",
      "10011000100100111010000011111001 3 5 3 3 5 3 3 509 3\n",
      "10011100100000110010101111101101 3 5 13 3 31 13 3 73 7\n",
      "11111111111101001000101100101111 5 2 17 2 29 2 5 2 101\n",
      "10001011010001110000100001001111 3 2 5 2 7 2 3 2 11\n",
      "10011100011011000110011001101001 3 2 5 2 7 2 3 2 11\n",
      "10000001000110101110001000111111 3 5 3 3 5 3 3 7 3\n",
      "10010000111001101110011101010011 113 5 7 101 17 31 5 11 727\n",
      "11110100010001000101001111111011 11 2 3 2 409 2 23 2 3\n",
      "11100000110100000101000010011001 5 2 3 2 43 2 73 2 3\n",
      "10100011011001000011010011110101 5 2 23 2 191 2 223 2 29\n",
      "11010101011100010010101011110101 11 2 3 2 151 2 61 2 3\n",
      "11101011011111000100110011111001 3 2 5 2 5 2 3 2 11\n",
      "10010000100000011000011111011101 17 2 7 2 29 2 5 2 563\n",
      "10110001111011010010101101000001 3 2 5 2 7 2 3 2 11\n",
      "11011000101011011100100010000011 3 5 3 3 5 3 3 23 3\n",
      "10001000010100101101001111101101 3 2 5 2 7 2 3 2 11\n",
      "11110110011011110000111010110011 5 2 47 2 5 2 41 2 13\n",
      "11000111000000111101111001001111 431 2 3 2 709 2 17 2 3\n",
      "10110110101000110001010100000011 3 2 5 2 7 2 3 2 11\n",
      "10001000110100111101001011011111 3 2 3 2 7 2 3 2 3\n",
      "10000111011110001000111110011011 13 2 3 2 19 2 233 2 3\n",
      "10010000000010110100011110101111 31 11 3 11 5 3 23 11 3\n",
      "11100100100010000101010111011001 3 13 3 3 5 3 3 7 3\n",
      "11101000101101001101001000100101 181 13 3 281 5 3 11 31 3\n",
      "11111100111000010110000010001101 3 2 5 2 7 2 3 2 11\n",
      "11101000001111110010111110101101 5 2 17 2 5 2 5 2 101\n",
      "10111000110011111100100000110111 17 2 3 2 67 2 17 2 3\n",
      "11000111001100100100101111111111 3 2 5 2 5 2 3 2 7\n",
      "10000000101001001001101101011011 13 2 31 2 29 2 7 2 19\n",
      "10010110111010110101001000100101 3 2 5 2 7 2 3 2 7\n",
      "10000000000111010110110100110111 3 79 3 3 5 3 3 89 3\n",
      "11011111100100011010000110111111 3 2 5 2 5 2 3 2 11\n",
      "10110100101110010100000011010101 3 5 3 3 5 3 3 47 3\n",
      "11101011101001111110000001011001 5 2 3 2 37 2 5 2 3\n",
      "10110011101111110011001000100101 7 2 3 2 43 2 73 2 3\n",
      "11111100010011001011101101000011 3 2 3 2 7 2 3 2 3\n",
      "10011110011111101111111111000001 3 2 5 2 7 2 3 2 11\n",
      "11000000110110110011101001001101 3 2 5 2 7 2 3 2 11\n",
      "11011011101100010101101010011111 3 2 5 2 5 2 3 2 11\n",
      "10101100001001110110001111010001 3 2 5 2 7 2 3 2 11\n",
      "11011111011000100010111001000001 3 2 5 2 7 2 3 2 11\n",
      "11111110100001011010110001011111 3 2 5 2 5 2 3 2 11\n",
      "10011001011110010000111101101011 3 2 3 2 7 2 3 2 3\n",
      "11101001001101111010101001001101 5 2 3 2 37 2 5 2 3\n",
      "11110000000011100111110100111101 5 2 3 2 37 2 5 2 3\n",
      "11000011001111010010010110001011 3 2 5 2 7 2 3 2 11\n",
      "11101101110111100101010001100111 7 2 23 2 5 2 17 2 73\n",
      "11100110011010101011111011001101 7 2 11 2 5 2 17 2 7\n",
      "11010011110010110010000101100011 3 2 5 2 7 2 3 2 11\n",
      "11010000111100000001100111111111 7 2 3 2 43 2 73 2 3\n",
      "10111010101001010001011011100011 3 307 131 3 11 5 3 17 83\n",
      "10100001011111010111000111100101 7 2 3 2 11 2 29 2 3\n",
      "11001000001110110101110010000001 3 2 5 2 7 2 3 2 11\n",
      "11011000101111100001000101110101 3 11 7 3 277 5 3 29 179\n",
      "11000001011101100011011000110001 3 67 3 3 5 3 3 37 3\n",
      "11010111010101110100001111111101 7 13 3 31 7 3 7 7 3\n",
      "11110001111110101100001010101101 3 7 13 3 11 43 3 73 7\n",
      "10100010100100001011000001010011 5 2 3 2 271 2 19 2 3\n",
      "10100010001111110101000100000011 3 2 5 2 7 2 3 2 11\n",
      "10001001010001010100111111110111 43 2 3 2 11 2 61 2 3\n",
      "10000011111110000010100110100101 3 233 3 3 5 3 3 431 3\n",
      "10101010111010001001101101101101 3 2 3 2 31 2 3 2 3\n",
      "11110110010011101000111101010001 11 2 3 2 73 2 131 2 3\n",
      "11011010111110000110010010110011 5 2 3 2 11 2 5 2 3\n",
      "10010101001101000101001101111101 47 5 11 269 7 19 5 181 7\n",
      "10011111000100011111001010100101 53 331 251 29 19 73 107 17 17\n",
      "11101001110100101001011101110101 3 23 97 3 41 127 3 13 701\n",
      "10000101101000101011001101111101 19 5 109 433 199 11 5 23 971\n",
      "10111101100101011011001100100011 3 2 3 2 7 2 3 2 3\n",
      "11011110111110011001100111000011 3 2 5 2 5 2 3 2 11\n",
      "10110100000000011001111110001111 3 2 5 2 7 2 3 2 11\n",
      "11000000101111101111100111111011 3 5 3 3 13 3 3 17 3\n",
      "11011100010011101001110011001101 11 2 3 2 89 2 13 2 3\n",
      "10100011011010010000111010011011 23 2 89 2 17 2 37 2 61\n",
      "11000101100101000010101101100001 5 2 17 2 37 2 5 2 101\n",
      "11101110100001100010101010001101 3 2 11 2 67 2 3 2 53\n",
      "11010001111001111110010100010011 239 2 3 2 113 2 17 2 3\n",
      "10111100101101110100110000010001 7 2 173 2 41 2 17 2 13\n",
      "10100110000000011110000101000011 3 2 3 2 7 2 3 2 3\n",
      "10110110100110000010011010111001 61 2 11 2 353 2 89 2 97\n",
      "11100000010000101100000010011101 3 2 3 2 7 2 3 2 3\n",
      "10010001001111010001110000010011 373 2 11 2 17 2 7 2 7\n",
      "10111100010001010010100010110001 3 2 5 2 7 2 3 2 11\n",
      "10010010101101010010011001111111 3 2 3 2 7 2 3 2 3\n",
      "11101100100101000110101000110011 23 2 7 2 349 2 223 2 593\n",
      "11110010111001111100111011000101 3 2 5 2 5 2 3 2 11\n",
      "11010110011110101101011010011011 3 2 5 2 5 2 3 2 11\n",
      "10011111011111001011001111001011 5 19 3 11 107 3 7 13 3\n",
      "11011100001100101010111111110011 37 2 23 2 5 2 89 2 31\n",
      "11101110001101101001110000010001 3 2 5 2 7 2 3 2 11\n",
      "10110100010010001110011111011111 11 5 53 23 71 17 5 11 197\n",
      "11111101011110011100010101000001 3 2 3 2 419 2 3 2 3\n",
      "10000001010000010001000111110101 3 2 3 2 11 2 3 2 3\n",
      "11100100001001111101110110010011 5 2 3 2 37 2 5 2 3\n",
      "11000101100011000111011101010111 3 2 3 2 541 2 3 2 3\n",
      "11011110100111100100010001011011 11 2 3 2 601 2 11 2 3\n",
      "11110110100100011011011101011001 3 7 13 3 31 43 3 73 7\n",
      "11010100111001101101000010100001 23 5 3 577 5 3 5 47 3\n",
      "10010000010011111000101100111101 3 2 5 2 7 2 3 2 11\n",
      "11111000010111111111110001101011 3 2 5 2 7 2 3 2 11\n",
      "10011101011111011010001011011111 937 5 3 137 23 3 5 59 3\n",
      "11111100110111111000011011000101 179 2 29 2 5 2 17 2 457\n",
      "11100010111101101100001100111011 3 7 13 3 29 43 3 73 7\n",
      "11100111010101111100101100111001 7 2 397 2 5 2 41 2 19\n",
      "11000111000000110000001011101101 3 2 5 2 7 2 3 2 11\n",
      "10111010110101010101101011111101 7 5 3 31 43 3 5 7 3\n",
      "10111001110100111010010000111101 3 2 3 2 7 2 3 2 3\n",
      "11100010111111110111101001000101 3 2 5 2 5 2 3 2 7\n",
      "11101000101110111110100111010011 37 2 83 2 5 2 23 2 7\n",
      "11100110101000001010110011101111 3 2 3 2 43 2 3 2 3\n",
      "11111111010100010110010010001101 179 2 3 2 13 2 673 2 3\n",
      "11100010100001011001111101111111 3 2 5 2 5 2 3 2 11\n",
      "11001011001111111001101101001101 3 2 5 2 5 2 3 2 11\n",
      "11000100111111101110000110110101 7 5 19 19 157 11 5 7 13\n",
      "11001100001010110110001101110001 3 2 5 2 7 2 3 2 11\n",
      "10110001101010101111111110111011 3 2 193 2 19 2 3 2 53\n",
      "10011101111010110100001001111111 3 2 5 2 5 2 3 2 11\n",
      "11011111101011000000000011000001 3 2 5 2 7 2 3 2 11\n",
      "10110000100100001000011110100001 37 2 3 2 71 2 5 2 3\n",
      "11001110101100010100100110110001 3 2 5 2 7 2 3 2 11\n",
      "11011000011111011100111011001111 13 5 3 7 179 3 5 11 3\n",
      "11111100111000100111011011110001 3 2 5 2 5 2 3 2 11\n",
      "11111001100110111011111000101001 5 2 197 2 5 2 59 2 59\n",
      "10111000001101011100000010000111 3 2 5 2 7 2 3 2 11\n",
      "11110000010000100111111011101101 3 2 3 2 7 2 3 2 3\n",
      "11010100011010000100110011010001 13 2 53 2 11 2 7 2 29\n",
      "11111010000110110101101000111111 5 2 139 2 5 2 167 2 47\n",
      "10110110000110010101010100100011 3 19 3 3 5 3 3 11 3\n",
      "10011110001010110000000011010101 3 2 5 2 7 2 3 2 11\n",
      "10011111100111101000011001110111 3 2 5 2 5 2 3 2 11\n",
      "11111011011001111110010000101101 3 2 5 2 5 2 3 2 11\n",
      "10010100111110000110100111111001 3 2 3 2 7 2 3 2 3\n",
      "11001100100110000001011111000101 3 7 3 3 5 3 3 23 3\n",
      "11110011110001000011110000001011 3 2 5 2 7 2 3 2 11\n",
      "10001111101110111001101010100101 11 19 5 521 11 11 11 5 47\n",
      "10011010100001000010101101110001 11 2 167 2 853 2 7 2 7\n",
      "10111101001001101010000110000011 3 5 3 3 5 3 3 359 3\n",
      "10100110000001111010101111111001 7 2 3 2 43 2 31 2 3\n",
      "11100101011101011110101110010101 5 2 17 2 5 2 5 2 7\n",
      "10010100111101001011101111100111 3 2 5 2 5 2 3 2 11\n",
      "10111100000000001010011110100101 5 2 17 2 19 2 5 2 101\n",
      "11010011101011111101001000001101 3 2 3 2 7 2 3 2 3\n",
      "10000000000011100000100110110001 31 2 11 2 5 2 31 2 41\n",
      "10010101011000100000101011110111 3 2 5 2 7 2 3 2 11\n",
      "11111011111111101110011110010101 3 2 3 2 7 2 3 2 3\n",
      "10111101101001110100001100010111 277 2 3 2 53 2 17 2 3\n",
      "11011010101000000010111011111011 3 2 3 2 37 2 3 2 3\n",
      "10100010011111000111001111010011 3 2 3 2 7 2 3 2 3\n",
      "10101111010001111001010000101001 3 2 5 2 7 2 3 2 11\n",
      "10111111100100001000110101110011 3 2 3 2 7 2 3 2 3\n",
      "10110101101111111011001011010111 3 2 5 2 7 2 3 2 11\n",
      "10001001010000111101110111001101 3 5 13 3 19 5 3 73 7\n",
      "10110111111000011110100011100001 5 2 3 2 37 2 5 2 3\n",
      "11000000010111101001010110101011 3 2 5 2 7 2 3 2 11\n",
      "11100010111111101100011100010001 3 2 3 2 7 2 3 2 3\n",
      "11001101010010000101010101001011 13 41 3 29 5 3 13 5 3\n",
      "11000100101110010110000110101101 3 2 5 2 7 2 3 2 11\n",
      "10101011110011010110011100010101 5 2 3 2 37 2 5 2 3\n",
      "10100011110100001010000110011111 89 2 7 2 491 2 5 2 13\n",
      "10001001111101000111101011000001 3 2 5 2 7 2 3 2 11\n",
      "11100010110000110101011010100101 3 2 5 2 7 2 3 2 11\n",
      "11100101001101010001000000000101 3 2 3 2 19 2 3 2 3\n",
      "11100101001111000100101111010011 5 2 3 2 31 2 5 2 3\n",
      "11000110110111010100101111010001 479 2 3 2 11 2 5 2 3\n",
      "10101101111100110100110100000111 5 2 3 2 37 2 5 2 3\n",
      "10100000000101110100111111101111 3 2 3 2 7 2 3 2 3\n",
      "10111010100110101000001100001011 7 13 3 31 5 3 73 7 3\n",
      "10011011000110011000111111111101 3 2 5 2 5 2 3 2 11\n",
      "11101000110010110001011000100101 7 13 3 31 5 3 23 7 3\n",
      "11001111100001001110111101101101 3 2 5 2 5 2 3 2 11\n",
      "11110000000010111110000001101101 7 13 3 31 5 3 73 7 3\n",
      "10000101101000100111100111110011 89 5 11 7 13 701 5 17 19\n",
      "11100110000110001101011110101101 3 2 3 2 7 2 3 2 3\n",
      "11111100100100111011100000000101 3 2 5 2 7 2 3 2 11\n",
      "10100110110111011100001110010001 7 5 239 19 11 113 5 7 7\n",
      "11111101001100111111100111111011 3 2 3 2 7 2 3 2 3\n",
      "11000101100001111000001110100111 3 2 5 2 7 2 3 2 11\n",
      "11011101111100100101100010001011 3 2 3 2 7 2 3 2 3\n",
      "11000000101000000000001011100011 73 2 7 2 5 2 43 2 13\n",
      "10111100000110100101110010011111 3 2 3 2 7 2 3 2 3\n",
      "10010110001000000011010111001101 5 2 7 2 37 2 5 2 101\n",
      "11111001001000001111100101111111 3 2 5 2 5 2 3 2 11\n",
      "10100010000111101000101010001111 7 13 3 31 5 3 73 7 3\n"
     ]
    }
   ],
   "source": [
    "print 'Case #1:'\n",
    "random_number_list = list()\n",
    "count = 0\n",
    "while count < J:\n",
    "    str_int = ''.join(str(choice(range(0,2))) for i in range(30))\n",
    "    if str_int in random_number_list:\n",
    "        continue\n",
    "    else:\n",
    "        random_number_list.append(str_int)\n",
    "    str_input = ('1%s1' % str_int)\n",
    "    factors = list()\n",
    "    label = True\n",
    "    for base in range(2,11):\n",
    "        N = convert_num(str_input, base)\n",
    "        if is_probable_prime(N):\n",
    "            label = False\n",
    "            break\n",
    "        else:\n",
    "            f = find_factor(N)\n",
    "            if not f:\n",
    "                label = False\n",
    "                break\n",
    "            factors.append(f)\n",
    "    if label:\n",
    "        count = count+1\n",
    "        print str_input,\n",
    "        for f in factors:\n",
    "            print f,\n",
    "        print"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1477"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(random_number_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def convert_num(str_num, base):\n",
    "    big_int = 0\n",
    "    length = len(str_num)\n",
    "    for i in range(length-1, -1, -1):\n",
    "        if int(str_num[i]) == 1:\n",
    "            big_int = big_int+pow(base, length-1-i)\n",
    "            # print length-1-i, pow(base, length-1-i)\n",
    "    return big_int"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def is_probable_prime(n):\n",
    "    \"\"\"\n",
    "    Miller-Rabin primality test.\n",
    " \n",
    "    A return value of False means n is certainly not prime. A return value of\n",
    "    True means n is very likely a prime.\n",
    " \n",
    "    >>> is_probable_prime(1)\n",
    "    Traceback (most recent call last):\n",
    "        ...\n",
    "    AssertionError\n",
    "    >>> is_probable_prime(2)\n",
    "    True\n",
    "    >>> is_probable_prime(3)\n",
    "    True\n",
    "    >>> is_probable_prime(4)\n",
    "    False\n",
    "    >>> is_probable_prime(5)\n",
    "    True\n",
    "    >>> is_probable_prime(123456789)\n",
    "    False\n",
    " \n",
    "    >>> primes_under_1000 = [i for i in range(2, 1000) if is_probable_prime(i)]\n",
    "    >>> len(primes_under_1000)\n",
    "    168\n",
    "    >>> primes_under_1000[-10:]\n",
    "    [937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n",
    " \n",
    "    >>> is_probable_prime(6438080068035544392301298549614926991513861075340134\\\n",
    "3291807343952413826484237063006136971539473913409092293733259038472039\\\n",
    "7133335969549256322620979036686633213903952966175107096769180017646161\\\n",
    "851573147596390153)\n",
    "    True\n",
    " \n",
    "    >>> is_probable_prime(7438080068035544392301298549614926991513861075340134\\\n",
    "3291807343952413826484237063006136971539473913409092293733259038472039\\\n",
    "7133335969549256322620979036686633213903952966175107096769180017646161\\\n",
    "851573147596390153)\n",
    "    False\n",
    "    \"\"\"\n",
    "    assert n >= 2\n",
    "    # special case 2\n",
    "    if n == 2:\n",
    "        return True\n",
    "    # ensure n is odd\n",
    "    if n % 2 == 0:\n",
    "        return False\n",
    "    # write n-1 as 2**s * d\n",
    "    # repeatedly try to divide n-1 by 2\n",
    "    s = 0\n",
    "    d = n-1\n",
    "    while True:\n",
    "        quotient, remainder = divmod(d, 2)\n",
    "        if remainder == 1:\n",
    "            break\n",
    "        s += 1\n",
    "        d = quotient\n",
    "    assert(2**s * d == n-1)\n",
    " \n",
    "    # test the base a to see whether it is a witness for the compositeness of n\n",
    "    def try_composite(a):\n",
    "        if pow(a, d, n) == 1:\n",
    "            return False\n",
    "        for i in range(s):\n",
    "            if pow(a, 2**i * d, n) == n-1:\n",
    "                return False\n",
    "        return True # n is definitely composite\n",
    " \n",
    "    for i in range(_mrpt_num_trials):\n",
    "        a = random.randrange(2, n)\n",
    "        if try_composite(a):\n",
    "            return False\n",
    " \n",
    "    return True # no base tested showed n as composite\n",
    "\n",
    "def find_factor(N):\n",
    "    for p in primes_under_1000:\n",
    "        if N % p == 0:\n",
    "            return p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "primes_under_1000 = [i for i in range(2, 1000) if is_probable_prime(i)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "------------------------Question 2------------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "N = int(data[0])\n",
    "for i in range(0, N):\n",
    "    pancakes = data[i+1]\n",
    "    pancake_list = list(pancakes)\n",
    "    value = compute_flips(pancake_list, len(pancake_list))    \n",
    "    print 'Case #%d: %d' %((i+1), value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def compute_flips(pancakes, length):\n",
    "    if pancakes[0] == '+':\n",
    "        s_front = symbol_at_the_front(pancakes, length, '+')\n",
    "        if s_front == length:\n",
    "            return 0\n",
    "        return 1 + compute_flips(pancakes[s_front:], length-s_front)\n",
    "    else:\n",
    "        s_front = symbol_at_the_front(pancakes, length, '-')\n",
    "        s_end = symbol_at_the_end(pancakes, length, '+')\n",
    "        if s_front == length-s_end:\n",
    "            return 1\n",
    "        new_length = length-s_front-s_end\n",
    "        flip_s = flip_str(pancakes[s_front:length-s_end], new_length)\n",
    "        return 1 + compute_flips(flip_s, new_length)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "def symbol_at_the_end(pancakes, length, op):\n",
    "    count = 0\n",
    "    i = length-1\n",
    "    char = pancakes[i]\n",
    "    while i>=0 and char == op:      \n",
    "        count = count+1\n",
    "        i = i - 1\n",
    "        char = pancakes[i]\n",
    "    return count\n",
    "\n",
    "def symbol_at_the_front(pancakes, length, op):\n",
    "    count = 0\n",
    "    i = 0\n",
    "    char = pancakes[i]\n",
    "    while i < length and char == op:\n",
    "        count = count+1\n",
    "        i = i + 1\n",
    "        if i < length:\n",
    "            char = pancakes[i]\n",
    "    return count\n",
    "\n",
    "def flip_str(pancakes, length):\n",
    "    str_flip = list()\n",
    "    for i in range(length-1, -1, -1):\n",
    "        if pancakes[i] == '+':\n",
    "            str_flip.append('-')\n",
    "        else:\n",
    "            str_flip.append('+')\n",
    "    return str_flip"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "------------------------Question 1------------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "N = int(data[0])\n",
    "for i in range(0, N):\n",
    "    value = compute_repeats(data[i+1])\n",
    "    print 'Case #%s: %s' %((i+1), value)\n",
    "    \n",
    "def compute_repeats(num):\n",
    "    if num == '0':\n",
    "        return 'INSOMNIA'\n",
    "    A = set({'0','1','2','3','4','5','6','7','8','9'})\n",
    "    tempInt = int(num)\n",
    "    numInt = int(num)\n",
    "    while len(A) != 0:\n",
    "        tempStr = str(tempInt)\n",
    "        for i in range(0, len(tempStr)):\n",
    "            if tempStr[i] in A:\n",
    "                A.remove(tempStr[i])\n",
    "        tempInt = tempInt + numInt \n",
    "    tempInt = tempInt-numInt\n",
    "    return str(tempInt)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
