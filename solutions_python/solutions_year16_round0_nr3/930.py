{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11100001010111101001100100010101 17 2 257 2 227 2 17 2 73\n",
      "10001110010110010100110011101111 3 2 3 2 7 2 3 2 3\n",
      "11001100100011111000001101011001 3 2 5 2 7 2 3 2 7\n",
      "10101010001010110111100110111011 1433 7 7 11 7 199 11 389 7\n",
      "11101110101000111000000110110101 3 7 13 3 31 11 3 61 7\n",
      "10110011110110000111010110111101 29 2 19 2 5 2 5 2 7\n",
      "11011011111001101000011111110111 3 2 5 2 7 2 3 2 11\n",
      "10110011101111111010110100000101 13 23 241 601 13 13 37 17 9901\n",
      "10010000111101011010011001100011 3 2 5 2 7 2 3 2 11\n",
      "11101111110100001011011101101111 3 2 5 2 7 2 3 2 11\n",
      "10010001001000111010000100110111 3 2 5 2 7 2 3 2 7\n",
      "10101100010010111001111100101011 7 2 3 2 43 2 73 2 3\n",
      "10000001101000101000010011110101 31 61 23 7 73 47 431 467 109\n",
      "10001001011010000111001111011111 3 2 3 2 7 2 3 2 3\n",
      "10110100100000011110100010111111 3 5 13 3 29 43 3 73 7\n",
      "10011000111011101001110011010001 5 5 11 29 1523 5 5 17 17\n",
      "10111110101010011010011111111011 3 2 29 2 67 2 3 2 31\n",
      "11011010101001111011100011111011 5 11 3 23 83 3 7 5 3\n",
      "10011001110100100101100000101001 3 2 5 2 7 2 3 2 11\n",
      "10111010111111010001101101100111 7 5 3 31 43 3 5 7 3\n",
      "11000001011101100010011101000101 709 7 3 13 5 3 17 5 3\n",
      "10001010001011001110011001011101 5 2 19 2 19 2 1019 2 83\n",
      "11001001100010000011101001111001 3 317 3 3 5 3 3 7 3\n",
      "10011011101100000000001011111001 3 7 3 3 5 3 3 73 3\n",
      "11010011000010110000100001111001 3 2 5 2 7 2 3 2 11\n",
      "11000111101000010010110001100101 5 13 3 11 5 3 73 7 3\n",
      "10101111000100000011110010110101 3 2 5 2 7 2 3 2 11\n",
      "10111000000011110100100000100111 5 2 7 2 37 2 5 2 7\n",
      "11100100010000010010001010010011 3 2 3 2 7 2 3 2 3\n",
      "10010100101000111000001000011101 5 11 151 37 23 5 19 23 17\n",
      "10110000101101000101000000001101 3677 2 3 2 263 2 401 2 3\n",
      "10000100100010100100111011000101 5 7 1889 883 19 5 2161 7 7\n",
      "11000110101011000000010011100101 3 2 5 2 7 2 3 2 11\n",
      "10111101100010001100000000011101 3 2 5 2 7 2 3 2 11\n",
      "10110110001011011101010101111001 3 7 13 3 31 43 3 73 7\n",
      "11010001101100000100001011101001 3 2 5 2 7 2 3 2 11\n",
      "11100110000010000011100111011101 3 2 5 2 7 2 3 2 11\n",
      "10010100010010011001011001100111 3 7 3 3 5 3 3 73 3\n",
      "11110010011110110110010101000101 5 2 3 2 41 2 131 2 3\n",
      "11001001010010101000100101100011 13 2 2089 2 7019 2 7 2 1231\n",
      "10000100000010010011001100100111 3 2 3 2 7 2 3 2 3\n",
      "11111011001011010101000111111011 37 23 3 11 29 3 7 1381 3\n",
      "10100001000010100100111111110011 11 2 83 2 11 2 37 2 5531\n",
      "10100111110110011010000001100101 3 2 5 2 7 2 3 2 11\n",
      "11010010001100011010010000101101 3 2 5 2 7 2 3 2 11\n",
      "11110101101111011010000001011001 1931 2 3 2 271 2 11 2 3\n",
      "10000100101110100101100101101011 23 2 13 2 6779 2 311 2 2269\n",
      "11011001000000001110001111010011 5 71 3 29 5 3 17 1129 3\n",
      "11000010000111000010111101101101 3 2 5 2 7 2 3 2 11\n",
      "10100100001001111011110000100101 71 5 3 7 5 3 5 43 3\n",
      "11001100001111101010010000001001 11 2 2467 2 277 2 7 2 7\n",
      "10011101110111111110001000111101 7 5 3 31 43 3 5 7 3\n",
      "11110100101010000010111110011001 3 5 13 3 13 43 3 73 7\n",
      "10001101011101001110011010001111 3 2 3 2 7 2 3 2 3\n",
      "10100001010011111011101001001001 13 2 37 2 131 2 29 2 61\n",
      "10101010101001001110111011001111 661 97 7 7 7 881 317 11 23\n",
      "11011111100111001110010111000011 89 2 7 2 5 2 5 2 7\n",
      "11111000011111011011011111110011 11 5 83 47 227 41 5 11 383\n",
      "10010100100111100010001001011101 7 11 3 31 5 3 73 7 3\n",
      "11110011100010001000011100000101 3 2 5 2 7 2 3 2 11\n",
      "11001011000000110100100010101011 271 2 4139 2 641 2 7 2 13\n",
      "11011101100010110100100110001001 3 2 5 2 7 2 3 2 11\n",
      "11010110001111011111011010000001 5 2 3 2 17 2 5 2 3\n",
      "10100101000010110000010101001111 5 2 17 2 29 2 5 2 7\n",
      "11110100011111100111010000101001 7 2 3 2 43 2 73 2 3\n",
      "10011111010101001101000110011101 3 2 3 2 13 2 3 2 3\n",
      "11100100100000010110011011001111 3 2 5 2 7 2 3 2 11\n",
      "11001001111111110010001110000011 23 2 3 2 11 2 101 2 3\n",
      "10110000100101111110111110000001 5 17 7 37 47 5 31 19 17\n",
      "10011010000101001100111010010001 3 2 5 2 7 2 3 2 11\n",
      "11100100010110000110001010111001 251 59 3 7 5 3 251 43 3\n",
      "11110011000110110010111000011011 23 2 3 2 41 2 5 2 3\n",
      "10110001000010110011101110010101 3 2 5 2 7 2 3 2 11\n",
      "10100010100010011010100111110001 29 19 3 11 5 3 13 5 3\n",
      "10101000010110001110011011001001 3 43 3 3 5 3 3 1889 3\n",
      "11101010110110100010000000101001 3 2 17 2 37 2 3 2 29\n",
      "10110111010110100000010100101011 3 2 5 2 7 2 3 2 11"
     ]
    }
   ],
   "source": [
    "import random\n",
    "import sys\n",
    "import math\n",
    "\n",
    "def find_divisor(x):\n",
    "    for i in range(2, 10000):\n",
    "        if x % i == 0:\n",
    "            return i\n",
    "\n",
    "N = 32\n",
    "K = 500\n",
    "\n",
    "used = set()\n",
    "f = sys.stdout\n",
    "while K > 0:\n",
    "    n = '1'\n",
    "    for i in range(N - 2):\n",
    "        n += '1' if random.random() >= 0.5 else '0'\n",
    "    n += '1'\n",
    "    \n",
    "    if n in used:\n",
    "        continue\n",
    "    used.add(n)\n",
    "    \n",
    "    divisors = []\n",
    "    for base in range(2, 11):\n",
    "        divisor = find_divisor(int(n, base))\n",
    "        if divisor is None:\n",
    "            break\n",
    "        divisors.append(divisor)\n",
    "    if len(divisors) == 9:\n",
    "        print >> f, n, ' '.join(map(str, divisors))\n",
    "        K -= 1\n",
    "print len(used)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "98\n"
     ]
    }
   ],
   "source": [
    "print len(used)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
