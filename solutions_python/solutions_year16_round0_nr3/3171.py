import sys
import math

import myprimes

primes = myprimes.get_primes()

extra_primes = [14349259, 14349919, 14349961, 1073742913, 1073746181, 1073758277, 1073759233, 1073759317, 2147483659, 2147483813, 2147483867, 2147483869, 2147483887, 2147483893, 2147483929, 2147483999, 2147484007, 30517581401, 30517581881, 30517656251, 30517657031, 470184985873, 470185031269, 35184372093001, 35184372351553, 35184372355073, 35184372384257, 35184374186057, 205891132153789, 617673396284059, 617673396286417, 617673396287119, 1000000010010011, 1000000010110001, 4611686018427388181, 4611686018427389189, 4611686018427389201, 4611686018427389269, 4611686018427393281, 4611686018427454741, 4611686018427454789, 4611686018427457537, 4611686018427457793, 4611686018427457861, 4611686018427458561, 4611686018427458821, 4611686018427458881, 4611686018427458897, 4611686018427474197, 4656612873077392671901L, 4656612873077392672001L, 4656612873077392987651L, 4656612873077393047031L, 4656612873077393050651L, 4656612873077393062631L, 1326443518324400147734537L, 1326443518324400149366027L, 1326443518324400149367503L, 1326443518324400149367539L, 157775382034845806615059607L, 157775382034845806615866679L, 157775382034845806621648287L, 157775382034845806655398759L, 9903520314283042199193260033L, 9903520314283042199195386369L, 9903520314283042199209771529L, 9903520314283042199210033729L, 9903520314283042199212167241L, 9903520314283042199212167689L, 381520424476945831628654741557L, 381520424476945831628693477053L, 381520424476945831628697788287L, 10000000000000000000000010001011L, 10000000000000000000000010011111L, 10000000000000000000000111011101L, 10000000000000000000000111100011L]


divisors_cache = {1326443518324400147398873: 1152846547, 617673396284041: 20068583, 9903520314283042199193260041: 65867307941, 10000000000000000000000001111101: 5887084391, 10000000000000000000000010100001: 81015785899, 9903520314283042199195095561:138490739, 4656612873077392660151: 8131644991, 10000000000000000000000010111011:22060567, 1326443518324400147687923: 743025642547, 10000000000000000000000011000011: 1751477323787, 4656612873077392672031: 2676022103, 4656612873077392672531:171207227, 10000000000000000000000011010111:342253573, 381520424476945831628655279649: 69627165436663, 4611686018427453461: 471267323, 4656612873077392968781: 1133938703, 157775382034845806620807601: 3432135533, 9903520314283042199209775177: 5749484340869, 1326443518324400149079827: 498313679, 4656612873077392971901: 19085800207, 4611686018427454469: 113369981, 9903520314283042199210037257: 8531281734953, 9903520314283042199210070089: 1312584319, 10000000000000000000000110011011: 35157907826831, 1326443518324400149366207: 666522388123, 4656612873077393050751: 7099719413, 9903520314283042199212134401: 1064303831, 157775382034845806621751187: 2515968509, 4611686018427474949:188452399, 1326443518324400149412647:980814408089, 1326443518324400149412857:1817502473, 9903520314283042199327211529: 1966628094427, 157775382034845806655396701: 30043748821, 10000000000000000000001000010101: 2185215679   }


cache_answers = {}

def is_prime(x):
  # fast answer?
  if x > 10:
     if x % 2 == 0 or x % 3 == 0 or x % 7 == 0 or x % 11 == 0: return False

  # is it one of the primes?
  last_prime = primes[-1]
  if x <= last_prime:
     return (x in primes)

  if x in cache_answers:
     return cache_answers[x]

  if x in extra_primes:
     return True

  if x in divisors_cache:
     return False

  for p in primes:
     if x % p == 0: 
        cache_answers[x] = False
        return False


  last_prime = primes[-1]

  last_nr_to_test = math.sqrt(x)
  print "-"*80
  print "No estaba en tabla :", x, " testing divisor until", last_nr_to_test

  divisor = last_prime+2
  while divisor <= last_nr_to_test:
     if x % divisor == 0: 
        divisors_cache[x] = divisor
        print "to divisors_cache [",x,"] =", divisor
        cache_answers[x] = False
        print " -> False"
        return False;
     divisor += 2
     if divisor % 5 == 0 or divisor % 7 == 0: divisor += 2

  extra_primes.append(x)
  cache_answers[x] = True
  print " -> True"
  return True


def find_divisor(x):
  if is_prime(x): return -1
  if x in divisors_cache:
     return divisors_cache[x]

  for p in primes:
     if x % p == 0: return p

  last_prime = primes[-1]

  divisor = last_prime+2
  while divisor < x:
     if x % divisor == 0: return divisor
     divisor += 2

  return -1
 
def solve(N,J):
    last = 2**(N-2)
    contador = 0
    for x in xrange(0,last):
        numstr = "1" + "{0:b}".format(x).zfill(N-2) + "1"
        # print "reviewing ", x, numstr
        # print numstr
        prime = False
        for base in xrange(2,10+1):
            numero_en_base_b = int(numstr,base)
            # print numstr, "en base", base, "es", numero_en_base_b
            # print "  en base", base, ":", numero_en_base_b, "es primo?"
            if is_prime(numero_en_base_b):
               prime = True
               break

        if prime: continue
        divisor_set = []
        for base in xrange(2,10+1):
            numero_en_base_b = int(numstr,base)
            divisor_set.append(str(find_divisor(numero_en_base_b)))
        # print x, contador, " ",
        print numstr, " ".join(divisor_set)
        contador += 1
        if contador == J: break
         
    return 0
 
# main()
 
#print "-"*80
#cuantos = len(extra_primes)

# read 1 number, use it to control the loop
for tc in xrange(1, int(sys.stdin.readline())+1):
    N, J = [int(w) for w in sys.stdin.readline().split()]
    #print "N = ", N, " J = ", J
 
    print 'Case #%d: ' % (tc)
    best = solve(N,J)

#print "extra_primes =", sorted(extra_primes)
#print "final size:", len(extra_primes), " initial:", cuantos
# print "cache_answers = ", cache_answers
