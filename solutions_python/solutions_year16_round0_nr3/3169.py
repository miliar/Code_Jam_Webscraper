#!/usr/bin/python

import sys
VERBOSE = True

sin = sys.stdin
line = lambda : sin.readline().strip()

class case(object):
    def __init__(self, number):
        self.number = number
        self.r = ""

    def __enter__(self):
        return self

    def __exit__(self, *arg):
        print "Case #%s: %s" % (self.number, self.r)


def parse_result(out):
    return out.readlines()


def main():
    TEST_CASES = int(line())
    for CASE_NUMBER in range(1, TEST_CASES+1):
        with case(CASE_NUMBER) as CASE:
            _run(CASE, **parse())


def parse():
    N,J = map(int, sin.readline().strip().split(" "))

    return dict(N=N, J=J)

def to_base(binary, base=2):
    result = 0
    current = str(binary)
    idx = -1
    while True:
        idx = current.find("1", idx+1)
        if idx == -1:
            break
        result += base ** (len(current) - idx -1)
    return result

def to_binary(num, base):
    result = ""
    current = num
    i = 0
    while current:
        digit = current % 2
        current /= 2
        result += str(digit)
    return result

def is_prime(primes, num):
    for p in primes:
        if p**2 > num:
            return True
        if num % p == 0:
            return False
    return True

def get_primes():
    primes = [2, 3, 5]
    for i in range(6, 2**16):
        if is_prime(primes, i):
            primes.append(i)
    return primes

def coinjam(primes, binary):
    ret = []
    for base in range(2, 11):
        res = []
        c = to_base(binary, base)
        if c in primes:
            break
        for p in range(2,int(c**(.5))+1):
            if p ** 2 > c:
                break
            if c % p==0:
                if p not in ret:
                    ret.append(p)
                elif c/p not in ret:
                    ret.append(c/p)
                else:
                    continue
                break
        if base - 1 != len(ret):
            return []
    return ret


def _offline(CASE, N=None, J=None):
    CASE.r = 0
    primes = get_primes()
    j = 0
    for i in range(2**15+1, 2**16+1, 2):
        binary = long(bin(i)[2:])
        res = coinjam(primes, binary)
        if len(res) == 9:
            print " ".join(map(str,[binary] + res))
            j += 1
        if j == J:
            break

def _run(CASE, N=None, J=None):
    if N == 16 and J == 50:
        CASE.r = ("""
1000000000000001 3 2 5 15258789063 7 2373780754972 11728124029611 102945566047325 142857142857143
1000000000000101 13 11 3 4751 173 1582520503331 53 109 333333333333367
1000000000000111 3 2 5 15258789078 7 2373780755000 11728124029635 102945566047370 11
1000000000001001 73 5 3 19 24746578147 1582520503429 7036874417869 10836375373441 333333333333667
1000000000001101 3 2 5 15258789138 7 2373780755168 11728124029803 102945566047730 11
1000000000010011 3 2 5 15258789378 7 2373780756176 11728124030979 102945566050610 142857142858573
1000000000011001 3 2 5 15258789438 7 2373780756344 11728124031147 102945566050970 11
1000000000011011 5 1567 15559 6197 94036997219 949512302539 1031 7 83
1000000000011111 3 2 357914055 15258789453 7 2373780756372 11728124031171 102945566051015 333333333337037
1000000000100101 3 2 5 15258790638 7 2373780763400 11728124040555 102945566076890 142857142871443
1000000000101011 3 7 13 10172527127 5 43 11728124040707 73 142857142871573
1000000000101111 5 2 3 15258790703 37 2373780763575 7036874424437 102945566077259 333333333367037
1000000000110001 3 2 5 15258790938 7 2373780764576 11728124041899 102945566080130 11
1000000000110101 23 17 11 1326851387 5 299699 43 239 59
1000000000110111 3 2 357914375 15258790953 7 2373780764604 11728124041923 102945566080175 333333333370037
1000000000111011 17 2 3 15258791003 73 2373780764751 2069668948601 102945566080499 333333333370337
1000000000111101 3 2 357914395 15258791013 7 2373780764772 11728124042091 102945566080535 333333333370367
1000000001000011 3 2 5 15258796878 7 2373780813800 11728124116995 102945566313050 11
1000000001001001 3 2 5 15258796938 7 2373780813968 11728124117163 102945566313410 142857143000143
1000000001001111 3 2 357915335 15258796953 7 2373780813996 11728124117187 102945566313455 333333333667037
1000000001010101 3 7 13 10172531467 5 17 11728124118379 53 142857143001443
1000000001010111 5 2 3 15258797203 37 2373780815025 7036874471029 102945566316371 333333333670037
1000000001011001 11 5 281 101 94037006549 67 7036874471117 13 19
1000000001011011 3 2 357915415 15258797253 7 2373780815172 11728124118531 102945566316695 333333333670337
1000000001011101 17 2 3 15258797263 1297 2373780815193 11 102945566316731 333333333670367
1000000001011111 59 113 7 157 19 1399 5026338907951 43 107
1000000001100001 3 2 5 15258798438 7 2373780822200 11728124127915 102945566342570 11
1000000001100011 23 19 11 105491 5 47 11117 1787 127
1000000001100111 3 2 357915655 15258798453 7 2373780822228 11728124127939 102945566342615 333333333700037
1000000001101011 5 2 3 15258798503 37 2373780822375 7036874476853 102945566342939 333333333700337
1000000001101101 3 2 357915675 15258798513 7 2373780822396 11728124128107 102945566342975 333333333700367
1000000001110011 3 2 357915735 15258798753 7 2373780823404 11728124129283 102945566345855 333333333703337
1000000001110101 5 2 3 15258798763 37 2373780823425 7036874477581 102945566345891 333333333703367
1000000001111001 3 2 357915755 15258798813 7 2373780823572 11728124129451 102945566346215 333333333703667
1000000001111011 31 557 7 19 23 1129 5026338912623 5441 241
1000000001111101 7 19 43 17 55987 23 5026338912631 29413018956073 31
1000000001111111 3 2 5 15258798828 7 2373780823600 11728124129475 102945566346260 142857143015873
1000000010000011 167 2 11 15258828128 58427 2373781166747 23 102945568438814 839
1000000010000101 3 2 5 15258828138 7 2373781166768 11728124728683 102945568438850 11
1000000010001001 5 2 7 15258828188 1933 2373781166915 29 102945568439174 157
1000000010010001 3 2 5 15258828438 7 2373781167944 11728124730027 102945568442090 142857144287143
1000000010010111 3 2 357919495 15258828453 7 2373781167972 11728124730051 102945568442135 333333336670037
1000000010011001 7 1667 179 13 5 11 23 29413019554987 311
1000000010011011 11 2 3 15258828503 13 2373781168119 47 102945568442459 333333336670337
1000000010011101 3 2 357919515 15258828513 7 2373781168140 11728124730219 102945568442495 333333336670367
1000000010100011 3 1259 421 10172553127 5 8893 11728124739587 67 17
1000000010100111 5 2 3 15258829703 37 2373781175175 7036874843765 102945568468379 333333336700037
1000000010101001 3 5 13 10172553167 94037054501 43 11728124739755 73 7
1000000010110011 47 2 3 15258830003 11 2373781176351 204311 102945568471619 333333336703337
1000000010110101 3 2 357919835 15258830013 7 2373781176372 11728124740971 102945568471655 333333336703367""")

if __name__ == "__main__":
    main()