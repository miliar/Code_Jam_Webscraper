from math import sqrt; from itertools import count, islice


def checkFirstLastOne(no):
	if str(no)[0]=='1' and str(no)[-1]=='1':
		return True
	else:
		return False
def toStr(n,base):
   convertString = "0123456789ABCDEF"
   if n < base:
      return convertString[n]
   else:
      return toStr(n//base,base) + convertString[n%base]



def isPrime(n):
    return n > 1 and all(n%i for i in islice(count(2), int(sqrt(n)-1)))

def divisor(num):
    """
    Return the smallest divisor greater than one
    of a natural number.
    """
    for i in range(2, int(num ** 0.5) + 1):
        if num % i == 0:
            return i
    return num

cnt=0
fin_bin_no=[]
#['1000000000000001', '1000000000000111', '1000000000001101', '1000000000010001', '1000000000011001', '1000000000011011', '1000000000100101', '1000000000101011', '1000000000110001', '1000000000110111', '1000000000111001', '1000000000111011', '1000000000111101', '1000000001001111', '1000000001010001', '1000000001010111', '1000000001011001', '1000000001011011', '1000000001100001', '1000000001100111', '1000000001101101', '1000000001101111', '1000000001110101', '1000000001111101', '1000000001111111', '1000000010000001', '1000000010000011', '1000000010000101', '1000000010010111', '1000000010011101', '1000000010100111', '1000000010110011', '1000000010110101', '1000000010111011', '1000000011001101', '1000000011010001', '1000000011010011', '1000000011010101', '1000000011011001', '1000000011011111', '1000000011100101', '1000000011110111', '1000000011111001', '1000000011111101', '1000000100000001', '1000000100010001', '1000000100010011', '1000000100010111', '1000000100011011', '1000000100011111']
divisor_dict={}
#{'1000000011110111': [11, 2, 3, 2, 3, 3, 167, 3, 3], '1000000000101011': [7, 2, 3, 127, 7, 2, 3, 2, 3], '1000000001101101': [3, 2, 3, 2, 3, 3, 3, 2, 3], '1000000001010111': [3, 2, 11, 2, 3, 2, 223, 3, 5], '1000000001100111': [3, 2, 3, 3, 103, 2, 17, 3, 3], '1000000011111001': [17, 2, 13, 2, 5, 5, 3, 5, 137], '1000000100011011': [3, 2, 3, 157, 19, 2, 67, 11, 3], '1000000010110011': [3, 3, 743, 2, 3, 5, 3, 13, 47], '1000000100011111': [857, 19, 11, 2, 23, 149, 3, 3, 5], '1000000010010111': [3, 2, 3, 2, 7, 3, 3, 2, 3], '1000000000011011': [83, 2, 11, 2, 5, 2, 167, 2, 5], '1000000100010111': [3, 2, 3229, 2, 5, 2, 29, 2, 7], '1000000000111101': [3, 2, 3, 2, 17, 2, 5, 2, 3], '1000000100010011': [11093, 97, 73, 3, 3, 17, 233, 2, 173], '1000000010111011': [7, 2, 3, 2, 3, 2, 197, 2, 3], '1000000010000011': [839, 29, 7, 2, 337, 2, 3, 2, 167], '1000000010000001': [3, 2, 197, 2, 5, 2, 97, 2, 67], '1000000001010001': [67, 2, 983, 2, 5, 5, 7, 2, 107], '1000000011111101': [7, 2, 3, 61, 37, 2, 5, 2, 3], '1000000001001111': [3, 2, 3, 2, 3, 3, 53, 2, 3], '1000000000110001': [11, 2, 3, 2, 197, 3, 13, 3, 3], '1000000001011001': [19, 3, 7, 2, 3, 2, 3, 7, 11], '1000000000000001': [7, 2, 3, 2, 181, 2, 11, 2, 3], '1000000010000101': [11, 2, 3, 3, 7, 3, 5, 2, 3], '1000000010100111': [3, 3, 7, 2, 3, 2, 7, 2, 5], '1000000011010101': [3, 2, 1423, 13, 5, 2, 5, 5, 13], '1000000001101111': [29, 2, 7, 2, 5, 2, 47, 2, 7], '1000000011011111': [11, 2, 3, 3, 11, 2, 269, 2, 3], '1000000001110101': [3, 2, 11, 2, 3, 2, 5, 2, 5], '1000000000100101': [7, 2, 3, 2, 3, 3, 5, 2, 3], '1000000001111111': [7, 2, 3, 2, 3, 2, 7, 2, 3], '1000000001100001': [11, 2, 3, 2, 3, 2, 239, 2, 3], '1000000010011101': [3, 2, 3, 2, 3, 2, 5, 41, 3], '1000000011001101': [3, 2, 3, 7, 3, 3, 5, 2, 3], '1000000010110101': [3, 2, 3, 2, 11, 2, 5, 2, 3], '1000000100000001': [3, 3, 11, 2, 3, 2, 3, 2, 5], '1000000011010011': [3, 2, 3, 2, 17, 2, 3, 149, 3], '1000000011100101': [3, 2, 3, 2, 7, 2, 5, 191, 3], '1000000000111001': [653, 2, 11, 2, 5, 2, 3, 2, 5], '1000000000111011': [3, 7963, 7, 2, 7, 2, 19, 2, 17], '1000000000011001': [11, 2, 3, 17, 3, 3, 67, 2, 3], '1000000000001101': [11, 2, 3, 3, 11, 2, 5, 131, 3], '1000000100010001': [16661, 2, 1039, 229, 3, 7, 137, 2, 19], '1000000000010001': [3, 3, 11, 2, 3, 2, 29, 3, 5], '1000000000110111': [3, 2, 3, 3, 3, 2, 11, 2, 3], '1000000000000111': [11, 2, 3, 2, 3, 3, 97, 2, 3], '1000000001111101': [31, 7, 7, 131, 367, 2, 5, 89, 7], '1000000011010001': [29761, 7, 17, 2, 3, 2, 13, 3, 7], '1000000001011011': [3, 2, 3, 2, 631, 3, 11, 2, 3], '1000000011011001': [3, 2, 3, 2, 3, 3, 7, 2, 3]}

# for i in xrange(len(binary_nos)):
# 	if checkFirstLastOne(binary_nos[i]):
# 		prime_flag=True
# 		# print binary_nos[i],int(binary_nos[i], 2) 
# 		if cnt<50:
# 			for j in range(2,11):
# 				if isPrime(int( toStr(int(binary_nos[i], 2) ,j))):
# 					prime_flag=False
# 			if prime_flag==True:
# 				fin_bin_no.append(binary_nos[i])
# 				cnt+=1
# 		else:
# 			break

inp=raw_input('')
num_binary_digits, num_results=map(int,raw_input('').split(' '))

binary_nos = [bin(x)[2:].rjust(num_binary_digits, '0') for x in range(2**num_binary_digits)]
for i in xrange(len(binary_nos)):
	if checkFirstLastOne(binary_nos[i]):
		prime_flag=True
		# print binary_nos[i],int(binary_nos[i], 2) 
		if cnt<int(num_results):
			for j in range(2,11):
				if isPrime(int( toStr(int(binary_nos[i], 2) ,j))):
					prime_flag=False
			if prime_flag==True:
				fin_bin_no.append(binary_nos[i])
				cnt+=1
		else:
			break
fo=open("prob3_out_2.txt","w")
fo.write("Case #1:")
for mm in range(len(fin_bin_no)):
	fo.write("\n")
	fo.write(fin_bin_no[mm]+" ")
	for j in range(2,11):
		div=divisor(int( toStr(int(fin_bin_no[mm], 2) ,j)))
		fo.write(str(div)+" ")
		divisor_dict.setdefault(fin_bin_no[mm], [])
		divisor_dict[fin_bin_no[mm]].append(div)
print divisor_dict
fo.close()

# print cnt,fin_bin_no
