{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import sys\n",
    "\n",
    "def ReadInts(fname):\n",
    "    with open(fname, 'r') as f:\n",
    "        read_data = f.read()\n",
    "    return list(map(str, read_data.strip().split()))\n",
    "\n",
    "fname = 'A-large.in'\n",
    "data = ReadInts(fname)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "------------------------Question 1------------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "import collections\n",
    "NUM = dict()\n",
    "NUM[0] = list('ZERO')\n",
    "NUM[1] = list('ONE')\n",
    "NUM[2] = list('TWO')\n",
    "NUM[3] = list('THREE')\n",
    "NUM[4] = list('FOUR')\n",
    "NUM[5] = list('FIVE')\n",
    "NUM[6] = list('SIX')\n",
    "NUM[7] = list('SEVEN')\n",
    "NUM[8] = list('EIGHT')\n",
    "NUM[9] = list('NINE')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def find_phone(set_S, freq_S):\n",
    "    back_up_freq = freq_S\n",
    "    light_up = []\n",
    "    if 'Z' in set_S:\n",
    "        num_zero = back_up_freq['Z']\n",
    "        for i in range(0, num_zero):\n",
    "            light_up.append(0)\n",
    "        for ch in NUM[0]:\n",
    "            back_up_freq[ch] = back_up_freq[ch] - num_zero\n",
    "    \n",
    "    if 'W' in set_S:\n",
    "        num_two = back_up_freq['W']\n",
    "        for i in range(0, num_two):\n",
    "            light_up.append(2)\n",
    "        for ch in NUM[2]:\n",
    "            back_up_freq[ch] = back_up_freq[ch] - num_two\n",
    "    \n",
    "    if 'U' in set_S:\n",
    "        num_four = back_up_freq['U']\n",
    "        for i in range(0, num_four):\n",
    "            light_up.append(4) \n",
    "        for ch in NUM[4]:\n",
    "            back_up_freq[ch] = back_up_freq[ch] - num_four\n",
    "\n",
    "    if 'X' in set_S:\n",
    "        num_six = back_up_freq['X']\n",
    "        for i in range(0, num_six):\n",
    "            light_up.append(6)        \n",
    "        for ch in NUM[6]:\n",
    "            back_up_freq[ch] = back_up_freq[ch] - num_six\n",
    "    \n",
    "    if 'O' in set_S: \n",
    "        num_one = back_up_freq['O']\n",
    "        for i in range(0, num_one):\n",
    "            light_up.append(1)\n",
    "        for ch in NUM[1]:\n",
    "            back_up_freq[ch] = back_up_freq[ch] - num_one\n",
    "\n",
    "    if 'R' in set_S: \n",
    "        num_THREE = back_up_freq['R']\n",
    "        for i in range(0, num_THREE):\n",
    "            light_up.append(3)\n",
    "        for ch in NUM[3]:\n",
    "            back_up_freq[ch] = back_up_freq[ch] - num_THREE\n",
    "    \n",
    "    if 'F' in set_S: \n",
    "        num_five = back_up_freq['F']\n",
    "        for i in range(0, num_five):\n",
    "            light_up.append(5)\n",
    "        for ch in NUM[5]:\n",
    "            back_up_freq[ch] = back_up_freq[ch] - num_five\n",
    "    \n",
    "    if 'V' in set_S: \n",
    "        num_seven = back_up_freq['V']\n",
    "        for i in range(0, num_seven):\n",
    "            light_up.append(7)\n",
    "        for ch in NUM[7]:\n",
    "            back_up_freq[ch] = back_up_freq[ch] - num_seven\n",
    "    \n",
    "    if 'T' in set_S: \n",
    "        num_eight = back_up_freq['T']\n",
    "        for i in range(0, num_eight):\n",
    "            light_up.append(8)\n",
    "        for ch in NUM[8]:\n",
    "            back_up_freq[ch] = back_up_freq[ch] - num_eight\n",
    "    \n",
    "    if 'I' in set_S: \n",
    "        num_nine = back_up_freq['I']\n",
    "        for i in range(0, num_nine):\n",
    "            light_up.append(9)\n",
    "        for ch in NUM[9]:\n",
    "            back_up_freq[ch] = back_up_freq[ch] - num_nine\n",
    "    return light_up, back_up_freq"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Case #1: 012\n",
      "Case #2: 2468\n",
      "Case #3: 114\n",
      "Case #4: 3\n",
      "Casen",
      "Case #6: 569\n",
      "Case #7: 0000000000000000000000000000000000000000000011111111111111111111111111111122222222222222222222222222222222222222222222222222333333333333333333333333333333333333333333333333333444444444444444444444444444444444444444444444444444555555555555555555555555555555555555555555555555555566666666666666666666666666666666666666667777777777777777777777777777777777777777788888888888888888888888888888888888888888888999999999999999999999999999999999\n",
      "Case #8: 00000000000001111111222222222222222333333444444444444444555555555556666666666666666777777777778888888888888999999999999999999\n",
      "Case #9: 000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111222222222222222222222222222222222222333333333333333333333333333344444444444444444444444444444444444444444445555555555555555555555555555555555555666666666666666666666666666666666666666777777777777777777777777777777777777777777777777777777788888888888888888888888888888888888888999999999999999999999999999999999999999999999\n",
      "Case #10: 112255\n",
      "Casen",
      "Case #12: 123456789\n",
      "Case #13: 000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111122222222222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333334444444444444444444444444444444444444444444444444444444444555555555555555555555555555555555555555555555555555555666666666666666666666666666666666666666666666666666666666677777777777777777777777777777777777777777777788888888888888888888888888888888888888888889999999999999999999999999999999999999999999\n",
      "Case #14: 01579\n",
      "Case #15: 0000000000111111111112222222333333333344444444444444445555555555666666666666666677777777777778888888999999999\n",
      "Case #16: 111122\n",
      "Case #17: 1179\n",
      "Casen",
      "Case #19: 000000000000000111111111111112222222223333333333333333444444444444444444455555555555555555666666666666666667777777777777888888888888888888889999999999\n",
      "Casen",
      "Case #21: 00\n",
      "Case #22: 99999\n",
      "Case #23: 1348\n",
      "Case #24: 112222\n",
      "Case #25: 111111\n",
      "Case #26: 012346789\n",
      "Casen",
      "Case #28: 116\n",
      "Case #29: 000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111112222222222222222222222222222222222222222222222233333333333333333333333333333333333333333334444444444444444444444444444444444444444445555555555555555555555555555555555555555555555666666666666666666666666666666666666666666666666677777777777777777777777777777777777777777777777777777777788888888888888888888888888888888888888888888888888889999999999999999999999999999999999999999999999999\n",
      "Case #30: 00001\n",
      "Case #31: 00000\n",
      "Case #32: 111222\n",
      "Case #33: 111227\n",
      "Case #34: 11999\n",
      "Case #35: 0\n",
      "Casen",
      "Case #37: 11111\n",
      "Case #38: 012345789\n",
      "Case #39: 00000000000000000000011111111111111111111222222222222222222222333333333333333333333333344444444444444444444455555555555555555555666666666666666666666667777777777777788888888888888888888899999999999999999999999\n",
      "Case #40: 1166\n",
      "Case #41: 7777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777777\n",
      "Case #42: 5679\n",
      "Casen",
      "Case #44: 012345678\n",
      "Case #45: 00000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111112222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333444444444444444444444444444444444444444444444444445555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666777777777777777777777777777777777777777777777777778888888888888888888888888888888888888888888888888899999999999999999999999999999999999999999999999999\n",
      "Case #46: 111112\n",
      "Case #47: 012356789\n",
      "Case #48: 222222\n",
      "Case #49: 0000000000000000000000000000000001111111111111111111111111111111111111111122222222222222222222222222222222222222222222222333333333333333333333333333333333333333333333333333333333344444444444444444444444444444444444444444444444555555555555555555555555555555555555555555555555555556666666666666666666666666666666666666666666677777777777777777777777777777777777777778888888888888888888888888888888888888999999999999999999999999999999999999999999999999999\n",
      "Case #50: 0000000000000000000000000000000000000000000000000011111111111111111111111111111111111111122222222222222222222222222222222222222222222222333333333333333333333333333333333333333333333333334444444444444444444444444444444444444444444444444444444444444555555555555555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666667777777777777777777777777777777777777777777777777788888888888888888888888888888888888888899999999999999999999999999999999999999999999999999999\n",
      "Case #51: 00000000000000000000000000000001111111111111111111111111111111111111111111111111112222222222222222222222222222222222222223333333333333333333333333333333333333444444444444444444444444444444444455555555555555555555555555555555555555555555556666666666666666666666666666666666666666666666677777777777777777777777777777777777777777777788888888888888888888888888888888888888888888888888889999999999999999999999999999999999999999\n",
      "Case #52: 11119\n",
      "Case #53: 000000000000000000111111111111112222222222222333333333333444444444445555555555555555566666666666667777777777777788888888888888888888888999999999\n",
      "Casen",
      "Case #55: 000000000000000000000000000000000000001111111111111111111111111111111111111111111111111111111111111222222222222222222222222222222222222222222222222333333333333333333333333333333333333333333333333333333344444444444444444444444444444444444444444444444444444455555555555555555555555555555555555555555555555555555555666666666666666666666666666666666666666666677777777777777777777777777777777777777777777777778888888888888888888888888888888888888888888888888888889999999999999999999999999999999999999999\n",
      "Case #56: 023456789\n",
      "Case #57: 000000000000000000000000000000000000000000000000000000001111111111111111111111111111111111111111111222222222222222222222222222222222222222222222333333333333333333333333333333333333333444444444444444444444444444444444444444444444444444444444444455555555555555555555555555555555555555556666666666666666666666666666666666666666666666666667777777777777777777777777777777777777777777778888888888888888888888888888888888888888888888888889999999999999999999999999999999999999999999999999\n",
      "Case #58: 0123456789\n",
      "Casen",
      "Case #60: 00000000000000000000000000000000111111111111111111111112222222222222222222222222222222333333333333333333333333333333333333333333333444444444444444444444444444444444444555555555555555555555555556666666666666666666666666666667777777777777777777777777777888888888888888888888888888888889999999999999999999999999999\n",
      "Case #61: 1799\n",
      "Case #62: 0000000000000000000000000000000000000000000000000000011111111111111111111111111111111111112222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333444444444444444444444444444444444444444444444444444444444445555555555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666666777777777777777777777777777777777777777777888888888888888888888888888888888888888888888888888888999999999999999999999999999999999999999999999999\n",
      "Case #63: 0000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111122222222222222222222222222222222222222222222222333333333333333333333333333333333333333333333333344444444444444444444444444444444444444444444444444445555555555555555555555555555555555555555555666666666666666666666666666666666666666666666666666666666666777777777777777777777777777777777777777777777778888888888888888888888888888888888888888888888888888888899999999999999999999999999999999999999999999999\n",
      "Casen",
      "Case #65: 000000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111111111111111111111222222222222222222222222222222222222222222222222333333333333333333333333333333333333333333333334444444444444444444444444444444444444444445555555555555555555555555555555555555555555555555555555556666666666666666666666666667777777777777777777777777777777777778888888888888888888888888888888888888888888888888888999999999999999999999999999999999999999999999999999999999999999999\n",
      "Case #66: 0000000000000000111111111111111222222222222222223333333333333334444444444445555555555555555666666666666667777777777777788888888888888999999999999\n",
      "Case #67: 000000000000000000001111111111111111111111111112222222222222222222223333333333333333333333333333444444444444444455555555555555555556666666666666666667777777777777777777778888888888888888888888999999999999\n",
      "Case #68: 149\n",
      "Casen",
      "Case #70: 0000000000000000000000000000000000000000000000000000000011111111111111111111111111111111111111111111111111222222222222222222222222222222222222222222222222333333333333333333333333333333333333333333333333344444444444444444444444444444444444444444444444444555555555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666667777777777777777777777777777777777777777777777777777888888888888888888888888888888888888888888888889999999999999999999999999999999999999999999999\n",
      "Case #71: 012345689\n",
      "Case #72: 01\n",
      "Case #73: 000000000000011111111122222222222222222222333333333333333334444444444444455555555555555566666666666666666666777777777777788888888888888899999999999999999\n",
      "Case #74: 000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111111111122222222222222222222222222222222222222222222222222222333333333333333333333333333333333333333333334444444444444444444444444444444444444444444444444455555555555555555555555555555555555555555555555555555666666666666666666666666666666666666666666666677777777777777777777777777777777777777777777777777888888888888888888888888888888888888888888888888888899999999999999999999999999999999999999999999999999\n",
      "Case #75: 49\n",
      "Case #76: 013456789\n",
      "Case #77: 1579\n",
      "Case #78: 00000000000000000000011111111111111111111111122222222222223333333333333333333333444444444444444444444445555555555555555555555555555555566666666666666666677777777777777777778888888888888889999999999999999999\n",
      "Case #79: 19999\n",
      "Case #80: 00000000000000000000000000000000000000000000000000111111111111111111111111111111111111111111111111112222222222222222222222222222222222222222222222222233333333333333333333333333333333333333333333333333444444444444444444444444444444444444444444444444445555555555555555555555555555555555555555555555555566666666666666666666666666666666666666666666666666777777777777777777777777777777777777777777777777778888888888888888888888888888888888888888888888888899999999999999999999999999999999999999999999999999\n",
      "Case #81: 1779\n",
      "Case #82: 11199\n",
      "Case #83: 000000000000000000000000000000000000000000000000000000000111111111111111111111111111111111111111122222222222222222222222222222222222222222333333333333333333333333333333333333333333333333333333344444444444444444444444444444444444444444444444444444555555555555555555555555555555555555666666666666666666666666666666666666666666777777777777777777777777777777777777777777777777788888888888888888888888888888888888888888888888888888888888889999999999999999999999999999999999999999999999999999999\n",
      "Case #84: 012345679\n",
      "Case #85: 00000000000000000000000000000111111111111111111111111111111111111112222222222222222222222222222222222233333333333333333333333333333334444444444444444444444444444455555555555555555555555555555566666666666666666666666666677777777777777777777777777777777778888888888888888888888889999999999999999999999999999\n",
      "Case #86: 4567\n",
      "Case #87: 122222\n",
      "Case #88: 0000000000000000000000000000000111111111111111111111111111111111111111122222222222222222222222222222222222223333333333333333333333333333333333333333333333333333333334444444444444444444444444444444444444444444555555555555555555555555555555555555555556666666666666666666666666666666666666666777777777777777777777777777777777777777777778888888888888888888888888888888888889999999999999999999999999999\n",
      "Case #89: 1169\n",
      "Case #90: 0000000000000000000000111111111111111111111111111112222222222222222223333333333333333333333344444444444444444444444555555555555555666666666666666666777777777777777777888888888888888999999999999999999999\n",
      "Case #91: 000000000000000000000000000000000000000000001111111111111111111111111111111111111112222222222222222222222222222222222222222222222223333333333333333333333333333333333333333333334444444444444444444444444444444444444444444444444445555555555555555555555555555555555555566666666666666666666666666666666666666677777777777777777777777777777777888888888888888888888888888888888888888888888889999999999999999999999999999999999999\n",
      "Case #92: 1\n",
      "Case #93: 467\n",
      "Case #94: 8\n",
      "Case #95: 148\n",
      "Case #96: 012456789\n",
      "Case #97: 000000000000000111111111111111111122222222233333333333333444444444444444444455555555555566666666667777777777777777788888888888888888888999999999999999\n",
      "Case #98: 000000000000000000000000000000000000000000000111111111111111111111111111111111111222222222222222222222222223333333333333333333333333333333333333333333344444444444444444444444444444444444444444444555555555555555555555555555555555555555556666666666666666666666666666666666666666666677777777777777777777777777777777888888888888888888888888888888888888888899999999999999999999999999999999999999999\n",
      "Case #99: 111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333333444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444444888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888888\n",
      "Case #100: 0000000000000000000000000000000001111111111111111111111111111111222222222222222222222222222222222223333333333333333333333333333333333333333333333344444444444444444444444444444444444444444444444555555555555555555555555555555555555666666666666666666666666667777777777777777777777777777777788888888888888888888888888888899999999999999999999999999999999999\n"
     ]
    }
   ],
   "source": [
    "T = int(data[0])\n",
    "counter = 1\n",
    "for i in range(1,T+1):\n",
    "    S = data[counter]\n",
    "    set_S = set(S)\n",
    "    freq_S = collections.Counter(S)\n",
    "    light_up, back_up_freq = find_phone(set_S, freq_S)\n",
    "    s_light_up = sorted(light_up)\n",
    "    my_lst_str = ''.join(map(str, s_light_up))\n",
    "    print 'Case #%d: %s' %(i, my_lst_str)\n",
    "    #print back_up_freq\n",
    "    counter = counter+1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Counter({'N': 9, 'E': 5, 'I': 4, 'O': 1})\n",
      "NINENNNEINNEIENONEI\n"
     ]
    }
   ],
   "source": [
    "freq_S = collections.Counter(S)\n",
    "print freq_S\n",
    "print S"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Counter({'H': 1, 'R': 1, 'E': 1, 'T': 1})"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "freq_S['E'] = freq_S['E'] - 1\n",
    "freq_S\n",
    "\n",
    "for key, value in NUM.iteritems():\n",
    "        light_flag = True\n",
    "        for char in value:\n",
    "            if back_up_freq[char] == 0:\n",
    "                light_flag = False\n",
    "                break\n",
    "        if light_flag:\n",
    "            light_up.append(key)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "------------------------Question 3------------------------"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Case #1: 1\n",
      "Case #2: 0\n",
      "Case #3: 0\n",
      "Case #4: 21\n",
      "Case #5: 120\n",
      "Case #6: 115\n",
      "Case #7: 162\n",
      "Case #8: 104\n",
      "Case #9: 11\n",
      "Case #10: 108\n",
      "Case #11: 243\n",
      "Case #12: 101\n",
      "Case #13: 3\n",
      "Case #14: 0\n",
      "Case #15: 4\n",
      "Case #16: 90\n",
      "Case #17: 52\n",
      "Case #18: 54\n",
      "Case #19: 328\n",
      "Case #20: 245\n",
      "Case #21: 569\n",
      "Case #22: 40\n",
      "Case #23: 456\n",
      "Case #24: 43\n",
      "Case #25: 665\n",
      "Case #26: 268\n",
      "Case #27: 68\n",
      "Case #28: 237\n",
      "Case #29: 65\n",
      "Case #30: 190\n",
      "Case #31: 188\n",
      "Case #32: 748\n",
      "Case #33: 77\n",
      "Case #34: 23\n",
      "Case #35: 110\n",
      "Case #36: 136\n",
      "Case #37: 64\n",
      "Case #38: 6\n",
      "Case #39: 65\n",
      "Case #40: 93\n",
      "Case #41: 82\n",
      "Case #42: 295\n",
      "Case #43: 103\n",
      "Case #44: 60\n",
      "Case #45: 252\n",
      "Case #46: 205\n",
      "Case #47: 114\n",
      "Case #48: 560\n",
      "Case #49: 63\n",
      "Case #50: 130\n",
      "Case #51: 104\n",
      "Case #52: 89\n",
      "Case #53: 139\n",
      "Case #54: 64\n",
      "Case #55: 720\n",
      "Case #56: 244\n",
      "Case #57: 101\n",
      "Case #58: 202\n",
      "Case #59: 113\n",
      "Case #60: 17\n",
      "Case #61: 749\n",
      "Case #62: 171\n",
      "Case #63: 59\n",
      "Case #64: 35\n",
      "Case #65: 211\n",
      "Case #66: 233\n",
      "Case #67: 108\n",
      "Case #68: 62\n",
      "Case #69: 106\n",
      "Case #70: 99\n",
      "Case #71: 64\n",
      "Case #72: 48\n",
      "Case #73: 155\n",
      "Case #74: 40\n",
      "Case #75: 18\n",
      "Case #76: 252\n",
      "Case #77: 64\n",
      "Case #78: 145\n",
      "Case #79: 80\n",
      "Case #80: 26\n",
      "Case #81: 330\n",
      "Case #82: 6\n",
      "Case #83: 118\n",
      "Case #84: 133\n",
      "Case #85: 749\n",
      "Case #86: 168\n",
      "Case #87: 6\n",
      "Case #88: 56\n",
      "Case #89: 888\n",
      "Case #90: 182\n",
      "Case #91: 111\n",
      "Case #92: 111\n",
      "Case #93: 147\n",
      "Case #94: 51\n",
      "Case #95: 229\n",
      "Case #96: 329\n",
      "Case #97: 135\n",
      "Case #98: 108\n",
      "Case #99: 94\n",
      "Case #100: 832\n"
     ]
    }
   ],
   "source": [
    "T = int(data[0])\n",
    "counter = 1\n",
    "for i in range(1,T+1):\n",
    "    graph = dict()\n",
    "    N = int(data[counter])\n",
    "    counter = counter + 1\n",
    "    for j in range(0, N):\n",
    "        word1 = data[counter]+'1'\n",
    "        word2 = data[counter+1]+'2'\n",
    "        counter = counter+2\n",
    "        if word1 not in graph:\n",
    "            graph[word1] = set()\n",
    "        graph[word1].add(word2)\n",
    "        if word2 not in graph:\n",
    "            graph[word2] = set()\n",
    "        graph[word2].add(word1)\n",
    "    res = bipartiteMatch(graph)\n",
    "    M = len(res[0])/2\n",
    "    V = len(graph)\n",
    "    min_edge_cover = V - M\n",
    "    dup = N - min_edge_cover\n",
    "    print 'Case #%d: %d' %(i, dup)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "N"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "# Hopcroft-Karp bipartite max-cardinality matching and max independent set\n",
    "# David Eppstein, UC Irvine, 27 Apr 2002\n",
    "\n",
    "def bipartiteMatch(graph):\n",
    "\t'''Find maximum cardinality matching of a bipartite graph (U,V,E).\n",
    "\tThe input format is a dictionary mapping members of U to a list\n",
    "\tof their neighbors in V.  The output is a triple (M,A,B) where M is a\n",
    "\tdictionary mapping members of V to their matches in U, A is the part\n",
    "\tof the maximum independent set in U, and B is the part of the MIS in V.\n",
    "\tThe same object may occur in both U and V, and is treated as two\n",
    "\tdistinct vertices if this happens.'''\n",
    "\t\n",
    "\t# initialize greedy matching (redundant, but faster than full search)\n",
    "\tmatching = {}\n",
    "\tfor u in graph:\n",
    "\t\tfor v in graph[u]:\n",
    "\t\t\tif v not in matching:\n",
    "\t\t\t\tmatching[v] = u\n",
    "\t\t\t\tbreak\n",
    "\t\n",
    "\twhile 1:\n",
    "\t\t# structure residual graph into layers\n",
    "\t\t# pred[u] gives the neighbor in the previous layer for u in U\n",
    "\t\t# preds[v] gives a list of neighbors in the previous layer for v in V\n",
    "\t\t# unmatched gives a list of unmatched vertices in final layer of V,\n",
    "\t\t# and is also used as a flag value for pred[u] when u is in the first layer\n",
    "\t\tpreds = {}\n",
    "\t\tunmatched = []\n",
    "\t\tpred = dict([(u,unmatched) for u in graph])\n",
    "\t\tfor v in matching:\n",
    "\t\t\tdel pred[matching[v]]\n",
    "\t\tlayer = list(pred)\n",
    "\t\t\n",
    "\t\t# repeatedly extend layering structure by another pair of layers\n",
    "\t\twhile layer and not unmatched:\n",
    "\t\t\tnewLayer = {}\n",
    "\t\t\tfor u in layer:\n",
    "\t\t\t\tfor v in graph[u]:\n",
    "\t\t\t\t\tif v not in preds:\n",
    "\t\t\t\t\t\tnewLayer.setdefault(v,[]).append(u)\n",
    "\t\t\tlayer = []\n",
    "\t\t\tfor v in newLayer:\n",
    "\t\t\t\tpreds[v] = newLayer[v]\n",
    "\t\t\t\tif v in matching:\n",
    "\t\t\t\t\tlayer.append(matching[v])\n",
    "\t\t\t\t\tpred[matching[v]] = v\n",
    "\t\t\t\telse:\n",
    "\t\t\t\t\tunmatched.append(v)\n",
    "\t\t\n",
    "\t\t# did we finish layering without finding any alternating paths?\n",
    "\t\tif not unmatched:\n",
    "\t\t\tunlayered = {}\n",
    "\t\t\tfor u in graph:\n",
    "\t\t\t\tfor v in graph[u]:\n",
    "\t\t\t\t\tif v not in preds:\n",
    "\t\t\t\t\t\tunlayered[v] = None\n",
    "\t\t\treturn (matching,list(pred),list(unlayered))\n",
    "\n",
    "\t\t# recursively search backward through layers to find alternating paths\n",
    "\t\t# recursion returns true if found path, false otherwise\n",
    "\t\tdef recurse(v):\n",
    "\t\t\tif v in preds:\n",
    "\t\t\t\tL = preds[v]\n",
    "\t\t\t\tdel preds[v]\n",
    "\t\t\t\tfor u in L:\n",
    "\t\t\t\t\tif u in pred:\n",
    "\t\t\t\t\t\tpu = pred[u]\n",
    "\t\t\t\t\t\tdel pred[u]\n",
    "\t\t\t\t\t\tif pu is unmatched or recurse(pu):\n",
    "\t\t\t\t\t\t\tmatching[v] = u\n",
    "\t\t\t\t\t\t\treturn 1\n",
    "\t\t\treturn 0\n",
    "\n",
    "\t\tfor v in unmatched: recurse(v)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#back up\n",
    "A = '/home/sec/happy'\n",
    "A.split('/')"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
