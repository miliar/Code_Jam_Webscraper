{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Populating the interactive namespace from numpy and matplotlib\n"
     ]
    }
   ],
   "source": [
    "%pylab inline\n",
    "from collections import Counter\n",
    "\n",
    "def print_answer(ans):\n",
    "    with open(\"output.txt\", \"w\") as ouf:\n",
    "        for i, x in enumerate(ans):\n",
    "            line = 'Case #%d: %s\\n' % (i + 1, str(x))\n",
    "            print line\n",
    "            ouf.write(line)\n",
    "\n",
    "            \n",
    "def read_input():\n",
    "    with open(\"input.txt\", \"r\") as fin:\n",
    "        input_ar = map(int, fin.readlines())\n",
    "    return input_ar"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Task 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Case #1: 012\n",
      "\n",
      "Case #2: 2468\n",
      "\n",
      "Case #3: 114\n",
      "\n",
      "Case #4: 3\n",
      "\n",
      "Case #5: 459\n",
      "\n",
      "Case #6: 00000\n",
      "\n",
      "Case #7: 068\n",
      "\n",
      "Case #8: 12689\n",
      "\n",
      "Case #9: 1189\n",
      "\n",
      "Case #10: 3688\n",
      "\n",
      "Case #11: 111111\n",
      "\n",
      "Case #12: 111222\n",
      "\n",
      "Case #13: 19999\n",
      "\n",
      "Case #14: 78\n",
      "\n",
      "Case #15: 569\n",
      "\n",
      "Case #16: 138\n",
      "\n",
      "Case #17: 4567\n",
      "\n",
      "Case #18: 119\n",
      "\n",
      "Case #19: 11199\n",
      "\n",
      "Case #20: 1238\n",
      "\n",
      "Case #21: 00\n",
      "\n",
      "Case #22: 49\n",
      "\n",
      "Case #23: 11119\n",
      "\n",
      "Case #24: 1799\n",
      "\n",
      "Case #25: 178\n",
      "\n",
      "Case #26: 5\n",
      "\n",
      "Case #27: 5599\n",
      "\n",
      "Case #28: 12256\n",
      "\n",
      "Case #29: 01445\n",
      "\n",
      "Case #30: 334\n",
      "\n",
      "Case #31: 1455\n",
      "\n",
      "Case #32: 01267\n",
      "\n",
      "Case #33: 5\n",
      "\n",
      "Case #34: 1579\n",
      "\n",
      "Case #35: 122222\n",
      "\n",
      "Case #36: 179\n",
      "\n",
      "Case #37: 0\n",
      "\n",
      "Case #38: 68\n",
      "\n",
      "Case #39: 33\n",
      "\n",
      "Case #40: 99999\n",
      "\n",
      "Case #41: 5\n",
      "\n",
      "Case #42: 00158\n",
      "\n",
      "Case #43: 12568\n",
      "\n",
      "Case #44: 9\n",
      "\n",
      "Case #45: 8\n",
      "\n",
      "Case #46: 39\n",
      "\n",
      "Case #47: 1166\n",
      "\n",
      "Case #48: 37\n",
      "\n",
      "Case #49: 01579\n",
      "\n",
      "Case #50: 237\n",
      "\n",
      "Case #51: 25568\n",
      "\n",
      "Case #52: 0239\n",
      "\n",
      "Case #53: 3\n",
      "\n",
      "Case #54: 3\n",
      "\n",
      "Case #55: 02479\n",
      "\n",
      "Case #56: 467\n",
      "\n",
      "Case #57: 1\n",
      "\n",
      "Case #58: 1119\n",
      "\n",
      "Case #59: 55\n",
      "\n",
      "Case #60: 1179\n",
      "\n",
      "Case #61: 111112\n",
      "\n",
      "Case #62: 458\n",
      "\n",
      "Case #63: 29\n",
      "\n",
      "Case #64: 11111\n",
      "\n",
      "Case #65: 04\n",
      "\n",
      "Case #66: 222222\n",
      "\n",
      "Case #67: 1\n",
      "\n",
      "Case #68: 112222\n",
      "\n",
      "Case #69: 17\n",
      "\n",
      "Case #70: 1679\n",
      "\n",
      "Case #71: 11999\n",
      "\n",
      "Case #72: 0557\n",
      "\n",
      "Case #73: 116\n",
      "\n",
      "Case #74: 112255\n",
      "\n",
      "Case #75: 889\n",
      "\n",
      "Case #76: 148\n",
      "\n",
      "Case #77: 2558\n",
      "\n",
      "Case #78: 5679\n",
      "\n",
      "Case #79: 3\n",
      "\n",
      "Case #80: 149\n",
      "\n",
      "Case #81: 1779\n",
      "\n",
      "Case #82: 01\n",
      "\n",
      "Case #83: 56\n",
      "\n",
      "Case #84: 111227\n",
      "\n",
      "Case #85: 6\n",
      "\n",
      "Case #86: 1169\n",
      "\n",
      "Case #87: 00001\n",
      "\n",
      "Case #88: 468\n",
      "\n",
      "Case #89: 1348\n",
      "\n",
      "Case #90: 036\n",
      "\n",
      "Case #91: 278\n",
      "\n",
      "Case #92: 2348\n",
      "\n",
      "Case #93: 06\n",
      "\n",
      "Case #94: 0278\n",
      "\n",
      "Case #95: 8\n",
      "\n",
      "Case #96: 1226\n",
      "\n",
      "Case #97: 111122\n",
      "\n",
      "Case #98: 0355\n",
      "\n",
      "Case #99: 3456\n",
      "\n",
      "Case #100: 0349\n",
      "\n"
     ]
    }
   ],
   "source": [
    "def read_input_a():\n",
    "    with open(\"input.txt\", \"r\") as fin:\n",
    "        input_ar = fin.readlines()\n",
    "    return input_ar[1:]\n",
    "\n",
    "\n",
    "\n",
    "def gen_number(word):\n",
    "    names = [\"ZERO\", \"ONE\", \"TWO\", \"THREE\", \"FOUR\", \"FIVE\", \"SIX\", \"SEVEN\", \"EIGHT\", \"NINE\"];\n",
    "    order =  [0, 6, 4, 5, 8, 9, 7, 2, 1, 3]\n",
    "    letter = 'ZXUFGIVWNT'\n",
    "    \n",
    "    cnt = Counter(word)\n",
    "    \n",
    "    ans = []\n",
    "    for i in range(10):\n",
    "        x = order[i]\n",
    "        c = letter[i]\n",
    "        while cnt[c] > 0:\n",
    "            ans.append(str(x))\n",
    "            cnt -= Counter(names[x])\n",
    "    return ''.join(sorted(ans))\n",
    "\n",
    "\n",
    "lines = read_input_a()\n",
    "ans = map(gen_number, lines)\n",
    "print_answer(ans)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Task 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Task 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
