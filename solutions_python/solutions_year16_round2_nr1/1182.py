{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "mat = np.zeros((26,10))\n",
    "\n",
    "def set_letter(col, letter, mul):\n",
    "    mat[ord(letter)-65, col] = mul\n",
    "\n",
    "def inc_letter(vec, letter):\n",
    "    vec[ord(letter)-65] += 1\n",
    "\n",
    "set_letter(0, 'Z', 1)\n",
    "set_letter(0, 'E', 1)\n",
    "set_letter(0, 'R', 1)\n",
    "set_letter(0, 'O', 1)\n",
    "set_letter(1, 'E', 1)\n",
    "set_letter(1, 'N', 1)\n",
    "set_letter(1, 'O', 1)\n",
    "set_letter(2, 'T', 1)\n",
    "set_letter(2, 'W', 1)\n",
    "set_letter(2, 'O', 1)\n",
    "set_letter(3, 'T', 1)\n",
    "set_letter(3, 'H', 1)\n",
    "set_letter(3, 'R', 1)\n",
    "set_letter(3, 'E', 2)\n",
    "set_letter(4, 'F', 1)\n",
    "set_letter(4, 'O', 1)\n",
    "set_letter(4, 'U', 1)\n",
    "set_letter(4, 'R', 1)\n",
    "set_letter(5, 'F', 1)\n",
    "set_letter(5, 'I', 1)\n",
    "set_letter(5, 'V', 1)\n",
    "set_letter(5, 'E', 1)\n",
    "set_letter(6, 'S', 1)\n",
    "set_letter(6, 'I', 1)\n",
    "set_letter(6, 'X', 1)\n",
    "set_letter(7, 'S', 1)\n",
    "set_letter(7, 'E', 2)\n",
    "set_letter(7, 'V', 1)\n",
    "set_letter(7, 'N', 1)\n",
    "set_letter(8, 'E', 1)\n",
    "set_letter(8, 'I', 1)\n",
    "set_letter(8, 'G', 1)\n",
    "set_letter(8, 'H', 1)\n",
    "set_letter(8, 'T', 1)\n",
    "set_letter(9, 'N', 2)\n",
    "set_letter(9, 'I', 1)\n",
    "set_letter(9, 'E', 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Case #1: 012\n",
      "Case #2: 2468\n",
      "Case #3: 114\n",
      "Case #4: 3\n",
      "Case #5: 8\n",
      "Case #6: 3\n",
      "Case #7: 79\n",
      "Case #8: 22356\n",
      "Case #9: 1234\n",
      "Case #10: 156\n",
      "Case #11: 0\n",
      "Case #12: 3\n",
      "Case #13: 24668\n",
      "Case #14: 1238\n",
      "Case #15: 1169\n",
      "Case #16: 111111\n",
      "Case #17: 1579\n",
      "Case #18: 0135\n",
      "Case #19: 01122\n",
      "Case #20: 1\n",
      "Case #21: 0045\n",
      "Case #22: 569\n",
      "Case #23: 0\n",
      "Case #24: 01579\n",
      "Case #25: 11199\n",
      "Case #26: 01\n",
      "Case #27: 01467\n",
      "Case #28: 12379\n",
      "Case #29: 11111\n",
      "Case #30: 13468\n",
      "Case #31: 367\n",
      "Case #32: 159\n",
      "Case #33: 0\n",
      "Case #34: 334\n",
      "Case #35: 3458\n",
      "Case #36: 1179\n",
      "Case #37: 0567\n",
      "Case #38: 4\n",
      "Case #39: 144\n",
      "Case #40: 111122\n",
      "Case #41: 111222\n",
      "Case #42: 39\n",
      "Case #43: 222222\n",
      "Case #44: 19999\n",
      "Case #45: 157\n",
      "Case #46: 499\n",
      "Case #47: 378\n",
      "Case #48: 6\n",
      "Case #49: 149\n",
      "Case #50: 38\n",
      "Case #51: 1166\n",
      "Case #52: 122222\n",
      "Case #53: 1779\n",
      "Case #54: 00001\n",
      "Case #55: 148\n",
      "Case #56: 00\n",
      "Case #57: 56\n",
      "Case #58: 11999\n",
      "Case #59: 11119\n",
      "Case #60: 2579\n",
      "Case #61: 038\n",
      "Case #62: 8\n",
      "Case #63: 0579\n",
      "Case #64: 111227\n",
      "Case #65: 5\n",
      "Case #66: 4567\n",
      "Case #67: 28\n",
      "Case #68: 2499\n",
      "Case #69: 18\n",
      "Case #70: 014\n",
      "Case #71: 225\n",
      "Case #72: 00000\n",
      "Case #73: 116\n",
      "Case #74: 157\n",
      "Case #75: 0045\n",
      "Case #76: 0224\n",
      "Case #77: 99999\n",
      "Case #78: 112222\n",
      "Case #79: 1678\n",
      "Case #80: 0\n",
      "Case #81: 59\n",
      "Case #82: 111112\n",
      "Case #83: 112255\n",
      "Case #84: 467\n",
      "Case #85: 1799\n",
      "Case #86: 02569\n",
      "Case #87: 1348\n",
      "Case #88: 6\n",
      "Case #89: 1\n",
      "Case #90: 0477\n",
      "Case #91: 489\n",
      "Case #92: 159\n",
      "Case #93: 467\n",
      "Case #94: 5679\n",
      "Case #95: 13\n",
      "Case #96: 46\n",
      "Case #97: 49\n",
      "Case #98: 0134\n",
      "Case #99: 11256\n",
      "Case #100: 015\n"
     ]
    }
   ],
   "source": [
    "# I'm running this in docker since I don't have numpy on my system, hence the file opening\n",
    "with open(\"A-large.in\") as f:\n",
    "    with open(\"A-large.out\", \"w\") as g:\n",
    "        n = int(f.readline())\n",
    "        for i in range(0, n):\n",
    "            word = f.readline().strip()\n",
    "            wordvec = np.zeros((26,))\n",
    "            for c in word:\n",
    "                inc_letter(wordvec, c)\n",
    "            multiplicities = np.around(np.linalg.lstsq(mat, wordvec)[0])\n",
    "            solution = \"\"\n",
    "            for digit, mul in enumerate(multiplicities):\n",
    "                solution = solution + str(digit)*int(mul)\n",
    "            out = \"Case #{}: {}\\n\".format(i+1, solution)\n",
    "            g.write(out)\n",
    "            print(out.strip())\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
