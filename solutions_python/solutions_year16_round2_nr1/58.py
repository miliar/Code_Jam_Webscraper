def mmul(a, y):
    ans = [0] * len(b)
    for i in xrange(len(b)):
        for j in xrange(len(y)):
            ans[i] += a[i][j] * y[j]
    return ans

def count(s, c):
    return sum(1 if u == c else 0 for u in s)

def print_A():
    words = ["ZERO", "ONE", "TWO", "THREE", "FOUR", "FIVE", "SIX", "SEVEN", "EIGHT", "NINE"]
    for c in xrange(26):
        row = ''
        for w in words:
            row += str(count(w, chr(ord('A') + c)))
            row += ' '
        print row

# print_A()

# # A = (number of certain letters in each word)
# 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0
# 1 1 0 2 0 1 0 2 1 1
# 0 0 0 0 1 1 0 0 0 0
# 0 0 0 0 0 0 0 0 1 0
# 0 0 0 1 0 0 0 0 1 0
# 0 0 0 0 0 1 1 0 1 1
# 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0
# 0 1 0 0 0 0 0 1 0 2
# 1 1 1 0 1 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0
# 1 0 0 1 1 0 0 0 0 0
# 0 0 0 0 0 0 1 1 0 0
# 0 0 1 1 0 0 0 0 1 0
# 0 0 0 0 1 0 0 0 0 0
# 0 0 0 0 0 1 0 1 0 0
# 0 0 1 0 0 0 0 0 0 0
# 0 0 0 0 0 0 1 0 0 0
# 0 0 0 0 0 0 0 0 0 0
# 1 0 0 0 0 0 0 0 0 0

# generalized inverse found using http://www.bluebit.gr/matrix-calculator/
inverse = '''0.000000000000000  0.000000000000000  0.000000000000000  0.000000000000000  0.011250000000002 -0.189711538461537  0.137307692307690 -0.164615384615383  0.127403846153846  0.000000000000000  0.000000000000000  0.000000000000000  0.000000000000000 -0.069326923076925  0.058076923076926  0.000000000000000  0.000000000000000  0.253461538461536 -0.004230769230771 -0.111346153846155 -0.121826923076925  0.051057692307691  0.053269230769228 -0.123173076923074  0.000000000000000  0.677211538461534
 0.000000000000000  0.000000000000000  0.000000000000000  0.000000000000000  0.327500000000000  0.075576923076924 -0.105384615384616  0.190769230769231 -0.120192307692308  0.000000000000000  0.000000000000000  0.000000000000000  0.000000000000000 -0.103653846153846  0.776153846153846  0.000000000000000  0.000000000000000 -0.553076923076923 -0.268461538461539 -0.292692307692308 -0.298653846153847 -0.282884615384616 -0.483461538461538  0.388653846153846  0.000000000000000 -0.550576923076923
 0.000000000000000  0.000000000000000  0.000000000000000  0.000000000000000 -0.122500000000000 -0.028269230769231 -0.136153846153847 -0.147692307692307  0.014423076923077  0.000000000000000  0.000000000000000  0.000000000000000  0.000000000000000  0.054038461538461  0.068461538461539  0.000000000000000  0.000000000000000  0.000769230769230  0.054615384615384  0.391923076923077 -0.040961538461539  0.136346153846153  0.539615384615384 -0.069038461538461  0.000000000000000  0.053269230769230
 0.000000000000000  0.000000000000000  0.000000000000000  0.000000000000000  0.224999999999999  0.051923076923077 -0.484615384615383  0.169230769230769 -0.067307692307693  0.000000000000000  0.000000000000000  0.000000000000000  0.000000000000000 -0.078846153846153 -0.146153846153848  0.000000000000000  0.000000000000000  0.223076923076924 -0.161538461538461  0.157692307692308 -0.128846153846153 -0.209615384615384 -0.011538461538460  0.228846153846152  0.000000000000000 -0.301923076923075
 0.000000000000000  0.000000000000000  0.000000000000000  0.000000000000000 -0.151250000000002  0.234326923076922  0.179615384615387  0.050769230769230 -0.088942307692308  0.000000000000000  0.000000000000000  0.000000000000000  0.000000000000000  0.120096153846155  0.031153846153844  0.000000000000000  0.000000000000000  0.241923076923079  0.176538461538464  0.009807692307694  0.492596153846156  0.005865384615386 -0.040961538461536 -0.087596153846157  0.000000000000000 -0.121826923076920
 0.000000000000000  0.000000000000000  0.000000000000000  0.000000000000000  0.152500000000001  0.342884615384616 -0.266923076923078 -0.086153846153845  0.274038461538462  0.000000000000000  0.000000000000000  0.000000000000000  0.000000000000000 -0.213269230769232  0.060769230769233  0.000000000000000  0.000000000000000 -0.145384615384617 -0.322307692307693 -0.073461538461539 -0.258269230769232  0.230576923076922  0.012692307692306  0.048269230769233  0.000000000000000 -0.067884615384617
 0.000000000000000  0.000000000000000  0.000000000000000  0.000000000000000 -0.003750000000001 -0.039326923076923 -0.199615384615384  0.029230769230769  0.213942307692308  0.000000000000000  0.000000000000000  0.000000000000000  0.000000000000000 -0.105096153846153  0.108846153846153  0.000000000000000  0.000000000000000  0.018076923076924  0.283461538461539 -0.039807692307692 -0.087596153846153 -0.170865384615384 -0.069038461538461  0.502596153846153  0.000000000000000 -0.123173076923076
 0.000000000000000  0.000000000000000  0.000000000000000  0.000000000000000  0.038750000000000 -0.106442307692308  0.293461538461539 -0.096923076923077 -0.262019230769231  0.000000000000000  0.000000000000000  0.000000000000000  0.000000000000000  0.111634615384616 -0.150384615384616  0.000000000000000  0.000000000000000 -0.007307692307692  0.481153846153846  0.026730769230770  0.264134615384616  0.329711538461539  0.123653846153847 -0.219134615384616  0.000000000000000  0.118942307692308
 0.000000000000000  0.000000000000000  0.000000000000000 -0.000000000000001 -0.045000000000000 -0.087307692307692  0.681538461538461  0.196923076923077  0.105769230769231  0.000000000000000  0.000000000000000  0.000000000000000  0.000000000000000 -0.030384615384616  0.075384615384616  0.000000000000000  0.000000000000000 -0.167692307692308  0.093846153846153  0.060769230769230  0.179615384615384  0.026538461538461 -0.136153846153847 -0.199615384615384  0.000000000000000  0.137307692307691
 0.000000000000000  0.000000000000000  0.000000000000000  0.000000000000000 -0.135000000000000 -0.031153846153847 -0.109230769230769 -0.101538461538462  0.240384615384615  0.000000000000000  0.000000000000000  0.000000000000000  0.000000000000000  0.447307692307692 -0.312307692307692  0.000000000000000  0.000000000000000  0.266153846153846 -0.103076923076923  0.105384615384616  0.077307692307693 -0.074230769230769  0.206923076923077 -0.137307692307692  0.000000000000000  0.181153846153846'''

b = []
for row in inverse.split('\n'):
    t = []
    for x in row.strip().split(' '):
        if x:
            t.append(float(x))
    b.append(t)

# print b
# print len(b)
# print [len(b[i]) for i in xrange(len(b))]


test_count = int(raw_input().strip())
for test in xrange(1, test_count + 1):
    s = raw_input().strip()
    y = [0] * 26
    for c in s:
        y[ord(c)-ord('A')] += 1
    x = mmul(b, y)
    x = [int(round(c)) for c in x]
    ans = ''
    for d in xrange(len(x)):
        ans += str(d) * x[d]
    print 'Case #{}: {}'.format(test, ans)
