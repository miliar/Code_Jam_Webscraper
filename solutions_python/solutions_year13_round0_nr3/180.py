import time

#inputFileName = "test.in"
#inputFileName = "C-small-attempt0.in"
#inputFileName = "C-small-attempt1.in"
#inputFileName = "C-small-attempt2.in"
#inputFileName = "C-large-1.in"
inputFileName = "C-large-2.in"
outputFileName = inputFileName[:-3] + ".out"

startTime = time.time()
print startTime


def calcSingleTest(f):
    line = f.readline()
    a = int(line.split()[0])
    b = int(line.split()[1])
    return findAllGood3Cnt(a, b)


def isPalindrome(x):
    strX = str(x)
    return strX == strX[::-1]


def findAllGood(m):
    good = []
    for x in xrange(1, m):
        #if (x % 10000) == 0: print x
        #if (x % 10) == 0: continue
        strX = str(x)
        str1 = strX[:-1] + strX[::-1]
        str2 = strX + strX[::-1]
        #print strX + " - " + str1 + " - " + str2
        x1 = int(str1)
        x2 = int(str2)
        sq1 = x1 * x1
        sq2 = x2 * x2
        if isPalindrome(sq1):
            good.append(sq1)
            #print str(x1) + " - " + str(sq1) + "   " + str(len(str(sq1)))
        if isPalindrome(sq2):
            good.append(sq2)
            #print str(x2) + " - " + str(sq2) + "   " + str(len(str(sq2)))
    return good


def findAllGood2(a, b):
    good = []

    def checkAndAdd(x):
        x2 = x * x
        if isPalindrome(x2):
            if(a <= x2) and (x2 <= b):
                good.append(x)
                #good.append(x2)
                #print(x2)
            return True
        else:
            return False

    def checkAndAddStr(strX):
        str1 = strX[:-1] + strX[::-1]
        str2 = strX + strX[::-1]
        #print strX + " - " + str1 + " - " + str2
        x1 = int(str1)
        x2 = int(str2)
        r1 = checkAndAdd(x1)
        r2 = checkAndAdd(x2)
        return  r1 or r2

    checkAndAdd(3)
    minLen = len(str(a)) / 4
    if minLen < 1: minLen = 1
    maxLen = len(str(b)) / 4 + 1
    #print 'a={0}, b={1}, minLen={2}, maxLen={3}'.format(a, b, minLen, maxLen)
    for l in xrange(minLen, maxLen + 1):
        for x in xrange(1 << (l - 1), 1 << l):
            s = "{0:b}".format(x)
            #print "s = " + str(s)
            if checkAndAddStr(s):
                for pos in xrange(l):
                    if s[pos] == '1':
                        tmp = s[:pos] + '2' + s[pos + 1:]
                        #print "tmp = " + str(tmp)
                        checkAndAddStr(tmp)
    return good


def findAllGood2Cnt(a, b):
    cntArr = [0, 0, 0]

    def checkAndAdd(x):
        x2 = x * x
        if isPalindrome(x2):
            if(a <= x2) and (x2 <= b):
                cntArr[0] += 1
                cntArr[1] = x
                cntArr[2] = x2
                #print(x2)
            return True
        else:
            return False

    def checkAndAddStr(strX):
        str1 = strX[:-1] + strX[::-1]
        str2 = strX + strX[::-1]
        #print strX + " - " + str1 + " - " + str2
        x1 = int(str1)
        x2 = int(str2)
        r1 = checkAndAdd(x1)
        r2 = checkAndAdd(x2)
        return  r1 or r2

    checkAndAdd(3)
    minLen = len(str(a)) / 4
    if minLen < 1: minLen = 1
    maxLen = len(str(b)) / 4 + 1
    #print 'a={0}, b={1}, minLen={2}, maxLen={3}'.format(a, b, minLen, maxLen)
    for l in xrange(minLen, maxLen + 1):
    #        if(maxLen > 10):
    #            print "len = {0} max = {1}, cnt = {2}, lastX = {3}".format(l, maxLen, cntArr[0], cntArr)
        for x in xrange(1 << (l - 1), 1 << l):
            s = "{0:b}".format(x)
            #print "s = " + str(s)
            if checkAndAddStr(s):
                for pos in xrange(l):
                    if s[pos] == '1':
                        tmp = s[:pos] + '2' + s[pos + 1:]
                        #print "tmp = " + str(tmp)
                        checkAndAddStr(tmp)
    return cntArr[0]


def findAllGood2Cnt2(a, b):
    cntArr = [0, 0, 0]
    good = []

    def checkAndAdd(x):
        x2 = x * x
        if isPalindrome(x2):
            if(a <= x2) and (x2 <= b):
                #fileCache.write(str(x2) + "\n")
                #good.append(x2)
                cntArr[0] += 1
                cntArr[1] = x
                cntArr[2] = x2
                #print(x2)
            return True
        else:
            return False

    def checkAndAddStr(strX):
        str1 = strX[:-1] + strX[::-1]
        str2 = strX + strX[::-1]
        #print strX + " - " + str1 + " - " + str2
        x1 = int(str1)
        x2 = int(str2)
        r1 = checkAndAdd(x1)
        r2 = checkAndAdd(x2)
        return  r1 or r2

    checkAndAdd(3)
    minLen = len(str(a)) / 4
    if minLen < 1: minLen = 1
    maxLen = len(str(b)) / 4 + 1
    if maxLen > 25: maxLen = 25
    #print 'a={0}, b={1}, minLen={2}, maxLen={3}'.format(a, b, minLen, maxLen)
    for l in xrange(minLen, maxLen + 1):
    #        if(maxLen > 10):
    #            print "len = {0} max = {1}, cnt = {2}, lastX = {3}".format(l, maxLen, cntArr[0], cntArr)
        for x in xrange(1 << (l - 1), 1 << l):
            s = "{0:b}".format(x)
            cnt1 = len(filter(lambda c: c == '1', s))
            if cnt1 > 5: continue
            #print "s = " + str(s)
            if checkAndAddStr(s) and cnt1 <= 3:
                for pos in xrange(l):
                    if s[pos] == '1':
                        tmp = s[:pos] + '2' + s[pos + 1:]
                        #print "tmp = " + str(tmp)
                        checkAndAddStr(tmp)
                        #    return good
    return cntArr[0]


#m0 = 220000
#good0 = [1, 4, 9, 121, 484, 10201, 12321, 14641, 40804, 44944, 1002001, 1234321, 4008004, 100020001, 102030201, 104060401, 121242121, 123454321, 125686521, 400080004, 404090404, 10000200001L, 10221412201L, 12102420121L, 12345654321L, 40000800004L, 1000002000001L, 1002003002001L, 1004006004001L, 1020304030201L, 1022325232201L, 1024348434201L, 1210024200121L, 1212225222121L, 1214428244121L, 1232346432321L, 1234567654321L, 4000008000004L, 4004009004004L, 100000020000001L, 100220141022001L, 102012040210201L, 102234363432201L, 121000242000121L, 121242363242121L, 123212464212321L, 123456787654321L, 400000080000004L, 10000000200000001L, 10002000300020001L, 10004000600040001L, 10020210401202001L, 10022212521222001L, 10024214841242001L, 10201020402010201L, 10203040504030201L, 10205060806050201L, 10221432623412201L, 10223454745432201L, 12100002420000121L, 12102202520220121L, 12104402820440121L, 12122232623222121L, 12124434743442121L, 12321024642012321L, 12323244744232321L, 12343456865434321L, 12345678987654321L, 40000000800000004L, 40004000900040004L, 1000000002000000001L, 1000220014100220001L, 1002003004003002001L, 1002223236323222001L, 1020100204020010201L, 1020322416142230201L, 1022123226223212201L, 1022345658565432201L, 1210000024200000121L, 1210242036302420121L, 1212203226223022121L, 1212445458545442121L, 1232100246420012321L, 1232344458544432321L, 1234323468643234321L, 4000000008000000004L, 100000000020000000001L, 100002000030000200001L, 100004000060000400001L, 100020201040102020001L, 100022201252102220001L, 100024201484102420001L, 100200120040021002001L, 100202122050221202001L, 100204124080421402001L, 100220341262143022001L, 100222343474343222001L, 102010002040200010201L, 102012022050220210201L, 102014042080240410201L, 102030405060504030201L, 102032425272524230201L, 102212122262221212201L, 102214144272441412201L, 102232545484545232201L, 102234567696765432201L, 121000000242000000121L, 121002200252002200121L, 121004400282004400121L, 121022221262122220121L, 121024421474124420121L, 121220122262221022121L, 121222324272423222121L, 121242363484363242121L, 121244565696565442121L, 123210002464200012321L, 123212222474222212321L, 123232425484524232321L, 123234645696546432321L, 123432124686421234321L, 123434346696643434321L, 400000000080000000004L, 400004000090000400004L, 10000000000200000000001L, 10000220001410002200001L, 10002002100400120020001L, 10002222123632122220001L, 10020010200400201002001L, 10020230421612403202001L, 10022014302620341022001L, 10022234545854543222001L, 10201000020402000010201L, 10201222221612222210201L, 10203022140604122030201L, 10203244363836344230201L, 10221210222622201212201L, 10221432643834623412201L, 10223234344844343232201L, 12100000002420000000121L, 12100242003630024200121L, 12102202302620320220121L, 12102444325852344420121L, 12122010222622201022121L, 12122252443834425222121L, 12124214524842541242121L, 12321000024642000012321L, 12321244225852244212321L, 12323222344844322232321L, 12343210246864201234321L, 40000000000800000000004L]
m0 = 2300000
good0 = [1, 4, 9, 121, 484, 10201, 12321, 14641, 40804, 44944, 1002001, 1234321, 4008004, 100020001, 102030201,
         104060401, 121242121, 123454321, 125686521, 400080004, 404090404, 10000200001L, 10221412201L, 12102420121L,
         12345654321L, 40000800004L, 1000002000001L, 1002003002001L, 1004006004001L, 1020304030201L, 1022325232201L,
         1024348434201L, 1210024200121L, 1212225222121L, 1214428244121L, 1232346432321L, 1234567654321L, 4000008000004L,
         4004009004004L, 100000020000001L, 100220141022001L, 102012040210201L, 102234363432201L, 121000242000121L,
         121242363242121L, 123212464212321L, 123456787654321L, 400000080000004L, 10000000200000001L, 10002000300020001L,
         10004000600040001L, 10020210401202001L, 10022212521222001L, 10024214841242001L, 10201020402010201L,
         10203040504030201L, 10205060806050201L, 10221432623412201L, 10223454745432201L, 12100002420000121L,
         12102202520220121L, 12104402820440121L, 12122232623222121L, 12124434743442121L, 12321024642012321L,
         12323244744232321L, 12343456865434321L, 12345678987654321L, 40000000800000004L, 40004000900040004L,
         1000000002000000001L, 1000220014100220001L, 1002003004003002001L, 1002223236323222001L, 1020100204020010201L,
         1020322416142230201L, 1022123226223212201L, 1022345658565432201L, 1210000024200000121L, 1210242036302420121L,
         1212203226223022121L, 1212445458545442121L, 1232100246420012321L, 1232344458544432321L, 1234323468643234321L,
         4000000008000000004L, 100000000020000000001L, 100002000030000200001L, 100004000060000400001L,
         100020201040102020001L, 100022201252102220001L, 100024201484102420001L, 100200120040021002001L,
         100202122050221202001L, 100204124080421402001L, 100220341262143022001L, 100222343474343222001L,
         102010002040200010201L, 102012022050220210201L, 102014042080240410201L, 102030405060504030201L,
         102032425272524230201L, 102212122262221212201L, 102214144272441412201L, 102232545484545232201L,
         102234567696765432201L, 121000000242000000121L, 121002200252002200121L, 121004400282004400121L,
         121022221262122220121L, 121024421474124420121L, 121220122262221022121L, 121222324272423222121L,
         121242363484363242121L, 121244565696565442121L, 123210002464200012321L, 123212222474222212321L,
         123232425484524232321L, 123234645696546432321L, 123432124686421234321L, 123434346696643434321L,
         400000000080000000004L, 400004000090000400004L, 10000000000200000000001L, 10000220001410002200001L,
         10002002100400120020001L, 10002222123632122220001L, 10020010200400201002001L, 10020230421612403202001L,
         10022014302620341022001L, 10022234545854543222001L, 10201000020402000010201L, 10201222221612222210201L,
         10203022140604122030201L, 10203244363836344230201L, 10221210222622201212201L, 10221432643834623412201L,
         10223234344844343232201L, 12100000002420000000121L, 12100242003630024200121L, 12102202302620320220121L,
         12102444325852344420121L, 12122010222622201022121L, 12122252443834425222121L, 12124214524842541242121L,
         12321000024642000012321L, 12321244225852244212321L, 12323222344844322232321L, 12343210246864201234321L,
         40000000000800000000004L, 1000000000002000000000001L, 1000002000003000002000001L, 1000004000006000004000001L,
         1000020200104010020200001L, 1000022200125210022200001L, 1000024200148410024200001L, 1000200030004000300020001L,
         1000202030205020302020001L, 1000204030408040304020001L, 1000220232126212320220001L, 1000222232347432322220001L,
         1002001002004002001002001L, 1002003004005004003002001L, 1002005006008006005002001L, 1002021222306032221202001L,
         1002023224327234223202001L, 1002201232026202321022001L, 1002203234227224323022001L, 1002221454348434541222001L,
         1002223456569656543222001L, 1020100000204020000010201L, 1020102020205020202010201L, 1020104040208020404010201L,
         1020120402306032040210201L, 1020122422327232242210201L, 1020302030406040302030201L, 1020304050607060504030201L,
         1020322434528254342230201L, 1020324454749474544230201L, 1022121002226222001212201L, 1022123024227224203212201L,
         1022141424528254241412201L, 1022143446549456443412201L, 1022323232448442323232201L, 1022325254649464525232201L,
         1210000000024200000000121L, 1210002200025200022000121L, 1210004400028200044000121L, 1210022220126210222200121L,
         1210024420147410244200121L, 1210220032026202300220121L, 1210222232227222322220121L, 1210242254148414522420121L,
         1210244454369634544420121L, 1212201002226222001022121L, 1212203204227224023022121L, 1212223242528252423222121L,
         1212225444549454445222121L, 1212421234248424321242121L, 1212423436449446343242121L, 1232100000246420000012321L,
         1232102220247420222012321L, 1232122422348432242212321L, 1232124642369632464212321L, 1232322032448442302232321L,
         1232324252649462524232321L, 1234321002468642001234321L, 1234323224469644223234321L, 4000000000008000000000004L,
         4000004000009000004000004L, 100000000000020000000000001L, 100000220000141000022000001L,
         100002002010040010200200001L, 100002222012363210222200001L, 100020001200040002100020001L,
         100020221222161222122020001L, 100022003410262014300220001L, 100022223434585434322220001L,
         100200100020040020001002001L, 100200320240161042023002001L, 100202104032060230401202001L,
         100202324254383452423202001L, 100220121220262022121022001L, 100220341462383264143022001L,
         100222125432484234521222001L, 102010000002040200000010201L, 102010222202161202222010201L,
         102012022032060230220210201L, 102012244234383432442210201L, 102030201204060402102030201L,
         102030423426181624324030201L, 102032223434282434322230201L, 102212100022262220001212201L,
         102212322442383244223212201L, 102214124054282450421412201L, 102232321224484422123232201L,
         121000000000242000000000121L, 121000242000363000242000121L, 121002202210262012202200121L,
         121002444212585212444200121L, 121022001220262022100220121L, 121022243242383242342220121L,
         121024203630484036302420121L, 121220100022262220001022121L, 121220342242383242243022121L,
         121222304234282432403222121L, 121242121242484242121242121L, 123210000002464200000012321L,
         123210244202585202442012321L, 123212222232484232222212321L, 123232201224484422102232321L,
         123432100024686420001234321L, 400000000000080000000000004L]

good1 = []
with open('cache3.txt') as cacheF:
    good1 = map(int, cacheF.readlines())

def binarySearch(l, x):
    a = 0
    b = len(l) - 1
    if(x < l[0]):
        return 0
    if(x > l[b]):
        return len(l)
    while a < b:
        mid = (a + b) // 2
        midval = l[mid]
        if x == midval:
            return mid
        elif a == mid:
            return a if midval > x else b
        elif midval < x:
            a = mid
        else:
            b = mid
    return a


def findAllGood3(a, b):
    res2 = filter(lambda x: (a <= x) and (x <= b), good0)
    left = binarySearch(good1, a)
    right = binarySearch(good1, b)
    if good1[right] == b:
        right += 1
    res = right - left
    if res != len(res2):
        print "!!!!! " + str(res) + "  " + str((res2))
        #return res
    return  good1[left:right]
    #return filter(lambda x: (a <= x) and (x <= b), good0)

def findAllGood3Cnt(a, b):
    res2 = filter(lambda x: (a <= x) and (x <= b), good0)
    left = binarySearch(good1, a)
    right = binarySearch(good1, b)
    if right < len(good1) and good1[right] == b:
        right += 1
    res = right - left
    return res


#fileCache = open("cache.txt", 'w')

#m = 220000
#m = 220000
#m = 2300000
#good = findAllGood(m)
#good = sorted(good)
#print str(m) + ":  " + str(len(good)) + "  -  " + str(good)
#a = 1234321
#b = 41002000000000
#print '----------------------------------'
#allCnts = []
#totalCnt = 0
#for p in xrange(0, 100, 2):
#    a = 10 ** p
#    b = 10 ** (p + 1)
#    cnt = findAllGood2Cnt2(a, b)
#    totalCnt += cnt
#    allCnts.append(cnt)
#    allCnts.append(0)
#    #cntOld = findAllGood2Cnt(a, b)
#    print "{0}: a={1}, b={2}: total = {3} count = {4}".format((time.time() - startTime), p, (p + 1), totalCnt, cnt)
#    #print "{0}: a={1}, b={2}: count = {3}, old = {4}".format((time.time() - startTime), p, (p+1), cnt, cntOld)
#    #print "{0}: a={1}, b={2}: count = {3}".format((time.time() - startTime), a, b, cnt)
#    fileCache.flush()
#print '----------------------------------'
#print allCnts
#print '----------------------------------'
#fileCache.close()

#fileCache = open("cache.txt", 'r')
#allLines = fileCache.readlines()
#fileCache.close()
#allValues = map(int, allLines)
#allValues = sorted(allValues)
#fileCache2 = open("cache3.txt", 'w')
#fileCache2.write("\n".join(map(str,allValues)))
#fileCache2.close()


sources = [
    22,
    212,
    1221,
    2112,

    1,
    111,
    1111,
    11111,
    111111,
    1111111,
    11111111,
    111111111,
    1234567890

]

#a = 1
#b = 10 ** 10
##print '----------------------------------'
##good2Cnt2 = findAllGood2Cnt2(a, b)
##print "a={0}, b={1}: count = {2}  -  {3}".format(a, b, len(good2Cnt2), sorted(good2Cnt2))
#good2Cnt2 = findAllGood2Cnt2(a, b)
#print "{0}: a={1}, b={2}: count = {3}".format((time.time() - startTime), a, b, good2Cnt2)
#good2Cnt = findAllGood2Cnt(a, b)
#print "{0}: a={1}, b={2}: count = {3}".format((time.time() - startTime), a, b, good2Cnt)
#good2 = findAllGood2(a, b)
#good2 = sorted(good2)
#good3 = findAllGood3(a, b)
#print "a={0}, b={1}: count = {2}  -  {3}".format(a, b, len(good2), good2)
#print "a={0}, b={1}: count = {2}  -  {3}".format(a, b, len(good3), good3)

with open(inputFileName) as inpF:
    with open(outputFileName, 'w') as outF:
        line = inpF.readline()
        testsCount = int(line)
        for i in xrange(1, testsCount + 1):
            print '{0}:--------------------------------------------'.format((time.time() - startTime))
            res = calcSingleTest(inpF)
            outF.write('Case #{0}: {1}\n'.format(i, res))
            #outF.write('Case #' + str(i) + ": " + ('YES' if res else 'NO'))




