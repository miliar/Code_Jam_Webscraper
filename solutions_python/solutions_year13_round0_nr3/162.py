import sys
from collections import defaultdict

def line():
    return sys.stdin.readline().strip()

def ints(s):
    return [int(t) for t in s.split()]

def is_palindrome(i):
    return str(i) == str(i)[::-1]

# mostly generated by fast_palindroms()
table = [
    1 ,
    4 ,
    9 ,
    121 ,
    484 ,
    10201 ,
    12321 ,
    14641 ,
    40804 ,
    44944
    ]


def find(x):
    mini = 0
    maxi = len(table)-1
    while True:
        midi = mini + (maxi - mini)/2
        if table[midi] == x:
            return midi
        elif table[midi] < x:
            mini = midi
        elif table[midi] > x:
            maxi = midi

        if maxi - mini <= 1:
            return mini


def solve(a,b):
    res = 0
    a_min = 0
    a_max = len(table)-1
    b_min = 0
    b_max = len(table)-1

    ai = find(a)
    bi = find(b)

    res = bi - ai
    if table[ai] == a:
        res += 1
    return res




def gen(halfln):
    format_str = '{:0>%s}' % halfln
    for i in range(2**halfln):
        yield format_str.format(bin(i)[2:])
    return

ps = defaultdict(list)
ps[0] = [0]
ps[1] = [0,1,2]
ps[2] = [11]
ps[3] = [101,111,121]


def fast_palindroms():
    for ln in range(4, 52):
#        print >>sys.stderr, ln
        halfln = ln/2 - 1
        odd = ln % 2
        format_str = '1{:0^%s}1' % (ln-2)
        for ln2 in range(odd, ln, 2):
            for p in ps[ln2]:
                cand = format_str.format(p)
                cand2 = int(cand)**2
                if is_palindrome(cand2):
                    ps[ln].append(cand)
                    table.append(cand2)
        p = int('2' + '0'*(ln-2) + '2')
        if is_palindrome(p**2):
            table.append(p**2)
        if odd:
            p = int('2' + '0'*halfln + '1' + '0'*halfln + '2')
            if is_palindrome(p**2):
                table.append(p**2)

        
def main():
    fast_palindroms()
    tc = int(line())
    for i in range(1,tc+1):
        a,b = ints(line())
        print 'Case #%s: %s' % (i, solve(a,b))


main()
