{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "50\n",
      "['3 4 6 ', '2 4 5 10 ', '12 15 17 19 20 23 25 27 28 30 32 ', '5 6 8 10 ', '6 13 20 27 34 41 48 ', '2 22 ', '4 29 54 79 104 129 154 179 204 229 254 279 304 329 354 379 404 429 454 479 504 529 554 579 604 ', '62 64 70 79 84 90 99 102 103 107 112 117 126 128 135 143 144 146 150 159 161 166 170 ', '82 111 119 120 137 189 199 229 233 265 284 302 308 334 348 357 367 399 416 433 451 466 490 511 521 ', '8 16 23 29 34 38 41 43 44 60 ', '41 89 136 182 227 271 314 356 397 437 476 514 551 587 622 656 689 721 752 782 811 839 866 892 917 941 964 986 1007 1027 1046 1064 1081 1097 1112 1126 1139 1151 1162 1172 1181 1182 1183 1184 1185 1186 1187 1188 1189 1307 ', '11 14 17 19 20 21 25 27 28 29 32 33 34 36 39 40 41 43 45 47 49 ', '4 5 6 7 ', '13 16 19 20 22 24 26 29 30 32 ', '3 4 5 ', '8 9 10 11 12 13 14 15 16 17 ', '31 47 68 72 ', '7 8 9 10 11 12 13 ', '24 30 34 35 39 42 43 46 52 53 56 59 ', '9 12 15 16 17 24 26 27 30 32 36 38 39 41 44 47 48 49 54 57 ', '229 278 319 328 353 374 403 429 470 484 544 555 576 600 604 631 654 657 674 683 702 745 752 774 789 796 819 823 838 854 857 864 925 954 982 988 993 1018 1024 1046 1071 1090 1104 1109 1132 1156 1167 1192 1224 1249 ', '1 2 3 ', '5 8 12 13 15 17 19 20 21 26 ', '12 14 16 19 21 23 25 ', '4 6 7 8 11 12 14 15 16 18 19 20 21 23 25 26 28 30 32 34 35 37 38 40 42 ', '24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 ', '2251 2252 2253 2254 2255 2256 2257 2258 2259 2260 2261 2262 2263 2264 2265 2266 2267 2268 2269 2270 2271 2272 2273 2274 2275 2276 2277 2278 2279 2280 2281 2282 2283 2284 2285 2286 2287 2288 2289 2290 2291 2292 2293 2294 2295 2296 2297 2298 2299 2300 ', '13 14 15 16 ', '24 33 38 44 47 53 61 62 65 70 78 ', '15 18 20 23 25 28 29 31 32 34 36 37 39 41 43 45 46 48 50 52 54 55 56 60 62 64 65 66 68 69 70 71 73 74 77 79 80 82 83 84 85 87 88 89 91 92 93 96 98 99 ', '15 19 20 23 25 29 30 35 38 40 43 45 47 49 50 53 55 59 61 63 65 67 69 70 72 ', '32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 ', '2 3 4 ', '4 8 ', '117 202 207 246 255 279 305 325 339 349 ', '91 92 93 94 95 96 97 98 99 100 ', '22 222 ', '2 6 ', '24 32 40 41 47 50 53 54 58 62 64 65 68 75 ', '42 45 49 50 54 56 59 65 70 72 74 76 79 82 86 88 91 94 97 101 102 105 109 110 111 117 122 123 125 127 130 132 137 140 143 145 147 148 152 153 155 156 159 160 161 163 166 167 169 175 ', '7 9 12 13 16 18 19 ', '3 8 12 13 14 15 27 ', '27 28 33 38 42 45 47 50 53 54 57 61 62 68 70 ', '6 13 15 17 ', '26 31 34 35 39 41 43 44 46 48 49 50 53 55 56 58 59 61 62 ', '6 8 ', '2 4 ', '1 3 5 6 7 9 11 13 15 16 17 ', '6 29 51 72 92 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 311 ', '25 41 50 78 101 112 133 ']\n"
     ]
    }
   ],
   "source": [
    "input_txt = 'B-large.in'\n",
    "with open (input_txt, 'r', encoding= 'utf8') as questions:\n",
    "    case_number = int(questions.readline())\n",
    "    print(case_number)\n",
    "    j = 0\n",
    "    ans = []\n",
    "    while j < case_number:\n",
    "        N = int(questions.readline())\n",
    "        height_count_dict = {}\n",
    "        missing_row = []\n",
    "        for i in range(2*N-1):\n",
    "            row = [int(s_height) for s_height in \\\n",
    "                   questions.readline().split()]\n",
    "            for height in row:\n",
    "                if height in height_count_dict.keys():\n",
    "                    height_count_dict[height] +=1\n",
    "                else:\n",
    "                    height_count_dict[height] = 1\n",
    "        for row, h in height_count_dict.items():\n",
    "            if h % 2 == 1:\n",
    "                missing_row.append(row)\n",
    "        missing_row = sorted(missing_row)\n",
    "        missing_row_str = ''\n",
    "        for number in missing_row:\n",
    "            missing_row_str+=str(number)+' '\n",
    "        ans.append(missing_row_str)\n",
    "        j+=1\n",
    "    print (ans)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "\"\"\"\n",
    "output should be\n",
    "Case #1: 1\n",
    "Case #2: 1\n",
    "Case #3: 2\n",
    "Case #4: 0\n",
    "Case #5: 3\n",
    "\"\"\"\n",
    "output_file = 'B-large.out'\n",
    "with open(output_file, 'w', encoding='utf8') as fw:\n",
    "    for i in range(case_number):\n",
    "        fw.write('Case #%d: %s\\n' % (i+1, ans[i]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
