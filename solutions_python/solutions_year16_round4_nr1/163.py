import sys

winners = {1: {(0, 1, 1): 'S', (1, 1, 0): 'P', (1, 0, 1): 'R'}, 2: {(1, 2, 1): 'S', (2, 1, 1): 'P', (1, 1, 2): 'R'}, 3: {(3, 2, 3): 'P', (2, 3, 3): 'R', (3, 3, 2): 'S'}, 4: {(5, 5, 6): 'P', (5, 6, 5): 'R', (6, 5, 5): 'S'}, 5: {(11, 10, 11): 'S', (10, 11, 11): 'P', (11, 11, 10): 'R'}, 6: {(21, 21, 22): 'S', (21, 22, 21): 'P', (22, 21, 21): 'R'}, 7: {(43, 42, 43): 'R', (42, 43, 43): 'S', (43, 43, 42): 'P'}, 8: {(85, 85, 86): 'R', (85, 86, 85): 'S', (86, 85, 85): 'P'}, 9: {(171, 170, 171): 'P', (170, 171, 171): 'R', (171, 171, 170): 'S'}, 10: {(341, 341, 342): 'P', (341, 342, 341): 'R', (342, 341, 341): 'S'}, 11: {(683, 682, 683): 'S', (682, 683, 683): 'P', (683, 683, 682): 'R'}, 12: {(1365, 1365, 1366): 'S', (1365, 1366, 1365): 'P', (1366, 1365, 1365): 'R'}, 13: {(2731, 2730, 2731): 'R', (2730, 2731, 2731): 'S', (2731, 2731, 2730): 'P'}, 14: {(5461, 5461, 5462): 'R', (5461, 5462, 5461): 'S', (5462, 5461, 5461): 'P'}, 15: {(10923, 10922, 10923): 'P', (10922, 10923, 10923): 'R', (10923, 10923, 10922): 'S'}, 16: {(21845, 21845, 21846): 'P', (21845, 21846, 21845): 'R', (21846, 21845, 21845): 'S'}, 17: {(43691, 43690, 43691): 'S', (43690, 43691, 43691): 'P', (43691, 43691, 43690): 'R'}, 18: {(87381, 87381, 87382): 'S', (87381, 87382, 87381): 'P', (87382, 87381, 87381): 'R'}, 19: {(174763, 174762, 174763): 'R', (174762, 174763, 174763): 'S', (174763, 174763, 174762): 'P'}}
win = {'R' : 'RS', 'S' : 'SP', 'P': 'PR'}
  
def expand(k, s):
  if k == 0:
    return s
  return ''.join(sorted([expand(k-1, win[s][0]),  expand(k-1, win[s][1])]))


def solve_test(inp):
    N, R, P, S = map(int, inp.readline().split())
    #inv_letter = {R : 'R', P:'P', S:'S'}
    case = winners[N]    
    if (R,P,S) not in case:
      return 'IMPOSSIBLE'


    ans = case[(R,P,S)]
    ans = expand(N, ans)
    return ans 

def solve_dumb(inp):
    return '1'

inp = open(sys.argv[1])
inp_dumb = open(sys.argv[1])
out = open(sys.argv[1].rsplit('.',1)[0]+'.out', 'w')
out_dumb = open(sys.argv[1].rsplit('.',1)[0]+'.dumb.out', 'w')
n_tests = int(inp.readline())
for i in range(n_tests):
    ans = solve_test(inp)
    print("Case #%d: " % (i+1) + ans, file=out)

#
    ans_dumb = solve_dumb(inp_dumb)
    print("Case #%d: " % (i+1) + ans_dumb, file=out_dumb)

    if ans != ans_dumb:
      print('Wrong', i+1, file=sys.stderr)
#
out.close()