#!/usr/bin/env python
import cProfile
import operator

input = """100
5
1 2 3 4 5
3
3 5 6
2
5 6
2
5 5
15
361523 480481 416953 446760 409516 657706 258856 634996 10129 302044 335064 141951 743415 310109 544473
15
789242 956206 253507 893541 807637 667419 27370 456789 626749 296226 224336 309791 258236 787826 347781
11
948384 293022 44007 973885 832571 790332 523373 234801 154510 304239 416350
3
699286 727883 110813
13
491532 918766 475079 795739 454267 613028 499233 22755 143950 232262 406217 369249 574659
11
400011 319375 511123 952767 782823 655404 816989 227812 100905 93128 368315
3
625582 918754 495436
11
940578 765383 153180 638352 255476 178147 11140 525404 918984 104034 586316
7
38585 464457 730252 460754 39036 30328 740778
11
924936 502845 103291 215925 415944 108243 115879 433994 840522 237539 295012
14
4329 2249 1847 6675 8257 8606 2088 4266 220 3047 2950 1238 763 9933
8
5344 4722 5895 5025 4904 796 6325 2741
12
3133 4624 8064 7279 525 3349 1715 7110 4024 3912 2230 2025
12
6311 2217 3952 6232 555 9024 230 6251 1474 9564 6919 1369
9
8455 8541 6629 6385 7424 9156 5138 6152 13200
9
2187 5806 3494 7142 7481 9065 1088 225 9313
15
8139 9534 1554 1859 6130 7580 1176 9482 2299 2036 4363 1821 899 789 327
11
7800 7728 4175 7529 1152 8649 4100 1229 3833 1936 13703
7
170 1926 802 9516 4112 7835 5936
12
5530 436 9941 3489 6518 4170 9624 1670 564 426 4002 6468
8
9314 1431 9661 1677 8842 1951 5824 6142
7
8423 514 8992 5186 5373 9691 3139
10
3027 1467 4293 2830 6100 4086 824 6896 9238 12383
6
3032 9577 4443 7249 746 8529
14
2608 3070 6502 9530 7862 218 1150 8887 4019 9529 4498 8352 2184 9646
3
1979 825 1154
15
9710 9278 4088 7693 7431 8317 9690 8329 7645 3174 1698 4180 2908 7526 14715
4
7310 395 837 7744
3
985 7399 7998
3
4978 3575 7813
3
2539 4197 6542
7
4839 9283 6090 3048 2227 1825 9492
15
9685 1483 6450 7639 9256 7586 6333 909 2641 9397 9106 8852 3369 7821 14855
7
3352 4598 5382 191 215 9993 4069
10
5287 6978 5323 193 433 2631 3611 9858 4971 11243
13
3148 4210 6324 7196 2439 4140 99 9349 8761 8192 2048 6272 14178
4
2131 8721 6079 15869
3
5873 8936 13337
5
9340 2738 4603 9177 7404
6
3339 2469 406 5239 1466 2572
3
806 517 6320
5
5209 7319 9701 598 12157
3
3530 6660 6094
8
3060 9806 8099 8886 6135 8941 6440 15517
3
9508 5528 12476
9
8948 1999 1598 2180 7330 5971 5304 2042 4243
3
9543 7995 14972
7
8380 8104 2336 9555 8076 560 1047
11
1567 1480 335 4372 3061 5623 1796 6995 6257 3955 1755
10
5429 2373 3019 7170 3471 1081 4191 4905 1424 2439
13
4372 7584 6442 1958 5491 658 6043 5364 1030 5164 2438 6597 9886
2
5956 5511
5
956 3695 3397 8431 8854
12
4360 2730 4349 6805 3232 8286 4557 2424 5097 8671 3612 6571
9
9509 7956 7200 2500 6126 6735 2992 5262 15690
14
6690 6490 8173 7624 3433 6104 1258 6842 3724 5275 8301 2953 1886 13073
6
9017 9318 1587 5610 9423 6509
3
4354 8078 3724
11
3085 2843 8343 3690 4992 9974 3027 9619 3157 5894 10638
15
4655 4956 9622 4177 234 3376 230 381 8732 7852 7202 6412 3799 5702 6650
10
7804 3808 2687 3323 2185 9215 8334 3080 1037 5605
12
2899 7595 3746 1976 8084 7181 3880 7045 3102 7627 6563 160
6
6325 2430 9714 5614 7562 15453
3
3332 1913 2685
10
7714 1126 6671 1249 7558 8594 7037 3491 3489 9153
13
1152 2633 8745 7765 2177 1553 478 2846 8484 5690 1715 1570 1016
3
1062 5543 4481
3
372 7797 7937
3
9549 8603 1238
14
11 2170 1236 5503 6599 2182 5894 7866 640 1693 7792 49 2973 4326
10
136 23 6040 7190 534 6143 2105 8140 6606 4291
5
4601 9784 5100 6672 15933
5
3065 9744 7042 1761 5310
11
6753 8553 5621 1340 5198 1089 4649 4182 3641 2480 15928
5
6571 1681 4802 9578 10386
12
5154 5804 4816 8826 4407 527 8868 2220 9124 8902 2827 2542
14
4916 1011 5043 9293 3641 6469 8949 5379 3449 5882 2838 8284 2159 7661
5
9027 9446 1474 3392 3879
3
7374 2985 4680
3
4977 9163 12474
11
1120 8923 202 2374 2468 6323 5161 6717 5718 8601 2043
5
5626 7780 4394 9073 14789
14
5072 7264 9794 8967 7963 6845 3496 7273 6097 5728 1250 8855 8088 9934
8
3436 5887 9012 3750 3579 6546 9976 6215
8
726 8894 4813 6576 2886 8206 1535 5431
12
645 8561 9667 9393 2421 43 5459 6498 1399 4863 531 977
10
2781 5751 1427 3587 7003 3080 914 9476 978 6111
9
7374 2642 4407 3249 4367 6302 4234 7835 3226
11
3908 2932 5685 6389 4907 9923 1884 5306 9751 2723 74
11
9104 3855 3053 7364 7477 6121 5197 845 4770 3470 7478
9
8241 3803 4190 6572 1836 4652 545 3514 8785
5
5684 5187 299 1574 6660
14
9168 2722 246 766 847 8929 6325 9833 6459 7789 4389 6497 9387 8113
3
332 3793 3997
6
4155 5238 4652 3061 8774 16338
12
7027 300 3905 9155 5033 841 7828 1633 5298 7485 34 14181""".splitlines()

def combinations(items, n, m):
    if n==0: yield [], items
    else:
        for i in xrange(len(items)):
            if items[i] < m:
                continue
            for cc in combinations(items[:i]+items[i+1:],n-1,items[i]):
                yield [items[i]]+cc[0], cc[1]

T = int(input.pop(0))
for casenum in range(T):
    N = int(input.pop(0))
    case = sorted(map(int, input.pop(0).split()))
    maxpile = 0
    for count in range(1, len(case)/2+1):
        if maxpile > 0:
            break
        for piles in combinations(case, count, 0):
            xor1 = reduce(operator.xor, piles[0], 0)
            xor2 = reduce(operator.xor, piles[1], 0)
            if xor1 == xor2:
                #maxsum = max(sum(piles[0]), sum(piles[1]))
                maxpile = sum(piles[1])
                break
                #if maxsum > maxpile:
                #    maxpile = maxsum
    print "Case #{0}: {1}".format(casenum+1, maxpile or "NO")


