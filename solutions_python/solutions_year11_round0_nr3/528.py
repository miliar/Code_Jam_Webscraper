Python 2.7.1+ (r271:86832, Apr 11 2011, 18:13:53) 
[GCC 4.5.2] on linux2
Type "copyright", "credits" or "license()" for more information.
==== No Subprocess ====
>>> 50 ^ 10
56
>>> def prelimcheck(lst):
	i = 0
	for j in lst:
		i ^= j
	return i == 0

>>> prelimcheck([1 2 3 4 5])
SyntaxError: invalid syntax
>>> prelimcheck([1,2,3,4,5])
False
>>> prelimcheck([3,5,6])
True
>>> def get_subsets(lst,curr):
	if len(lst) == 0:
		return curr
	else:
		return get_subsets(lst[1:], cur + [i + [lst[0]] for i in curr])

	
>>> get_subsets(range(4))
Traceback (most recent call last):
  File "<pyshell#16>", line 1, in <module>
    get_subsets(range(4))
TypeError: get_subsets() takes exactly 2 arguments (1 given)
>>> get_subsets(range(4),[])
Traceback (most recent call last):
  File "<pyshell#17>", line 1, in <module>
    get_subsets(range(4),[])
  File "<pyshell#15>", line 5, in get_subsets
    return get_subsets(lst[1:], cur + [i + [lst[0]] for i in curr])
NameError: global name 'cur' is not defined
>>> def get_subsets(lst,curr):
	if len(lst) == 0:
		return curr
	else:
		return get_subsets(lst[1:], curr + [i + [lst[0]] for i in curr])

	
>>> get_subsets(range(4))
Traceback (most recent call last):
  File "<pyshell#20>", line 1, in <module>
    get_subsets(range(4))
TypeError: get_subsets() takes exactly 2 arguments (1 given)
>>> get_subsets(range(4),[])
[]
>>> get_subsets(range(4),[[]])
[[], [0], [1], [0, 1], [2], [0, 2], [1, 2], [0, 1, 2], [3], [0, 3], [1, 3], [0, 1, 3], [2, 3], [0, 2, 3], [1, 2, 3], [0, 1, 2, 3]]
>>> len(get_subsets(range(4),[[]]))
16
>>> len(get_subsets(range(5),[[]]))
32
>>> len(get_subsets(range(15),[[]]))
32768
>>> def get_subsets2(lst,curr):
	if len(lst) == 0:
		return curr
	else:
		return get_subsets(lst[1:], curr + [i + [lst[0]] for i in curr])

	
>>> def get_subsets2(lst):
	sl = set(lst)
	s = [set(i) for i in get_subsets(lst,[[]])]
	return zip(s,[sl - i for i in s])

>>> get_subsets2(range(3))
[(set([]), set([0, 1, 2])), (set([0]), set([1, 2])), (set([1]), set([0, 2])), (set([0, 1]), set([2])), (set([2]), set([0, 1])), (set([0, 2]), set([1])), (set([1, 2]), set([0])), (set([0, 1, 2]), set([]))]
>>> get_subsets2(range(3))[1]
(set([0]), set([1, 2]))
>>> get_subsets2(range(3))[5]
(set([0, 2]), set([1]))
>>> q = get_subsets2(range(16))
>>> def get_soln(lst)
SyntaxError: invalid syntax
>>> def get_soln(lst):
	s = get_subsets2(lst)
	s.sort(key = lambda x: sum(x[0]))
	for (a,b) in s:
		if not a or not b:
			continue
		if prelim_check(a) == prelim_check(b):
			return b

		
>>> get_soln([3,5,6])
Traceback (most recent call last):
  File "<pyshell#45>", line 1, in <module>
    get_soln([3,5,6])
  File "<pyshell#44>", line 7, in get_soln
    if prelim_check(a) == prelim_check(b):
NameError: global name 'prelim_check' is not defined
>>> prelim_check = prelimcheck
>>> get_soln([3,5,6])
set([5, 6])
>>> def get_soln(lst):
	if not prelim_check(lst):
		return False
	s = get_subsets2(lst)
	s.sort(key = lambda x: sum(x[0]))
	for (a,b) in s:
		if not a or not b:
			continue
		if prelim_check(a) == prelim_check(b):
			return b
	return False

>>> get_soln([3,5,6])
set([5, 6])
>>> get_soln(range(1,16))
set([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])
>>> get_soln(range(1,6))
False
>>> def dostuff(x):
	x = x.split('\n')[2:]
	x = x[::2]
	print x

	
>>> dostuff("""2
5
1 2 3 4 5
3
3 5 6""")
['1 2 3 4 5', '3 5 6']
>>> def dostuff(x):
	x = x.split('\n')[2:]
	x = x[::2]
	n = 0
	s = ""
	for i in x:
		n += 1
		q = get_soln(map(int,i.split(' ')))
		s += "Case #%d: %s" % (n,'NO' if q == False else str(q))
	print s

	
>>> dostuff("""2
5
1 2 3 4 5
3
3 5 6""")
Case #1: NOCase #2: set([5, 6])
>>> def dostuff(x):
	x = x.split('\n')[2:]
	x = x[::2]
	n = 0
	s = ""
	for i in x:
		n += 1
		q = get_soln(map(int,i.split(' ')))
		s += "Case #%d: %s\n" % (n,'NO' if q == False else str(q))
	print s

	
>>> dostuff("""2
5
1 2 3 4 5
3
3 5 6""")
Case #1: NO
Case #2: set([5, 6])

>>> 
>>> def dostuff(x):
	x = x.split('\n')[2:]
	x = x[::2]
	n = 0
	s = ""
	for i in x:
		n += 1
		q = get_soln(map(int,i.split(' ')))
		s += "Case #%d: %s\n" % (n,'NO' if q == False else str(sum(q)))
	print s

	
>>> dostuff("""2
5
1 2 3 4 5
3
3 5 6""")
Case #1: NO
Case #2: 11

>>> dostuff("""100
5
1 2 3 4 5
3
3 5 6
2
5 6
2
5 5
15
34407 249430 432624 727977 503220 946199 132164 715198 329249 294752 988260 130208 893869 109855 812294
15
899743 38791 739420 274195 463151 860700 189257 166098 639905 655455 378958 515950 198287 587678 558917
6
652205 534046 959623 293349 47598 766271
15
947365 242624 18143 482498 37206 690852 51106 377824 302511 845071 859696 507571 436112 716892 740839
6
699496 48031 60108 82233 519971 725723
15
787858 114427 878450 687375 926821 294336 571412 425913 882166 564423 781667 706193 611547 600425 688237
3
623122 366032 987801
11
471106 658903 697970 18946 331763 664758 276767 406132 404896 75917 658795
4
252708 419804 526722 898426
14
297005 640801 486831 581362 343854 803886 116636 414276 937877 788682 77112 442983 713989 221068
9
2273 1675 5974 240 1771 5452 9718 4885 15496
10
1552 9783 1960 5850 9018 1045 7725 5841 4431 4041
9
2726 4154 1661 981 28 1534 5299 1551 2154
12
8170 6356 3834 4994 1017 9222 2122 7880 5792 6846 5318 591
8
5044 6258 4493 4361 585 3124 6992 7791
9
5270 3375 1386 8751 7543 5336 7128 4247 15388
15
7126 8259 266 9472 8257 2046 5365 7471 2087 6585 5511 8234 9572 5121 9388
2
9632 1871
8
3110 5659 3411 8481 7383 9319 6619 5924
10
9338 2915 1082 933 3243 7090 3163 1882 7363 10333
8
376 5320 2188 9021 7969 8995 6008 4370
3
8331 2317 10630
13
1911 8270 2048 7944 3655 8093 3314 244 5295 8147 3463 2480 8870
6
7122 8608 4212 2125 9439 1684
13
6028 4555 3902 636 1972 5490 828 1702 9927 2752 8374 3352 7664
11
4581 1650 634 160 6950 2430 3991 6314 1813 6930 3119
6
1804 4811 5980 2821 6088 7112
15
9166 9351 612 5947 3695 6026 6527 2873 4991 1895 1464 2246 7161 8207 15141
10
8336 7173 7638 2813 8359 2536 1350 1151 8203 9155
3
5721 5175 622
9
7834 3273 5227 2951 9932 6618 7055 3120 9494
12
5939 4942 7883 5362 7717 7648 235 7343 3143 7349 9215 8904
8
4102 1611 4994 9958 2625 3549 6620 15721
5
4608 394 793 4673 1281
6
7983 9834 4707 8047 7853 10980
14
5877 3381 1688 4308 6041 5049 4088 6415 6755 8572 8353 737 8719 9227
3
9873 3167 10958
14
2972 2349 6473 2446 9713 4767 2748 626 9168 9855 3274 1803 447 8711
6
1761 1351 1762 846 2436 3982
3
8270 2543 10657
8
1113 7422 6569 7423 3911 5676 3875 3001
5
3128 6757 7596 2905 168
9
2551 7106 7934 9886 2111 5868 4856 4307 2486
12
346 9430 7387 4672 2969 5917 3177 8600 5768 3852 6899 6421
3
4730 9426 13992
11
7234 7844 2812 9265 9348 9048 9689 5149 5432 4849 9236
3
8678 93 8635
3
2352 9342 7914
8
3735 5052 9406 5589 3909 1233 4554 13854
11
6822 678 4179 3390 561 813 5514 7083 1690 248 3122
4
6016 5237 839 7763
12
6310 9327 3361 35 3870 4377 8539 4846 9072 4258 3992 1602
13
8170 6184 9070 1262 2640 5257 8431 7880 8644 1709 6612 61 15932
3
3881 4157 7956
7
4030 627 8930 1078 5323 9025 7315
12
9017 445 214 8526 6867 3113 4841 4479 6790 455 8803 2104
15
9023 6731 1889 732 2907 229 9985 4398 6018 9241 2809 2555 1741 518 13578
8
8484 7248 9772 5488 4623 8234 5658 6473
11
5441 2579 5755 3084 4801 9564 5172 6235 4873 9662 2222
5
7496 6379 7396 3946 5677
11
7807 6603 3500 1541 7158 3576 4764 2928 5923 8847 13907
3
2650 4631 6221
12
2223 8347 1351 8226 6329 9669 1482 152 6490 8708 6963 5394
8
7541 6332 3243 1959 2443 190 2965 3173
15
8080 3687 3191 2266 7157 379 8272 1461 3901 7515 6015 3377 3112 979 11746
3
6960 5759 3407
8
9883 5932 5413 8462 6630 7138 3431 6941
3
9826 5489 8231
8
1306 5807 7548 886 7142 7095 8653 11299
14
5491 2815 6036 8303 5568 2919 464 1755 5834 9178 8693 3261 878 8705
8
4055 6970 1441 8721 5540 6524 9343 7162
15
24 7499 6590 6258 8017 6464 8434 2524 9701 5241 535 8365 8369 4421 4466
13
1179 4557 4032 8561 6655 1756 8841 2734 841 973 2119 5451 4459
6
9008 9551 2173 4139 8089 3811
15
7623 6356 5021 4480 1847 4864 2704 8609 1190 6261 5019 2890 1873 9295 6976
7
932 3437 564 5224 2852 6031 1086
3
3906 4148 8054
9
9759 9173 1525 7128 4394 4837 4160 6604 4516
13
7702 2646 8030 2198 8993 9215 3645 3908 7050 2613 757 1588 5969
3
3308 6597 5417
10
4489 9691 8238 65 8114 5256 848 7013 5328 5090
8
1576 8358 6963 1895 4460 1078 6226 14290
12
2784 320 7089 4942 3758 6450 1640 8820 804 7926 6880 14317
10
5785 866 9638 2668 534 6754 1194 1988 6075 13968
11
981 9914 2572 2850 9145 2760 5799 9307 5189 1049 12176
11
2407 9739 4694 1765 7276 6394 6320 9164 5757 7564 4036
15
6489 6043 9025 8054 1039 4232 1196 811 6610 9039 3656 6177 1678 3862 1177
8
1593 9951 6169 5610 552 464 1415 4149
6
1256 1041 6299 5080 4625 7613
14
2046 1928 7371 7412 8453 2711 1830 8962 1489 4873 8922 9645 3768 6666
7
1526 9943 290 1053 3170 2851 8543
4
3199 8445 1014 12148
7
6336 8196 8873 7327 1699 4774 4855
11
3951 4258 9355 3463 9111 6179 6288 1216 1481 7295 2195
3
4179 2910 6925
4
1846 3436 8303 10805""")
Case #1: NO
Case #2: 11
Case #3: NO
Case #4: NO
Case #5: 7265299
Case #6: NO
Case #7: 3205494
Case #8: NO
Case #9: NO
Case #10: 9406823
Case #11: NO
Case #12: NO
Case #13: 1844952
Case #14: 6789250
Case #15: 47244
Case #16: 50201
Case #17: 20060
Case #18: NO
Case #19: 38063
Case #20: 57038
Case #21: 94494
Case #22: NO
Case #23: 46796
Case #24: 46409
Case #25: NO
Case #26: 18961
Case #27: 63490
Case #28: 31506
Case #29: 56546
Case #30: 38412
Case #31: NO
Case #32: 84690
Case #33: 55563
Case #34: 10896
Case #35: 52553
Case #36: 75445
Case #37: 47569
Case #38: NO
Case #39: 44697
Case #40: 78473
Case #41: 20831
Case #42: 64905
Case #43: 11292
Case #44: 18927
Case #45: 37877
Case #46: 20386
Case #47: NO
Case #48: 65092
Case #49: 23418
Case #50: NO
Case #51: 17313
Case #52: NO
Case #53: 46099
Case #54: 33852
Case #55: NO
Case #56: NO
Case #57: 81791
Case #58: 12113
Case #59: 35701
Case #60: NO
Case #61: 72125
Case #62: NO
Case #63: NO
Case #64: 26948
Case #65: 65013
Case #66: 10852
Case #67: 65182
Case #68: 27656
Case #69: 70759
Case #70: 12719
Case #71: NO
Case #72: NO
Case #73: 48850
Case #74: NO
Case #75: 48315
Case #76: 86884
Case #77: 51317
Case #78: NO
Case #79: NO
Case #80: 19562
Case #81: 12202
Case #82: 50571
Case #83: 63557
Case #84: 12014
Case #85: 54067
Case #86: 43768
Case #87: 65410
Case #88: 48936
Case #89: 60761
Case #90: 63351
Case #91: 68277
Case #92: NO
Case #93: NO
Case #94: NO
Case #95: 27086
Case #96: 23792
Case #97: 40361
Case #98: 53576
Case #99: 11104
Case #100: 22544

>>> 

>>> dostuff([5,5])
Traceback (most recent call last):
  File "<pyshell#77>", line 1, in <module>
    dostuff([5,5])
  File "<pyshell#73>", line 2, in dostuff
    x = x.split('\n')[2:]
AttributeError: 'list' object has no attribute 'split'
>>> get_soln([5,5])
False
>>> get_subsets([5,5],[[]])
[[], [5], [5], [5, 5]]
>>> 
>>> def get_soln(lst):
	if not prelim_check(lst):
		return False
	s = get_subsets2(lst)
	s.sort(key = lambda x: sum(x[0]))
	for (a,b) in s:
		if not a or not b:
			continue
		if prelim_check(a) == prelim_check(b):
			return b
	return False

>>> prelim_check([5,5])
True
>>> s = get_subsets2([5,5])
>>> s.sort(key = lambda x: sum(x[0]))
>>> for (a,b) in s:
		if not a or not b:
			continue
		if prelim_check(a) == prelim_check(b):
			print b

			
>>> s
[(set([]), set([5])), (set([5]), set([])), (set([5]), set([])), (set([5]), set([]))]
>>> def get_complement(s,spacedict):
	for i in s:
		spacedict[i] -= 1
	out = []
	for i in spacedict:
		out += [i]*spacedict[i]
	return out

>>> def get_subsets2(lst,spacedict):
	s = [get_complement(i) for i in lst]
	return zip(lst,s)

>>> def get_subsets2(lst,spacedict):
	s = [get_complement(i,spacedict) for i in get_subsets(lst,[])]
	return zip(lst,s)

>>> spacedict = dict([(i,1) for i in range(1,6)])
>>> spacedict
{1: 1, 2: 1, 3: 1, 4: 1, 5: 1}
>>> def get_subsets2(lst,spacedict):
	s = [get_complement(i,spacedict) for i in get_subsets(lst,[])]
	return zip(lst,s)

>>> get_subsets2(range(1,6),spacedict)
[]
>>> def get_subsets2(lst,spacedict):
	s = [get_complement(i,spacedict) for i in get_subsets(lst,[[]])]
	return zip(lst,s)

>>> get_subsets2(range(1,6),spacedict)
[(1, [1, 2, 3, 4, 5]), (2, [2, 3, 4, 5]), (3, [3, 4, 5]), (4, [3, 4, 5]), (5, [4, 5])]
>>> def get_subsets2(lst,spacedict):
	ss = get_subsets(lst,[[]])
	s = [get_complement(i,spacedict) for i in ss]
	return zip(ss,s)

>>> get_subsets2(range(1,6),spacedict)
[([], []), ([1], []), ([2], []), ([1, 2], []), ([3], []), ([1, 3], []), ([2, 3], []), ([1, 2, 3], []), ([4], []), ([1, 4], []), ([2, 4], []), ([1, 2, 4], []), ([3, 4], []), ([1, 3, 4], []), ([2, 3, 4], []), ([1, 2, 3, 4], []), ([5], []), ([1, 5], []), ([2, 5], []), ([1, 2, 5], []), ([3, 5], []), ([1, 3, 5], []), ([2, 3, 5], []), ([1, 2, 3, 5], []), ([4, 5], []), ([1, 4, 5], []), ([2, 4, 5], []), ([1, 2, 4, 5], []), ([3, 4, 5], []), ([1, 3, 4, 5], []), ([2, 3, 4, 5], []), ([1, 2, 3, 4, 5], [])]
>>> 
>>> get_complement([1,2,3],spacedict)
[]
>>> print spacedict
{1: -32, 2: -32, 3: -32, 4: -31, 5: -31}
>>> def get_complement(s,spacedict):
	sd = spacedict.copy()
	for i in s:
		spacedict[i] -= 1
	out = []
	for i in spacedict:
		out += [i]*spacedict[i]
	return out

>>> spacedict = dict([(i,1) for i in range(1,6)])
>>> def get_complement(s,spacedict):
	sd = spacedict.copy()
	for i in s:
		spacedict[i] -= 1
	out = []
	for i in spacedict:
		out += [i]*spacedict[i]
	return out

>>> get_complement([1,2,3],spacedict)
[4, 5]
>>> def get_complement(s,spacedict):
	sd = spacedict.copy()
	for i in s:
		sd[i] -= 1
	out = []
	for i in sd:
		out += [i]*sd[i]
	return out

>>> get_complement([1,2,3],spacedict)
[4, 5]
>>> spacedict = dict([(i,1) for i in range(1,6)])
>>> get_complement([1,2,3],spacedict)
[4, 5]
>>> get_subsets2(range(1,6),spacedict)
[([], [1, 2, 3, 4, 5]), ([1], [2, 3, 4, 5]), ([2], [1, 3, 4, 5]), ([1, 2], [3, 4, 5]), ([3], [1, 2, 4, 5]), ([1, 3], [2, 4, 5]), ([2, 3], [1, 4, 5]), ([1, 2, 3], [4, 5]), ([4], [1, 2, 3, 5]), ([1, 4], [2, 3, 5]), ([2, 4], [1, 3, 5]), ([1, 2, 4], [3, 5]), ([3, 4], [1, 2, 5]), ([1, 3, 4], [2, 5]), ([2, 3, 4], [1, 5]), ([1, 2, 3, 4], [5]), ([5], [1, 2, 3, 4]), ([1, 5], [2, 3, 4]), ([2, 5], [1, 3, 4]), ([1, 2, 5], [3, 4]), ([3, 5], [1, 2, 4]), ([1, 3, 5], [2, 4]), ([2, 3, 5], [1, 4]), ([1, 2, 3, 5], [4]), ([4, 5], [1, 2, 3]), ([1, 4, 5], [2, 3]), ([2, 4, 5], [1, 3]), ([1, 2, 4, 5], [3]), ([3, 4, 5], [1, 2]), ([1, 3, 4, 5], [2]), ([2, 3, 4, 5], [1]), ([1, 2, 3, 4, 5], [])]
>>> get_subsets2([5,5],spacedict)
[([], [1, 2, 3, 4, 5]), ([5], [1, 2, 3, 4]), ([5], [1, 2, 3, 4]), ([5, 5], [1, 2, 3, 4])]
>>> spacedict = {5: 2}
>>> get_subsets2([5,5],spacedict)
[([], [5, 5]), ([5], [5]), ([5], [5]), ([5, 5], [])]
>>> def get_soln(lst):
	if not prelim_check(lst):
		return False
	sd = {}
	for i in lst:
		if i in sd:
			sd[i] += 1
		else:
			sd[i] = 1
	s = get_subsets2(lst,sd)
	s.sort(key = lambda x: sum(x[0]))
	for (a,b) in s:
		if not a or not b:
			continue
		if prelim_check(a) == prelim_check(b):
			return b
	return False

>>> get_soln([5,5])
[5]
>>> get_soln([3,5,6])
[5, 6]
>>> 
>>> def dostuff(x):
	x = x.split('\n')[2:]
	x = x[::2]
	n = 0
	s = ""
	for i in x:
		n += 1
		q = get_soln(map(int,i.split(' ')))
		s += "Case #%d: %s\n" % (n,'NO' if q == False else str(sum(q)))
	print s

	
>>> dostuff("""100
5
1 2 3 4 5
3
3 5 6
2
5 6
2
5 5
15
34407 249430 432624 727977 503220 946199 132164 715198 329249 294752 988260 130208 893869 109855 812294
15
899743 38791 739420 274195 463151 860700 189257 166098 639905 655455 378958 515950 198287 587678 558917
6
652205 534046 959623 293349 47598 766271
15
947365 242624 18143 482498 37206 690852 51106 377824 302511 845071 859696 507571 436112 716892 740839
6
699496 48031 60108 82233 519971 725723
15
787858 114427 878450 687375 926821 294336 571412 425913 882166 564423 781667 706193 611547 600425 688237
3
623122 366032 987801
11
471106 658903 697970 18946 331763 664758 276767 406132 404896 75917 658795
4
252708 419804 526722 898426
14
297005 640801 486831 581362 343854 803886 116636 414276 937877 788682 77112 442983 713989 221068
9
2273 1675 5974 240 1771 5452 9718 4885 15496
10
1552 9783 1960 5850 9018 1045 7725 5841 4431 4041
9
2726 4154 1661 981 28 1534 5299 1551 2154
12
8170 6356 3834 4994 1017 9222 2122 7880 5792 6846 5318 591
8
5044 6258 4493 4361 585 3124 6992 7791
9
5270 3375 1386 8751 7543 5336 7128 4247 15388
15
7126 8259 266 9472 8257 2046 5365 7471 2087 6585 5511 8234 9572 5121 9388
2
9632 1871
8
3110 5659 3411 8481 7383 9319 6619 5924
10
9338 2915 1082 933 3243 7090 3163 1882 7363 10333
8
376 5320 2188 9021 7969 8995 6008 4370
3
8331 2317 10630
13
1911 8270 2048 7944 3655 8093 3314 244 5295 8147 3463 2480 8870
6
7122 8608 4212 2125 9439 1684
13
6028 4555 3902 636 1972 5490 828 1702 9927 2752 8374 3352 7664
11
4581 1650 634 160 6950 2430 3991 6314 1813 6930 3119
6
1804 4811 5980 2821 6088 7112
15
9166 9351 612 5947 3695 6026 6527 2873 4991 1895 1464 2246 7161 8207 15141
10
8336 7173 7638 2813 8359 2536 1350 1151 8203 9155
3
5721 5175 622
9
7834 3273 5227 2951 9932 6618 7055 3120 9494
12
5939 4942 7883 5362 7717 7648 235 7343 3143 7349 9215 8904
8
4102 1611 4994 9958 2625 3549 6620 15721
5
4608 394 793 4673 1281
6
7983 9834 4707 8047 7853 10980
14
5877 3381 1688 4308 6041 5049 4088 6415 6755 8572 8353 737 8719 9227
3
9873 3167 10958
14
2972 2349 6473 2446 9713 4767 2748 626 9168 9855 3274 1803 447 8711
6
1761 1351 1762 846 2436 3982
3
8270 2543 10657
8
1113 7422 6569 7423 3911 5676 3875 3001
5
3128 6757 7596 2905 168
9
2551 7106 7934 9886 2111 5868 4856 4307 2486
12
346 9430 7387 4672 2969 5917 3177 8600 5768 3852 6899 6421
3
4730 9426 13992
11
7234 7844 2812 9265 9348 9048 9689 5149 5432 4849 9236
3
8678 93 8635
3
2352 9342 7914
8
3735 5052 9406 5589 3909 1233 4554 13854
11
6822 678 4179 3390 561 813 5514 7083 1690 248 3122
4
6016 5237 839 7763
12
6310 9327 3361 35 3870 4377 8539 4846 9072 4258 3992 1602
13
8170 6184 9070 1262 2640 5257 8431 7880 8644 1709 6612 61 15932
3
3881 4157 7956
7
4030 627 8930 1078 5323 9025 7315
12
9017 445 214 8526 6867 3113 4841 4479 6790 455 8803 2104
15
9023 6731 1889 732 2907 229 9985 4398 6018 9241 2809 2555 1741 518 13578
8
8484 7248 9772 5488 4623 8234 5658 6473
11
5441 2579 5755 3084 4801 9564 5172 6235 4873 9662 2222
5
7496 6379 7396 3946 5677
11
7807 6603 3500 1541 7158 3576 4764 2928 5923 8847 13907
3
2650 4631 6221
12
2223 8347 1351 8226 6329 9669 1482 152 6490 8708 6963 5394
8
7541 6332 3243 1959 2443 190 2965 3173
15
8080 3687 3191 2266 7157 379 8272 1461 3901 7515 6015 3377 3112 979 11746
3
6960 5759 3407
8
9883 5932 5413 8462 6630 7138 3431 6941
3
9826 5489 8231
8
1306 5807 7548 886 7142 7095 8653 11299
14
5491 2815 6036 8303 5568 2919 464 1755 5834 9178 8693 3261 878 8705
8
4055 6970 1441 8721 5540 6524 9343 7162
15
24 7499 6590 6258 8017 6464 8434 2524 9701 5241 535 8365 8369 4421 4466
13
1179 4557 4032 8561 6655 1756 8841 2734 841 973 2119 5451 4459
6
9008 9551 2173 4139 8089 3811
15
7623 6356 5021 4480 1847 4864 2704 8609 1190 6261 5019 2890 1873 9295 6976
7
932 3437 564 5224 2852 6031 1086
3
3906 4148 8054
9
9759 9173 1525 7128 4394 4837 4160 6604 4516
13
7702 2646 8030 2198 8993 9215 3645 3908 7050 2613 757 1588 5969
3
3308 6597 5417
10
4489 9691 8238 65 8114 5256 848 7013 5328 5090
8
1576 8358 6963 1895 4460 1078 6226 14290
12
2784 320 7089 4942 3758 6450 1640 8820 804 7926 6880 14317
10
5785 866 9638 2668 534 6754 1194 1988 6075 13968
11
981 9914 2572 2850 9145 2760 5799 9307 5189 1049 12176
11
2407 9739 4694 1765 7276 6394 6320 9164 5757 7564 4036
15
6489 6043 9025 8054 1039 4232 1196 811 6610 9039 3656 6177 1678 3862 1177
8
1593 9951 6169 5610 552 464 1415 4149
6
1256 1041 6299 5080 4625 7613
14
2046 1928 7371 7412 8453 2711 1830 8962 1489 4873 8922 9645 3768 6666
7
1526 9943 290 1053 3170 2851 8543
4
3199 8445 1014 12148
7
6336 8196 8873 7327 1699 4774 4855
11
3951 4258 9355 3463 9111 6179 6288 1216 1481 7295 2195
3
4179 2910 6925
4
1846 3436 8303 10805""")
Case #1: NO
Case #2: 11
Case #3: NO
Case #4: 5
Case #5: 7265299
Case #6: NO
Case #7: 3205494
Case #8: NO
Case #9: NO
Case #10: 9406823
Case #11: NO
Case #12: NO
Case #13: 1844952
Case #14: 6789250
Case #15: 47244
Case #16: 50201
Case #17: 20060
Case #18: NO
Case #19: 38063
Case #20: 57038
Case #21: 94494
Case #22: NO
Case #23: 46796
Case #24: 46409
Case #25: NO
Case #26: 18961
Case #27: 63490
Case #28: 31506
Case #29: 56546
Case #30: 38412
Case #31: NO
Case #32: 84690
Case #33: 55563
Case #34: 10896
Case #35: 52553
Case #36: 75445
Case #37: 47569
Case #38: NO
Case #39: 44697
Case #40: 78473
Case #41: 20831
Case #42: 64905
Case #43: 11292
Case #44: 18927
Case #45: 37877
Case #46: 20386
Case #47: NO
Case #48: 65092
Case #49: 23418
Case #50: NO
Case #51: 17313
Case #52: NO
Case #53: 46099
Case #54: 33852
Case #55: NO
Case #56: NO
Case #57: 81791
Case #58: 12113
Case #59: 35701
Case #60: NO
Case #61: 72125
Case #62: NO
Case #63: NO
Case #64: 26948
Case #65: 65013
Case #66: 10852
Case #67: 65182
Case #68: 27656
Case #69: 70759
Case #70: 12719
Case #71: NO
Case #72: NO
Case #73: 48850
Case #74: NO
Case #75: 48315
Case #76: 86884
Case #77: 51317
Case #78: NO
Case #79: NO
Case #80: 19562
Case #81: 12202
Case #82: 50571
Case #83: 63557
Case #84: 12014
Case #85: 54067
Case #86: 43768
Case #87: 65410
Case #88: 48936
Case #89: 60761
Case #90: 63351
Case #91: 68277
Case #92: NO
Case #93: NO
Case #94: NO
Case #95: 27086
Case #96: 23792
Case #97: 40361
Case #98: 53576
Case #99: 11104
Case #100: 22544

>>> 
