ceilList =[1, 3, 7, 15, 31, 63, 127, 255, 511, 1023, 2047, 4095, 8191, 16383, 32767, 65535, 131071, 262143, 524287, 1048575, 2097151, 4194303, 8388607, 16777215, 33554431, 67108863, 134217727, 268435455, 536870911, 1073741823, 2147483647, 4294967295, 8589934591, 17179869183, 34359738367, 68719476735, 137438953471, 274877906943, 549755813887, 1099511627775, 2199023255551, 4398046511103, 8796093022207, 17592186044415, 35184372088831, 70368744177663, 140737488355327, 281474976710655, 562949953421311, 1125899906842623, 2251799813685247, 4503599627370495, 9007199254740991, 18014398509481983, 36028797018963967, 72057594037927935, 144115188075855871, 288230376151711743, 576460752303423487, 1152921504606846975, 2305843009213693951, 4611686018427387903, 9223372036854775807, 18446744073709551615L, 36893488147419103231L, 73786976294838206463L, 147573952589676412927L, 295147905179352825855L, 590295810358705651711L, 1180591620717411303423L, 2361183241434822606847L, 4722366482869645213695L, 9444732965739290427391L, 18889465931478580854783L, 37778931862957161709567L, 75557863725914323419135L, 151115727451828646838271L, 302231454903657293676543L, 604462909807314587353087L, 1208925819614629174706175L, 2417851639229258349412351L, 4835703278458516698824703L, 9671406556917033397649407L, 19342813113834066795298815L, 38685626227668133590597631L, 77371252455336267181195263L, 154742504910672534362390527L, 309485009821345068724781055L, 618970019642690137449562111L, 1237940039285380274899124223L, 2475880078570760549798248447L, 4951760157141521099596496895L, 9903520314283042199192993791L, 19807040628566084398385987583L, 39614081257132168796771975167L, 79228162514264337593543950335L, 158456325028528675187087900671L, 316912650057057350374175801343L, 633825300114114700748351602687L, 1267650600228229401496703205375L]
def findCeilingDigit(num):
    for x in range(100):
        if ceilList[x]>=num:
            return x

if __name__ == "__main__":
    t = int(raw_input())

    for i in range(1, t + 1):
        n, m = [int(s) for s in raw_input().split(" ")]
        cd = findCeilingDigit(m)


        #bigger number of that tree level
        big = n//(pow(2, cd))


        #number of bigger number in that tree level
        numBig = n - ceilList[cd-1] - (big -1)*pow(2, cd)

        if (m-ceilList[cd-1])>numBig:
            compartment = big -1
        else:
            compartment = big


        if compartment%2 ==0:
            max=compartment//2
            min=(compartment//2) -1
        else:
            max = min = compartment//2


        print "Case #{}: {} {}".format(i, max, min)
        
