/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>


#include <iterator>


#include <string>
#include <stdexcept>

#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif


/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator: public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(T value): value(value) {

	}

	IntegerIterator& operator++() {
		++value;
		return *this;
	}

	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator--() {
		--value;
		return *this;
	}

	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator*() const {
		return value;
	}

	bool operator==(IntegerIterator rhs) const {
		return value == rhs.value;
	}

	bool operator!=(IntegerIterator rhs) const {
		return !(*this == rhs);
	}

private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin <= end);
	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	typedef std::reverse_iterator<IntegerIterator<T>> IteratorType;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin >= end);
	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	return IntegerRange<T>(from, to);
}

template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	return IntegerRange<T>(0, to + 1);
}

template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	return IntegerRange<T>(from, to + 1);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	return ReversedIntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	return ReversedIntegerRange<T>(from + 1, 0);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	return ReversedIntegerRange<T>(from + 1, to);
}

#include <cassert>

using namespace std;

vector<vector<int>> g, gt;
vector<bool> used;
vector<int> order, comp;

void dfs1(int v) {
	used[v] = true;
	for (int to : g[v]) {
		if (!used[to]) {
			dfs1(to);
		}
	}
	order.push_back(v);
}

void dfs2(int v, int cl) {
	comp[v] = cl;
	for (int to : gt[v]) {
		if (comp[to] == -1) {
			dfs2(to, cl);
		}
	}
}


class TaskC {
public:
	void solve(std::istream& in, std::ostream& out) {
		static int test = 0;
		out << "Case #" << ++test << ": ";
		cerr << test << endl;
		int n, m;
		in >> n >> m;

		vector<string> s(n);

		for (int i: range(n)) {
			in >> s[i];
		}

		string dir = "LURD";
		int dx[] = {0, -1, 0, 1};
		int dy[] = {-1, 0, 1, 0};

		vector<vector<vector<pair<bool, int>>>> possible(n, vector<vector<pair<bool, int>>>(m));

		vector<pair<int, int>> varPos;
		vector<vector<bool>> varCanBe(2);

		for (int si: range(n)) {
			for (int sj: range(m)) {
				if (s[si][sj] == '-' || s[si][sj] == '|') {
					auto varId = (int) varPos.size();
					varPos.emplace_back(si, sj);
					varCanBe[0].push_back(true);
					varCanBe[1].push_back(true);
					//cerr << si << ' ' << sj << ' ' << varId << endl;
					for (int sd: range(4)) {
						int d = sd;
						int i = si;
						int j = sj;
						bool varTrue = d % 2 == 0;

						while (true) {
							i += dx[d];
							j += dy[d];

							//cerr << i << ' ' << j << ' ' << varId << ' ' << varTrue << ' ' << d << endl;
							if (i < 0 || i >= n || j < 0 || j >= m || s[i][j] == '#') {
								break;
							}

							if (s[i][j] == '-' || s[i][j] == '|') {
								varCanBe[(int) varTrue][varId] = false;
								break;
							}

							if (s[i][j] == '\\') {
								d ^= 1;
							}
							else if (s[i][j] == '/') {
								d = 3 - d;
							}
							else if (s[i][j] == '.') {
								possible[i][j].push_back({varTrue, varId});
							}

						}
					}
				}
			}
		}

		{
			int n = varPos.size() * 2;
			g.clear();
			g.resize(n);
			gt.clear();
			gt.resize(n);
			order.clear();
		}

		for (int i: range(varCanBe.size())) {
			if (!varCanBe[0][i]) {
				g[2 * i + 1].push_back(2 * i);
			}
			if (!varCanBe[1][i]) {
				g[2 * i].push_back(2 * i + 1);
			}
		}

		for (int i: range(n)) {
			for (int j: range(m)) {
				if (s[i][j] != '.') {
					continue;
				}
				vector<pair<bool, int>> cur;
				for (auto t: possible[i][j]) {
					if (varCanBe[t.first][t.second]) {
						cur.push_back(t);
					}
				}
				possible[i][j] = cur;
				switch (possible[i][j].size()) {
					case 0:
						out << "IMPOSSIBLE\n";
						return;
					case 1: {
						int v = possible[i][j][0].second * 2 + !possible[i][j][0].first;
						g[v ^ 1].push_back(v);
						break;
					}
					case 2: {
						int v1 = possible[i][j][0].second * 2 + !possible[i][j][0].first;
						int v2 = possible[i][j][1].second * 2 + !possible[i][j][1].first;
						g[v1 ^ 1].push_back(v2);
						g[v2 ^ 1].push_back(v1);
						break;
					}
					default:
						//std::cerr << i << ' ' << j << ' ' << possible[i][j].size() << ' ' << s[i][j] << endl;
						assert(false);
				}

			}
		}

		for (int i: range(g.size())) {
			for (int to: g[i]) {
				gt[to].push_back(i);
			}
		}
		{
			int n = varPos.size() * 2;
			used.assign(n, false);
			for (int i = 0; i < n; ++i) {
				if (!used[i]) {
					dfs1(i);
				}
			}

			comp.assign(n, -1);
			for (int i = 0, j = 0; i < n; ++i) {
				int v = order[n - i - 1];
				if (comp[v] == -1) {
					dfs2(v, j++);
				}
			}

			for (int i = 0; i < n; ++i) {
				if (comp[i] == comp[i ^ 1]) {
					out << "IMPOSSIBLE\n";
					return;
				}
			}
			for (int i = 0; i < n; i += 2) {
				s[varPos[i / 2].first][varPos[i / 2].second] = comp[i] > comp[i ^ 1] ? '-' : '|';
			}
		}

		out << "POSSIBLE\n";
		for (int i: range(n)) {
			out << s[i] << "\n";
		}

	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	TaskC solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	in.tie(nullptr);
	out << std::fixed;
	out.precision(20);
	int n;
in >> n;
for(int i = 0; i < n; ++i) {
	solver.solve(in, out);
}

	return 0;
}
