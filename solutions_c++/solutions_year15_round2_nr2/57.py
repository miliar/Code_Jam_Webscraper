/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <bits/stdc++.h>


#include <algorithm>


#include <iterator>

#include <string>
#include <stdexcept>
#ifdef SPCPPL_DEBUG
	#define SPCPPL_ASSERT(condition) \
	if(!(condition)) { \
		throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
	}
#else
	#define SPCPPL_ASSERT(condition)
#endif



/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator : public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(int value): value(value) {

	}

	IntegerIterator& operator++ () {
		++value;
		return *this;
	}

	IntegerIterator operator++ (int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator-- () {
		--value;
		return *this;
	}

	IntegerIterator operator-- (int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator * () const {
		return value;
	}

	bool operator == (IntegerIterator rhs) {
		return value == rhs.value;
	}

	bool operator != (IntegerIterator rhs) {
		return !(*this == rhs);
	}
private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {

	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	typedef std::reverse_iterator<IntegerIterator<T>> IteratorType;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {

	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	SPCPPL_ASSERT(to >= 0);
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	SPCPPL_ASSERT(from <= to);
	return IntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	SPCPPL_ASSERT(from >= 0);
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	SPCPPL_ASSERT(from >= to);
	return ReversedIntegerRange<T>(from, to);
}

template<typename R>
void sort(R &range) {
	std::sort(range.begin(), range.end());
}

template<typename R, typename Comp>
void sort(R &range, Comp comp) {
	std::sort(range.begin(), range.end(), comp);
}

template<typename R>
void reverse(R &range) {
	std::reverse(range.begin(), range.end());
}

template<typename R, typename T>
auto lower_bound(const R &range, const T &value) -> decltype(range.begin()) {
	return std::lower_bound(range.begin(), range.end(), value);
}

template<typename R, typename T, typename Comp>
auto lower_bound(const R &range, const T &value, Comp comp) -> decltype(range.begin()) {
	return std::lower_bound(range.begin(), range.end(), value, comp);
}

template<typename R, typename T>
auto upper_bound(const R &range, const T &value) -> decltype(range.begin()) {
	return std::upper_bound(range.begin(), range.end(), value);
}

template<typename R, typename T, typename Comp>
auto upper_bound(const R &range, const T &value, Comp comp) -> decltype(range.begin()) {
	return std::upper_bound(range.begin(), range.end(), value, comp);
}

template <typename R>
auto unique(R& range) -> decltype(range.begin()) {
	return std::unique(range.begin(), range.end());
}

template <typename R>
auto min_element(const R& range) -> decltype(range.begin()) {
	return std::min_element(range.begin(), range.end());
}

template <typename R>
auto max_element(const R& range) -> decltype(range.begin()) {
	return std::max_element(range.begin(), range.end());
}

template <typename R>
bool next_permutation(R& range) {
	return std::next_permutation(range.begin(), range.end());
}

template <typename R>
R sorted(R range) {
	sort(range);
	return range;
}

template <typename R, typename Comp>
R sorted(R range, Comp comp) {
	sort(range, comp);
	return range;
}

template <typename R>
R reversed(R range) {
	reverse(range);
	return range;
}


#include <vector>
#include <limits>
#include <functional>
#include <utility>
#include <queue>
#include <assert.h>


template <typename FlowSize, typename CostSize>
struct CostFlow {
	FlowSize flow;
	CostSize cost;
};

template <typename FlowSize, typename CostSize>
class MinCostFlow {
	struct Edge {
		std::size_t from, to;
		FlowSize cap;
		FlowSize flow;
		CostSize cost;
	};
public:
	MinCostFlow(std::size_t n): g(n) {

	}

	void addEdge(std::size_t from, std::size_t to, FlowSize capacity, CostSize cost) {
		SPCPPL_ASSERT(from < g.size() && to < g.size());
		Edge edge = {from, to, capacity, 0, cost};
		g[from].push_back(edges.size());
		edges.push_back(edge);

		Edge backwardEdge = {to, from, 0, 0, -cost};
		g[to].push_back(edges.size());
		edges.push_back(backwardEdge);
	}

	Edge getEdge(std::size_t id) {
		SPCPPL_ASSERT(id < edges.size());
		return edges[id];
	}

	std::size_t edgesCount() const {
		return edges.size();
	}

	template <typename Strategy>
	CostFlow<FlowSize, CostSize> findFlow(std::size_t s, std::size_t t, Strategy strategy) {
		SPCPPL_ASSERT(s < g.size());
		SPCPPL_ASSERT(t < g.size());
		SPCPPL_ASSERT(s != t);
		CostSize cost = 0;
		FlowSize flow = 0;
		std::size_t n = g.size();
		std::vector<CostSize> potential(n);
		const std::size_t NO_PARENT = std::numeric_limits<size_t>::max();
		{
			std::vector<size_t> p(n, NO_PARENT);
			std::vector<CostSize> d(n);
			d[s] = 0;
			p[s] = s;
			bool changed = true;
			while(changed) {
				changed = false;
				for(size_t i = 0; i < edges.size(); ++i) {
					Edge& e = edges[i];
					if(e.cap == e.flow || p[e.from] == -1)
						continue;
					if(p[e.to] == -1 || d[e.to] > d[e.from] + e.cost) {
						d[e.to] = d[e.from] + e.cost;
						p[e.to] = i;
						changed = true;
					}
				}
			}
			potential = std::move(d);
		}
		while(true) {
			std::vector<CostSize> d(n);
			std::vector<size_t> p(n, NO_PARENT);

			typedef std::pair<CostSize, std::size_t> QueueType;
			std::priority_queue<QueueType, std::vector<QueueType>, std::greater<QueueType>> q;

			q.push(std::make_pair(0, s));

			while(!q.empty()) {
				size_t v = q.top().second;
				CostSize oldD = q.top().first;
				q.pop();
				if(oldD != d[v])
					continue;
				for(std::size_t id: g[v]) {
					Edge& e = edges[id];
					if (e.to == s)
						continue;
					if(e.cap > e.flow) {
						SPCPPL_ASSERT(e.cost + potential[e.from] - potential[e.to] >= 0);
						CostSize newd = d[v] + e.cost + potential[e.from] - potential[e.to];
						if(p[e.to] == NO_PARENT || d[e.to] > newd) {
							d[e.to] = newd;
							p[e.to] = id;
							q.push(std::make_pair(d[e.to], e.to));
						}
					}
				}
			}

			if(p[t] == NO_PARENT) {
				break;
			}

			std::size_t cur = t;
			FlowSize maxAdd = strategy.maximalAdditionFlow(flow, cost, potential[t] + d[t]);

			if(maxAdd == 0) {
				break;
			}

			while(cur != s) {
				Edge& e = edges[p[cur]];
				cur = e.from;
				maxAdd = std::min(maxAdd, e.cap - e.flow);
			}

			flow += maxAdd;
			cost += (potential[t] + d[t]) * maxAdd;
			cur = t;
			while(cur != s) {
				std::size_t id = p[cur];
				edges[id].flow += maxAdd;
				edges[id ^ 1].flow -= maxAdd;
				cur = edges[id].from;
			}

			for (size_t i: range(n)) {
				if (p[i] != NO_PARENT) {
					potential[i] = potential[i] + d[i];
				}
			}
		}

		return {flow, cost};

	}
private:
	std::vector<std::vector<std::size_t>> g;
	std::vector<Edge> edges;
};




struct MinCostMaxFlowStrategy {
	template <typename FlowSize, typename CostSize>
	FlowSize maximalAdditionFlow(const FlowSize&, const CostSize&, const CostSize&) {
		return std::numeric_limits<FlowSize>::max();
	}
};



template <typename FlowSize>
struct FixedFlowMinCostStrategy {
	FixedFlowMinCostStrategy(FlowSize maxFlow): maxFlow(maxFlow) {

	}
	template <typename CostSize>
	FlowSize maximalAdditionFlow(const FlowSize& currentFlow, const CostSize&, const CostSize&) {
		return maxFlow - currentFlow;
	}
private:
	FlowSize maxFlow;
};

using namespace std;

class TaskB {
public:
	void solve(std::istream& in, std::ostream& out) {
		static int testNumber = 0;
		++testNumber;
		cerr << testNumber << endl;
		int r, c, n;
		in >> r >> c >> n;

		int ans = r * c * 2;
		for (int msk : range(1 << (r * c))) {
			int cnt = 0;
			for (int j: range(r * c)) {
				if((msk >> j) & 1)
					++cnt;
			}
			if(cnt != n)
				continue;
			int cur = 0;
			for(int i = 0; i < r; ++i) {
				for (int j = 0; j + 1 < c; ++j) {
					if(has(msk, i, j, c) && has(msk, i, j + 1, c)) {
						++cur;
					}
				}
			}
			for (int j = 0; j < c; ++j) {
				for(int i = 0; i + 1 < r; ++i) {

					if(has(msk, i, j, c) && has(msk, i + 1, j, c)) {
						++cur;
					}
				}
			}


			ans = min(ans, cur);
		}
		out << "Case #" << testNumber << ": " << ans << "\n";
	}

	bool has(int msk, int i, int j, int c) {
		return (bool) ((msk >> (i * c) >> j) & 1);
	}
};


int main() {
	std::cin.sync_with_stdio(false);
	std::cin.tie(0);
	std::cout << std::fixed;
	std::cout.precision(20);
	TaskB solver;
	std::ifstream in("/home/riad/Downloads/b.in");
	std::ofstream out("/home/riad/Downloads/b.out");
	int n;
in >> n;
for(int i = 0; i < n; ++i) {
	solver.solve(in, out);
}

	return 0;
}