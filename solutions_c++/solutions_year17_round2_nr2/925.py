//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#####################################################################`,##################################//
//#####################################################################  ##################################//
//#####################################################################,  ``###############################//
//#####################################################################+   +###############################//
//#####################################################################'  `################################//
//####################################################################.  ,#################################//
//##################################################################+`  '##################################//
//##############################################################+ .    ####################################//
//#############################################################;`#.  `#####################################//
//############,    .###########,`    `,########`      '#######`:#   .######,`  `+###,`                `.###//
//###########.       ##########,      ,#######       +######, '+   :#####+       :##.                   :##//
//###########        '#########,      ,######       ######:   .   ######:         ##.                   ,##//
//##########,         #########,      ,#####       ######`      `######`          ##.                   ,##//
//##########          +########,      ,####       ######       `######`           ##,                   :##//
//#########'          `########,      ,###.      #####+       .######             ##############;       ###//
//#########     `:     ########,      ,##;      +###++       .######              ##############       ;###//
//########+     +#     .#######,      ,##      ;###;        .#####+       '       #############:       ####//
//########`     ##`     #######,      ,#`     `###.        .#####;       +#       #############       +####//
//########     .##+     ,######,      ,#      ##+         ,#####.       ###       ############       .#####//
//#######`     +###      ######,      ,#      ###        ,#####.      `####       ###########,       ######//
//#######      ####:     ;#####,      ,#      .#        ,#####,      ,#####       ##########+       '######//
//######.                 #####,      ,#       +       .######       `            ````######       `#######//
//######                  '####,      ,#'       +    ,#######+                        #####`       +#######//
//#####,                   ####,      ,##`       '  +########+                        ####'       :########//
//#####                    '###,      ,###        +###########                        ####        #########//
//####:      +#######       ###,      ,##++        `##########                        ###        +#########//
//####       ########.      +##,      ,#,  #`        `#########.                      ##;       .##########//
//###'      `########+      `##,      ,,    :;           :+#####+##########:      ######        ###########//
//###`      ##########       +#,      ,       +.               .###########:      #####`       :###########//
//###      `##########,      ,#,      ,        .#`              ###########:      #####        ############//
//##################################+       :# ++##:            ###########################################//
//##################################.       ##;+######,         ###########################################//
//##################################,      .#;:##########+:`    ###########################################//
//##################################         +#############################################################//
//#################################         ;##############################################################//
//################################    `#    ;##############################################################//
//###############################     ###   ,##############################################################//
//#############################`     '###`   ##############################################################//
//############################      `####,   '#############################################################//
//###########################       #####'    #############################################################//
//##########################       :######   ;#############################################################//
//#########################        #######+'###############################################################//
//########################        +########################################################################//
//#######################        .#########################################################################//
//######################         ##########################################################################//
//#####################`        ;##########################################################################//
//#####################`       `###########################################################################//
//######################       ############################################################################//
//#######################`    ,############################################################################//
//########################.   #############################################################################//
//#########################: ##############################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//
//#########################################################################################################//

#include <iostream>
#include <vector>
#include <string>
#include <map>
#include <set>
#include <queue>
#include <cassert>
#include <algorithm>
#include <iomanip>
#include <deque>

using namespace std;

const int INF = 1e9;
const int N = 6;


void solve()
{
	int n;
	cin >> n;

	vector<int> arr(N);
	for (int i = 0; i < N; i++)
	{
		cin >> arr[i];
	}

	int noteq = 0;
	for (int i = 0; i < N; i++)
	{
		noteq += arr[i] != 0;
	}

	char aux[] = {'R', 'O', 'Y', 'G', 'B', 'V'};

	if (noteq == 2)
	{
		for (int i = 0; i < 3; i++)
		{
			if (arr[2 * i] && arr[2 * i] == arr[(2 * i + 3) % N])
			{
				for (int j = 0; j < arr[2 * i]; j++)
				{
					cout << aux[2 * i] << aux[(2 * i + 3) % N];
				}
				cout << endl;
				return;
			}
		}
	}

	for (int i = 0; i < 3; i++)
	{
		if (arr[2 * i] < arr[(2 * i + 3) % N] + 1 && arr[(2 * i + 3) % N] != 0)
		{
			cout << "IMPOSSIBLE" << endl;
			return;
		}
	}

	vector<int> total(3);
	for (int i = 0; i < 3; i++)
	{
		total[i] = arr[2 * i] - arr[(2 * i + 3) % N];
	}
	for (int i = 0; i < 3; i++)
	{
		if (total[i] > total[(i + 1) % 3] + total[(i + 2) % 3])
		{
			cout << "IMPOSSIBLE" << endl;
			return;
		}
	}


	int first = -1;
	int last = -1;
	vector<bool> used(3);
	while (true)
	{
		int best = -1;
		int maxVal = -1;
		for (int i = 0; i < 3; i++)
		{
			if (i != last && total[i] > maxVal)
			{
				maxVal = total[i];
				best = i;
			}
			else if (i != last && total[i] == maxVal && i == first)
			{
				best = i;
			}
		}

		if (total[best] == 0)
		{
			for (int j = 0; j < 3; j++)
			{
				if (total[j])
				{
					cout << "IMPOSSIBLE" << endl;
					return;
				}
			}
			break;
		}

		if (!used[best] && arr[(2 * best + 3) % N])
		{
			for (int i = 0; i < arr[(2 * best + 3) % N]; i++)
			{
				cout << aux[2 * best] << aux[(2 * best + 3) % N];
			}
			cout << aux[2 * best];

			used[best] = true;
		}
		else
		{
			cout << aux[2 * best];
		}
		last = best;
		total[best]--;

		if (first == -1)
		{
			first = best;
		}
	}
	cout << endl;
}

int main()
{
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif

	int t;
	cin >> t;

	for (int i = 0; i < t; i++)
	{
		cout << "Case #" << i + 1 << ": " << setprecision(20) << fixed;
		solve();
	}

	return 0;
}