#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;
typedef long long LL;
typedef long double LD;

LL tab[]={};

int main()
{
	ios::sync_with_stdio(0);

	const int ile=sizeof(tab)/sizeof(LL);

	int Testow; cin>>Testow;
	for (int nrTestu=1; nrTestu<=Testow; ++nrTestu)
	{
		LL A,B; cin>>A>>B;
		LL odkad=(LL)ceil(sqrt((LD)A));
		LL dokad=(LL)floor(sqrt((LD)B));
		
		LL* pozA = lower_bound(tab,tab+ile,odkad);
		LL* pozB = upper_bound(tab,tab+ile,dokad);

		int wynik=(int)(pozB-pozA);
		cout<<"Case #"<<nrTestu<<": "<<wynik<<endl;
	}

	return 0;
}