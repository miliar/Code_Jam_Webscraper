/**
 * Jerry Ma
 * B.cpp
 * 2017-05-13 10:34 EDT
 */

// BEGIN AUTOGENERATED

#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#include <algorithm>
#include <array>
#include <bitset>
#include <chrono>
#include <complex>
#include <deque>
#include <forward_list>
#include <fstream>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>


using namespace std;


typedef long long int lli;
typedef pair<int, int> pii;
typedef pair<int, lli> pil;
typedef pair<lli, int> pli;
typedef pair<lli, lli> pll;


int gInt() {
    int i;
    scanf("%d", &i);
    return i;
}


lli gLong() {
    lli i;
    scanf("%lld", &i);
    return i;
}


double gDouble() {
    double i;
    scanf("%lf", &i);
    return i;
}


void init() {
}


void quit() {
    fclose(stdin);
    fclose(stdout);
    fclose(stderr);
    exit(0);
}


void body(int argc, char** argv);


int main(int argc, char** argv) {
    init();
    body(argc, argv);
    quit();
    return 0;
}

// END AUTOGENERATED


int n, m, c;
int p[1000], b[1000];
int percustomer[1000][1000];
int numatpos[1000];
//pii dp[1001][1001];

pii solve() {
    n = gInt();
    c = gInt();
    m = gInt();
    memset(percustomer, 0, sizeof(percustomer));
    memset(numatpos, 0, sizeof(numatpos));
    for (int i = 0; i < m; ++i) {
        p[i] = gInt() - 1;
        b[i] = gInt() - 1;
        assert(p[i] < n && b[i] < c);
        ++percustomer[b[i]][p[i]];
        ++numatpos[p[i]];
    }

    /*
    for (int i = 0; i <= c; ++i) {
        for (int j = 0; j <= n; ++j) {
            dp[i][j].first = 9999;
            dp[i][j].second = 9999;
        }
        dp[i][0].first = 0;
        dp[i][0].second = 0;
    }
    for (int j = 0; j <= n; ++j) {
        dp[0][j].first = 0;
        dp[0][j].second = 0;
    }*/

    int curneeded = 0;
    int used = 0;
    vector<int> customertotals(c, 0);
    for (int nump = 0; nump < n; ++nump) {
        int newtix = numatpos[nump];
        for (int i = 0; i < c; ++i) {
            customertotals[i] += percustomer[i][nump];
            curneeded = max(curneeded, customertotals[i]);
        }
        int newused = used + newtix;
        while (curneeded * (nump + 1) < newused) {
            ++curneeded;
        }
    }

    int needtopromote = 0;
    for (int nump = 0; nump < n; ++nump) {
        int leftatpos = curneeded;
        for (int i = 0; i < c; ++i) {
            int ct = percustomer[i][nump];
            if (ct == 0) continue;
            int touse = min(ct, leftatpos);
            leftatpos -= touse;
            needtopromote += ct - touse;
        }
    }

    /*
    for (int numb = 1; numb <= c; ++numb) {
        for (int nump = 1; nump <= n; ++nump) {
        }
    }
    */

    return make_pair(curneeded, needtopromote);
}


void body(int argc, char** argv) {
    int t = gInt();
    for (int i = 0; i < t; ++i) {
        pii ans = solve();
        printf("Case #%d: %d %d\n", i + 1, ans.first, ans.second);
    }
}
