#include <iostream>
#include <vector>
#include <map>
#include <set>
#include <string>
#include <algorithm>
#include <queue>
#include <assert.h>
#include <queue>

using namespace std;

void test()
{
	int J, P, S, K;
	cin >> J >> P >> S >> K;

	//// stupid bitmask bruteforce
	//vector<tuple<int, int, int>> outfits;
	//for (int a = 0; a < J; a++) {
	//	for (int b = 0; b < P; b++) {
	//		for (int c = 0; c < S; c++) {
	//			outfits.push_back({ a, b, c });
	//		}
	//	}
	//}
	//int N = outfits.size();
	//int M = 2 << N;
	//vector<tuple<int, int, int>> bestAns;
	//vector<int> ab(J*P, 0);
	//vector<int> ac(J*S, 0);
	//vector<int> bc(P*S, 0);
	//for (int i = 0; i < M; i++) {
	//	ab.assign(J*P, 0);
	//	ac.assign(J*S, 0);
	//	bc.assign(P*S, 0);
	//	bool success = true;
	//	long long count = 0;
	//	for (int j = 0; j < N; j++) {
	//		int x = 1 << j;
	//		if ((x & i) != 0) {
	//			int abi = get<0>(outfits[j]) * P + get<1>(outfits[j]);
	//			if (++ab[abi] > K) {
	//				success = false;
	//				break;
	//			}
	//			int aci = get<0>(outfits[j]) * S + get<2>(outfits[j]);
	//			if (++ac[aci] > K) {
	//				success = false;
	//				break;
	//			}
	//			int bci = get<1>(outfits[j]) * S + get<2>(outfits[j]);
	//			if (++bc[bci] > K) {
	//				success = false;
	//				break;
	//			}
	//			count++;
	//		}
	//	}
	//	if (success && count > bestAns.size()) {
	//		bestAns.clear();
	//		for (int j = 0; j < N; j++) {
	//			int x = 1 << j;
	//			if ((x & i) != 0) {
	//				bestAns.push_back(outfits[j]);
	//			}
	//		}
	//	}
	//}
	//cout << "{";
	//for (int i = 0; i < bestAns.size(); i++) {
	//	if (i > 0) cout << ",";
	//	cout << "{";
	//	cout << get<0>(bestAns[i]) + 1<< ",";
	//	cout << get<1>(bestAns[i]) + 1<< ",";
	//	cout << get<2>(bestAns[i]) + 1;
	//	cout << "}";
	//}
	//cout << "},";

	vector<tuple<int, int, int, int>> inputTable = {
		{ 1,1,1,1 },
		{ 1,1,1,2 },
		{ 1,1,1,3 },

		{ 1,1,2,1 },
		{ 1,1,2,2 },
		{ 1,1,2,3 },

		{ 1,1,3,1 },
		{ 1,1,3,2 },
		{ 1,1,3,3 },

		{ 1,2,2,1 },
		{ 1,2,2,2 },
		{ 1,2,2,3 },

		{ 1,2,3,1 },
		{ 1,2,3,2 },
		{ 1,2,3,3 },

		{ 1,3,3,1 },
		{ 1,3,3,2 },
		{ 1,3,3,3 },

		{ 2,2,2,1 },
		{ 2,2,2,2 },
		{ 2,2,2,3 },

		{ 2,2,3,1 },
		{ 2,2,3,2 },
		{ 2,2,3,3 },

		{ 2,3,3,1 },
		{ 2,3,3,2 },
		{ 2,3,3,3 },

		{ 3,3,3,1 },
		{ 3,3,3,2 },
		{ 3,3,3,3 }
	};
	vector<vector<tuple<int, int, int>>> outputTable = {
		{ { 1,1,1 } },
		{ { 1,1,1 } },
		{ { 1,1,1 } },
		{ { 1,1,1 } },
		{ { 1,1,1 },{ 1,1,2 } },
		{ { 1,1,1 },{ 1,1,2 } },
		{ { 1,1,1 } },
		{ { 1,1,1 },{ 1,1,2 } },
		{ { 1,1,1 },{ 1,1,2 },{ 1,1,3 } },
		{ { 1,1,2 },{ 1,2,1 } },
		{ { 1,1,1 },{ 1,1,2 },{ 1,2,1 },{ 1,2,2 } },
		{ { 1,1,1 },{ 1,1,2 },{ 1,2,1 },{ 1,2,2 } },
		{ { 1,1,2 },{ 1,2,1 } },
		{ { 1,1,1 },{ 1,1,2 },{ 1,2,1 },{ 1,2,2 } },
		{ { 1,1,1 },{ 1,1,2 },{ 1,1,3 },{ 1,2,1 },{ 1,2,2 },{ 1,2,3 } },
		{ { 1,1,3 },{ 1,2,2 },{ 1,3,1 } },
		{ { 1,1,2 },{ 1,1,3 },{ 1,2,1 },{ 1,2,3 },{ 1,3,1 },{ 1,3,2 } },
		{ { 1,1,1 },{ 1,1,2 },{ 1,1,3 },{ 1,2,1 },{ 1,2,2 },{ 1,2,3 },{ 1,3,1 },{ 1,3,2 },{ 1,3,3 } },
		{ { 1,1,1 },{ 1,2,2 },{ 2,1,2 },{ 2,2,1 } },
		{ { 1,1,1 },{ 1,1,2 },{ 1,2,1 },{ 1,2,2 },{ 2,1,1 },{ 2,1,2 },{ 2,2,1 },{ 2,2,2 } },
		{ { 1,1,1 },{ 1,1,2 },{ 1,2,1 },{ 1,2,2 },{ 2,1,1 },{ 2,1,2 },{ 2,2,1 },{ 2,2,2 } },
		{ { 1,1,1 },{ 1,2,2 },{ 2,1,2 },{ 2,2,1 } },
		{ { 1,1,1 },{ 1,1,2 },{ 1,2,1 },{ 1,2,2 },{ 2,1,1 },{ 2,1,2 },{ 2,2,1 },{ 2,2,2 } },
		{ { 1,1,1 },{ 1,1,2 },{ 1,1,3 },{ 1,2,1 },{ 1,2,2 },{ 1,2,3 },{ 2,1,1 },{ 2,1,2 },{ 2,1,3 },{ 2,2,1 },{ 2,2,2 },{ 2,2,3 } },
		{ { 1,1,1 },{ 1,2,3 },{ 1,3,2 },{ 2,1,3 },{ 2,2,2 },{ 2,3,1 } },
		{ { 1,1,2 },{ 1,1,3 },{ 1,2,1 },{ 1,2,3 },{ 1,3,1 },{ 1,3,2 },{ 2,1,2 },{ 2,1,3 },{ 2,2,1 },{ 2,2,3 },{ 2,3,1 },{ 2,3,2 } },
		{ { 1,1,1 },{ 1,1,2 },{ 1,1,3 },{ 1,2,1 },{ 1,2,2 },{ 1,2,3 },{ 1,3,1 },{ 1,3,2 },{ 1,3,3 },{ 2,1,1 },{ 2,1,2 },{ 2,1,3 },{ 2,2,1 },{ 2,2,2 },{ 2,2,3 },{ 2,3,1 },{ 2,3,2 },{ 2,3,3 } },
		{ { 1,1,2 },{ 1,2,1 },{ 1,3,3 },{ 2,1,1 },{ 2,2,3 },{ 2,3,2 },{ 3,1,3 },{ 3,2,2 },{ 3,3,1 } },
		{ { 1,1,1 },{ 1,1,3 },{ 1,2,1 },{ 1,2,2 },{ 1,3,2 },{ 1,3,3 },{ 2,1,1 },{ 2,1,2 },{ 2,2,2 },{ 2,2,3 },{ 2,3,1 },{ 2,3,3 },{ 3,1,2 },{ 3,1,3 },{ 3,2,1 },{ 3,2,3 },{ 3,3,1 },{ 3,3,2 } },
		{ { 1,1,1 },{ 1,1,2 },{ 1,1,3 },{ 1,2,1 },{ 1,2,2 },{ 1,2,3 },{ 1,3,1 },{ 1,3,2 },{ 1,3,3 },{ 2,1,1 },{ 2,1,2 },{ 2,1,3 },{ 2,2,1 },{ 2,2,2 },{ 2,2,3 },{ 2,3,1 },{ 2,3,2 },{ 2,3,3 },{ 3,1,1 },{ 3,1,2 },{ 3,1,3 },{ 3,2,1 },{ 3,2,2 },{ 3,2,3 },{ 3,3,1 },{ 3,3,2 },{ 3,3,3 } },
	};

	if (K > 3) K = 3;
	tuple<int, int, int, int> target = { J, P, S, K };
	bool success = false;
	for(int i = 0; i < inputTable.size(); i++) {
		if (target == inputTable[i]) {
			auto ans = outputTable[i];
			cout << ans.size();
			for (int j = 0; j < ans.size(); j++) {
				cout << endl;
				cout << get<0>(ans[j]) << " ";
				cout << get<1>(ans[j]) << " ";
				cout << get<2>(ans[j]) << " ";
			}
			success = true;
		}
	}
	assert(success);
}

int main()
{
	int t = 0;
	cin >> t;
	for (int i = 0; i < t; i++) {
		cout << "Case #" << i + 1 << ": ";
		test();
		cout << endl;
	}
	return 0;
}
