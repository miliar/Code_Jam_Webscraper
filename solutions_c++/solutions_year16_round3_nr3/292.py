#include <bits/stdc++.h>

int ans[1001][3];
int opt[1001][3];
int prg[11][30][3] = {
{
{0, 0, 0},
{1, 2, 3},
{1, 3, 1},
{2, 1, 3},
{2, 2, 1},
{2, 3, 2},
{3, 1, 1},
{3, 2, 2},
{3, 3, 3},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
},
{
{1, 1, 2},
{1, 2, 3},
{1, 3, 1},
{2, 1, 3},
{2, 2, 1},
{2, 3, 2},
{3, 1, 1},
{3, 2, 2},
{3, 3, 3},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
},
{
{1, 1, 1},
{1, 1, 3},
{1, 2, 2},
{1, 2, 3},
{1, 3, 1},
{1, 3, 2},
{2, 1, 2},
{2, 1, 3},
{2, 2, 1},
{2, 2, 2},
{2, 3, 1},
{2, 3, 3},
{3, 1, 1},
{3, 1, 2},
{3, 2, 1},
{3, 2, 3},
{3, 3, 2},
{3, 3, 3},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
},
{
{1, 1, 1},
{1, 1, 2},
{1, 1, 3},
{1, 2, 1},
{1, 2, 2},
{1, 2, 3},
{1, 3, 1},
{1, 3, 2},
{1, 3, 3},
{2, 1, 1},
{2, 1, 2},
{2, 1, 3},
{2, 2, 1},
{2, 2, 2},
{2, 2, 3},
{2, 3, 1},
{2, 3, 2},
{2, 3, 3},
{3, 1, 1},
{3, 1, 2},
{3, 1, 3},
{3, 2, 1},
{3, 2, 2},
{3, 2, 3},
{3, 3, 1},
{3, 3, 2},
{3, 3, 3},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
},
{
{1, 1, 1},
{1, 1, 2},
{1, 1, 3},
{1, 2, 1},
{1, 2, 2},
{1, 2, 3},
{1, 3, 1},
{1, 3, 2},
{1, 3, 3},
{2, 1, 1},
{2, 1, 2},
{2, 1, 3},
{2, 2, 1},
{2, 2, 2},
{2, 2, 3},
{2, 3, 1},
{2, 3, 2},
{2, 3, 3},
{3, 1, 1},
{3, 1, 2},
{3, 1, 3},
{3, 2, 1},
{3, 2, 2},
{3, 2, 3},
{3, 3, 1},
{3, 3, 2},
{3, 3, 3},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
},
{
{1, 1, 1},
{1, 1, 2},
{1, 1, 3},
{1, 2, 1},
{1, 2, 2},
{1, 2, 3},
{1, 3, 1},
{1, 3, 2},
{1, 3, 3},
{2, 1, 1},
{2, 1, 2},
{2, 1, 3},
{2, 2, 1},
{2, 2, 2},
{2, 2, 3},
{2, 3, 1},
{2, 3, 2},
{2, 3, 3},
{3, 1, 1},
{3, 1, 2},
{3, 1, 3},
{3, 2, 1},
{3, 2, 2},
{3, 2, 3},
{3, 3, 1},
{3, 3, 2},
{3, 3, 3},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
},
{
{1, 1, 1},
{1, 1, 2},
{1, 1, 3},
{1, 2, 1},
{1, 2, 2},
{1, 2, 3},
{1, 3, 1},
{1, 3, 2},
{1, 3, 3},
{2, 1, 1},
{2, 1, 2},
{2, 1, 3},
{2, 2, 1},
{2, 2, 2},
{2, 2, 3},
{2, 3, 1},
{2, 3, 2},
{2, 3, 3},
{3, 1, 1},
{3, 1, 2},
{3, 1, 3},
{3, 2, 1},
{3, 2, 2},
{3, 2, 3},
{3, 3, 1},
{3, 3, 2},
{3, 3, 3},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
},
{
{1, 1, 1},
{1, 1, 2},
{1, 1, 3},
{1, 2, 1},
{1, 2, 2},
{1, 2, 3},
{1, 3, 1},
{1, 3, 2},
{1, 3, 3},
{2, 1, 1},
{2, 1, 2},
{2, 1, 3},
{2, 2, 1},
{2, 2, 2},
{2, 2, 3},
{2, 3, 1},
{2, 3, 2},
{2, 3, 3},
{3, 1, 1},
{3, 1, 2},
{3, 1, 3},
{3, 2, 1},
{3, 2, 2},
{3, 2, 3},
{3, 3, 1},
{3, 3, 2},
{3, 3, 3},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
},
{
{1, 1, 1},
{1, 1, 2},
{1, 1, 3},
{1, 2, 1},
{1, 2, 2},
{1, 2, 3},
{1, 3, 1},
{1, 3, 2},
{1, 3, 3},
{2, 1, 1},
{2, 1, 2},
{2, 1, 3},
{2, 2, 1},
{2, 2, 2},
{2, 2, 3},
{2, 3, 1},
{2, 3, 2},
{2, 3, 3},
{3, 1, 1},
{3, 1, 2},
{3, 1, 3},
{3, 2, 1},
{3, 2, 2},
{3, 2, 3},
{3, 3, 1},
{3, 3, 2},
{3, 3, 3},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
},
{
{1, 1, 1},
{1, 1, 2},
{1, 1, 3},
{1, 2, 1},
{1, 2, 2},
{1, 2, 3},
{1, 3, 1},
{1, 3, 2},
{1, 3, 3},
{2, 1, 1},
{2, 1, 2},
{2, 1, 3},
{2, 2, 1},
{2, 2, 2},
{2, 2, 3},
{2, 3, 1},
{2, 3, 2},
{2, 3, 3},
{3, 1, 1},
{3, 1, 2},
{3, 1, 3},
{3, 2, 1},
{3, 2, 2},
{3, 2, 3},
{3, 3, 1},
{3, 3, 2},
{3, 3, 3},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
},
{
{1, 1, 1},
{1, 1, 2},
{1, 1, 3},
{1, 2, 1},
{1, 2, 2},
{1, 2, 3},
{1, 3, 1},
{1, 3, 2},
{1, 3, 3},
{2, 1, 1},
{2, 1, 2},
{2, 1, 3},
{2, 2, 1},
{2, 2, 2},
{2, 2, 3},
{2, 3, 1},
{2, 3, 2},
{2, 3, 3},
{3, 1, 1},
{3, 1, 2},
{3, 1, 3},
{3, 2, 1},
{3, 2, 2},
{3, 2, 3},
{3, 3, 1},
{3, 3, 2},
{3, 3, 3},
{0, 0, 0},
{0, 0, 0},
{0, 0, 0},
},
};

int J, P, S, K;
int ac = 0;

void sol1(){
    std::map<std::pair<int, int>, int > t1;
    std::map<std::pair<int, int>, int > t2;
    std::map<std::pair<int, int>, int > t3;

    int jc = 0;
    for(int i=0; i<S; ++i){
        jc = 0;
        for(int j=0; j<P; ++j){
            int ijc = 0;
            for(;ijc < J;jc++, ijc++){
                jc = (jc % J);
                
                if(t1[std::make_pair(i, j)]+1 > K || 
                   t2[std::make_pair(i, jc)]+1 > K ||
                   t3[std::make_pair(j, jc)]+1 > K){
                    break;
                }
                
                t1[std::make_pair(i, j)]++;
                t2[std::make_pair(i, jc)]++;
                t3[std::make_pair(j, jc)]++;
                
                ans[ac][0] = jc;
                ans[ac][1] = j;
                ans[ac][2] = i;
                ac++;
            }
        }
    }
}

struct Comb{
    int j;
    int p;
    int s;
};

void sol2(){
    std::vector<Comb> combs;
    
    for(int i=0; i<J; ++i){
        for(int j=0; j<P; ++j){
            for(int k=0; k<S; ++k){
                Comb c;
                c.j = i;
                c.p = j;
                c.s = k;
                combs.push_back(c);
            }
        }
    }
    
    assert((size_t) J*P*S == combs.size());
    long long MX = (1ull << (J*P*S));
    for(long long i=MX; i>=0; --i){
        int tc = 0;
        for(int j=0; j<J*P*S; ++j){
            if(i & (1ll << j)){
                ++tc;
            }
        }
        if(tc < ac) continue;
        
        int oc = 0;
        std::map<std::pair<int, int>, int > t1;
        std::map<std::pair<int, int>, int > t2;
        std::map<std::pair<int, int>, int > t3;
        
        bool pos = true;
        for(int j=0; j<J*P*S; ++j){
            if(i & (1ll << j)){
                opt[oc][0] = combs[j].j;
                opt[oc][1] = combs[j].p;
                opt[oc][2] = combs[j].s;
                
                if(t1[std::make_pair(combs[j].j, combs[j].p)]+1 > K || 
                   t2[std::make_pair(combs[j].j, combs[j].s)]+1 > K ||
                   t3[std::make_pair(combs[j].p, combs[j].s)]+1 > K){
                    pos = false;
                    break;
                }
                
                t1[std::make_pair(combs[j].j, combs[j].p)]++;
                t2[std::make_pair(combs[j].j, combs[j].s)]++;
                t3[std::make_pair(combs[j].p, combs[j].s)]++;
                ++oc;
            }
        }
        
        if(pos && oc > ac){
            ac = oc;
            for(int i=0; i<oc; ++i){
                for(int j=0; j<3; ++j){
                    ans[i][j] = opt[i][j];
                }
            }
        }
    }
}

void sol3(){
    for(int i=0; i<30; ++i){
        if(prg[K][i][0] == 0) break;
        ac++;
    }
    
    for(int i=0; i<ac; ++i){
        for(int j=0; j<3; ++j){
            ans[i][j] = prg[K][i][j]-1;
        }
    }
}

void test(int k){
    for(int i=0; i<1000; ++i){
        for(int j=0; j<3; ++j) ans[i][j] = 0;
    }
    ac = 0;
    
    std::cin >> J >> P >> S >> K;
    
    if(J == 3 && P == 3 && S == 3){
        sol3();
    }else{
        sol2();
    }
    
    std::cout << "Case #" << k << ": " << ac << std::endl;
    for(int i=0; i<ac; ++i){
        std::cout << ans[i][0]+1 << " " << ans[i][1]+1 << " " << ans[i][2]+1 << std::endl;
    }
}

void pregen(){
    J = P = S = 3;
    std::cout << "{" << std::endl;
    for(int k=1; k<=10; ++k){
        std::cerr << k << std::endl;
        ac = 0;
        K = k;
        sol2();
        std::cout << "{" << std::endl;
        for(int j=0; j<ac; ++j){
            std::cout << "{" << ans[j][0]+1 << ", " << ans[j][1]+1 << ", " << ans[j][2]+1 << "}," << std::endl;
        }
        for(int j=ac; j<30; ++j){
            std::cout << "{" << 0 << ", " << 0 << ", " << 0 << "}," << std::endl;
        }
        std::cout << "}," << std::endl;
    }
    std::cout << "}" << std::endl;
}

int main(){
    //pregen();
    //return 0;
    
    int T;
    std::cin >> T;
    for(int i=1; i<=T; ++i){
        test(i);
    }
}
