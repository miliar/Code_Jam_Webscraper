/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Majk
 */

#include <vector>
#include <iostream>
#include <unordered_map>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
using namespace std;

#define x first
#define y second
constexpr int MOD = 1000000007;

typedef std::pair<int,int> pii;
typedef long long ll;
typedef unsigned int ui;

template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;

int logceil(ll x) {int b=0;while(x){x>>=1;++b;}return b;}

namespace std {
    template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}};
}
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector<vector<T>>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector<vector<T>>>(a,vector<vector<T>>(b,vector<T>(c,t))){}};
// #include "../l/mod.h"

class TaskB {
public:
	void solve(istream& cin, ostream& cout) {
		int T; cin >> T;
		for (int t = 1; t <= T; ++t) {
			int N; cin >> N;
			int P; cin >> P;
			vector<ll> R(N); cin >> R;
			vector2<int> T(N, P);
			for (auto &tt:T) { cin >> tt; sort(tt.begin(), tt.end()); }

			int ans = 0;
			vector<int> I(N, 0);
			while (true) {
				bool fin = false;
				vector<int> MIN(N, 0), MAX(N, 0);
				int maxmin = -1, minmax = 10000000;
				for (int i = 0; i < N; ++i) {
					if (I[i] == P) fin = true;
					else {
						// 2 * 500 * 9 <=? 10 * 900
						// 2 * 500 * 11 >=? 10 * 900
						MIN[i] = bsl(0, 1000000, [&](int a) { return 11 * a * R[i] >= 10 * T[i][I[i]];});
						MAX[i] = bsh(0, 1000000, [&](int a) { return 9 * a * R[i] <= 10 * T[i][I[i]];});
						maxmin = max(maxmin, MIN[i]);
						minmax = min(minmax, MAX[i]);
					}
				}
				if (fin) break;

//				cerr << "Q";
//				cerr << maxmin << ' ' << minmax << endl;
//				cerr << MIN;
//				cerr << MAX;

				bool ok = true;
				for (int i = 0; i < N; ++i) {
					ok &= MAX[i] >= maxmin && MIN[i] <= minmax;
				}
				if (ok) {
					cerr << "OK" << endl;
					for (int i = 0; i < N; ++i) {
						cerr << T[i][I[i]++] << ' ';
					}
					cerr << endl;
					++ans;
				} else {
					for (int i = 0; i < N; ++i) {
						if (MAX[i] < maxmin) {
							I[i]++;
						}
					}
				}
			}

			cout << "Case #" << t << ": ";
			cout << ans;
			cout << endl;
		}
	}
};

#include <dirent.h>
#include <stdexcept>
#include <regex>
#include <sys/stat.h>
#include <cstdint>

std::string getLastFileName(const std::string& regexString) {
	DIR* dir;
	dirent* entry;
	std::string result = "";
	int64_t resultModificationTime = 0;
	std::regex regex(regexString);
	if ((dir = opendir (".")) != NULL) {
		while ((entry = readdir (dir)) != NULL) {
			if (std::regex_match(entry->d_name, regex)) {
				struct stat buffer;
				stat(entry->d_name, &buffer);
				int64_t modificationTime = static_cast<int64_t>(buffer.st_mtimespec.tv_sec) * 1000000000 +
						static_cast<int64_t>(buffer.st_mtimespec.tv_nsec);

				if (modificationTime > resultModificationTime) {
					resultModificationTime = modificationTime;
					result = entry->d_name;
				}
			}
		}
		closedir (dir);
	} else {
		throw std::runtime_error("Couldn't open current directory");
	}
	if (result.empty()) {
		throw std::runtime_error("No file found");
	}	return result;
}

int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	TaskB solver;
	std::ifstream in(getLastFileName("B-(small|large).*[.]in"));
	std::ofstream out("b.out");
	solver.solve(in, out);
	return 0;
}

