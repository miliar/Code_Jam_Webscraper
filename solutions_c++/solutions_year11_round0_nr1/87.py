#include<cstdio>
#include<cstring>
#include<cstdlib>
#include<cmath>
#include<algorithm>
using namespace std;
char op[120];
const int oo=1000000000;
struct Node{int x,y,z;}q[1001000];
int _,ca,i,j,k,po[120],p[110],ans,nx,ny,nz,tx,ty,tz;
int n,vis[110][110][110],dis[110][110][110],top,tail;
int main()
{
	freopen("A-large.in","r",stdin);
	freopen("A-large.out","w",stdout);
	scanf("%d",&_);ca=0;
	while(_--)
	{
		ca++;
		scanf("%d",&n);
		for(i=0;i<n;i++)
		{
			scanf("%s%d",op,&po[i]);
			if(op[0]=='O')p[i]=0;
			else p[i]=1;
		}
		for(j=1;j<=100;j++)
		for(k=1;k<=100;k++)
		for(i=0;i<=n;i++)
		vis[j][k][i]=0,dis[j][k][i]=oo;
		vis[1][1][0]=1;
		dis[1][1][0]=0;
		top=0;tail=1;
		q[1].x=1;q[1].y=1;q[1].z=0;
		while(top<tail)
		{
			top++;
			nx=q[top].x;
			ny=q[top].y;
			nz=q[top].z;
		//	printf("%d %d %d %d\n",nx,ny,nz,dis[nx][ny][nz]);
			if(nz==n)break;
			if(p[nz]==0)
			{
				if(nx==po[nz])
				{
					tx=nx;ty=ny;tz=nz+1;
					if(!vis[tx][ty][tz])
					{
						vis[tx][ty][tz]=1;
						dis[tx][ty][tz]=dis[nx][ny][nz]+1;
						tail++;
						q[tail].x=tx;
						q[tail].y=ty;
						q[tail].z=tz;
					}
					if(ny>1)
					{
						tx=nx;ty=ny-1;tz=nz+1;
						if(!vis[tx][ty][tz])
						{
							vis[tx][ty][tz]=1;
							dis[tx][ty][tz]=dis[nx][ny][nz]+1;
							tail++;
							q[tail].x=tx;
							q[tail].y=ty;
							q[tail].z=tz;
						}
					}
					if(ny+1<=100)
					{
						tx=nx;ty=ny+1;tz=nz+1;
						if(!vis[tx][ty][tz])
						{
							vis[tx][ty][tz]=1;
							dis[tx][ty][tz]=dis[nx][ny][nz]+1;
							tail++;
							q[tail].x=tx;
							q[tail].y=ty;
							q[tail].z=tz;
						}
					}
				}
			}
			else
			{
				if(ny==po[nz])
				{
					tx=nx;ty=ny;tz=nz+1;
					if(!vis[tx][ty][tz])
					{
						vis[tx][ty][tz]=1;
						dis[tx][ty][tz]=dis[nx][ny][nz]+1;
						tail++;
						q[tail].x=tx;
						q[tail].y=ty;
						q[tail].z=tz;
					}
					if(nx>1)
					{
						tx=nx-1;ty=ny;tz=nz+1;
						if(!vis[tx][ty][tz])
						{
							vis[tx][ty][tz]=1;
							dis[tx][ty][tz]=dis[nx][ny][nz]+1;
							tail++;
							q[tail].x=tx;
							q[tail].y=ty;
							q[tail].z=tz;
						}
					}
					if(nx+1<=100)
					{
						tx=nx+1;ty=ny;tz=nz+1;
						if(!vis[tx][ty][tz])
						{
							vis[tx][ty][tz]=1;
							dis[tx][ty][tz]=dis[nx][ny][nz]+1;
							tail++;
							q[tail].x=tx;
							q[tail].y=ty;
							q[tail].z=tz;
						}
					}
				}
			}
			if(nx>1)
			{
				tx=nx-1;ty=ny;tz=nz;
				if(!vis[tx][ty][tz])
				{
					vis[tx][ty][tz]=1;
					dis[tx][ty][tz]=dis[nx][ny][nz]+1;
					tail++;
					q[tail].x=tx;
					q[tail].y=ty;
					q[tail].z=tz;
				}
			}
			if(nx+1<=100)
			{
				tx=nx+1;ty=ny;tz=nz;
				if(!vis[tx][ty][tz])
				{
					vis[tx][ty][tz]=1;
					dis[tx][ty][tz]=dis[nx][ny][nz]+1;
					tail++;
					q[tail].x=tx;
					q[tail].y=ty;
					q[tail].z=tz;
				}
			}
			if(ny>1)
			{
				tx=nx;ty=ny-1;tz=nz;
				if(!vis[tx][ty][tz])
				{
					vis[tx][ty][tz]=1;
					dis[tx][ty][tz]=dis[nx][ny][nz]+1;
					tail++;
					q[tail].x=tx;
					q[tail].y=ty;
					q[tail].z=tz;
				}
			}
			if(ny+1<=100)
			{
				tx=nx;ty=ny+1;tz=nz;
				if(!vis[tx][ty][tz])
				{
					vis[tx][ty][tz]=1;
					dis[tx][ty][tz]=dis[nx][ny][nz]+1;
					tail++;
					q[tail].x=tx;
					q[tail].y=ty;
					q[tail].z=tz;
				}
			}
			if(nx>1&&ny>1)
			{
				tx=nx-1;ty=ny-1;tz=nz;
				if(!vis[tx][ty][tz])
				{
					vis[tx][ty][tz]=1;
					dis[tx][ty][tz]=dis[nx][ny][nz]+1;
					tail++;
					q[tail].x=tx;
					q[tail].y=ty;
					q[tail].z=tz;
				}
			}
			if(nx>1&&ny+1<=100)
			{
				tx=nx-1;ty=ny+1;tz=nz;
				if(!vis[tx][ty][tz])
				{
					vis[tx][ty][tz]=1;
					dis[tx][ty][tz]=dis[nx][ny][nz]+1;
					tail++;
					q[tail].x=tx;
					q[tail].y=ty;
					q[tail].z=tz;
				}
			}
			if(nx+1<=100&&ny>1)
			{
				tx=nx+1;ty=ny-1;tz=nz;
				if(!vis[tx][ty][tz])
				{
					vis[tx][ty][tz]=1;
					dis[tx][ty][tz]=dis[nx][ny][nz]+1;
					tail++;
					q[tail].x=tx;
					q[tail].y=ty;
					q[tail].z=tz;
				}
			}
			if(nx+1<=100&&ny+1<=100)
			{
				tx=nx+1;ty=ny+1;tz=nz;
				if(!vis[tx][ty][tz])
				{
					vis[tx][ty][tz]=1;
					dis[tx][ty][tz]=dis[nx][ny][nz]+1;
					tail++;
					q[tail].x=tx;
					q[tail].y=ty;
					q[tail].z=tz;
				}
			}
		}
		ans=oo;
		for(i=1;i<=100;i++)
		for(j=1;j<=100;j++)
		ans=min(ans,dis[i][j][n]);
		printf("Case #%d: %d\n",ca,ans);
	}
}
