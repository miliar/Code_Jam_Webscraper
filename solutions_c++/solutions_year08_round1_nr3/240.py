#include <iostream>
#include <algorithm>

using namespace std;

int N;
int T;

string b =
//"52360679774997896964091736687312762354406183596115257242708972454105209256378048994144144083787822749695081761507737835042532677244470738635863601215334527088667781731918791658112766453226398565805357613504175337850034233924140644420864325390972525926272288762995174024406816117759089094984923713907297288984820886415426898940991316935770197486788844250897541329561831769214999774248015304341150359576683325124988151781394080005624208552435422355561063063428202340933319829339597463522712013417496142026359047378855043896870611356600457571399565955669569175645782219525000605392312340050092867648755297220567662536660744858535052623306784946334222423176372770266324076801044433158257335058930981362263431986864719469899701808189524264459620345221411922329125981963258111041704958070481204034559949435068555518555725123886416550102624363125710244496187894246829034044747161154557232017376765904609185295756035779843980541553807790643936397230287560629994822138521773485924535151210463455550407072278724215347787529112121211843317893351910";
"52360679774997896964091736687312762354406183596115257242708972454105209256378048994144144083787822749695081761507737835042532677244470738635863601215334527088667781731918791658112766453226398565805357613504175337850034233924140644420864325390972525926272288762995174024406816117759089094984923713907297288984820886415426898940991316935770197486788844250897541329561831769214999774248015304341150359576683325124988151781394080005624208552435422355561063063428202340933319829339597463522712013417496142026359047378855043896870611356600457571399565955669569175645782219525000605392312340050092867648755297220567662536660744858535052623306784946334222423176372770266324076801044433158257335058930981362263431986864719469899701808189524264459620345221411922329125981963258111041704958070481204034559949435";

string mul (string&A, string&B) {
	string res = "";
	long long carry = 0;
	for (int i = 0; i < A.length () + B.length () - 1 || carry > 0; ++i) {
		long long r = carry;
		for (int j = 0; j <= i; ++j) {
			if (j < A.length () && i - j < B.length ())
			    r += (A [j] - '0') * (B [i - j] - '0');
		}
		res.push_back ('0' + (r % 10));
		carry = r / 10;
	}
	return res;
}
int main () {
	cin >> T;
	for (int xxx = 1; xxx <= T; ++xxx) {
		cin >> N;
		int L = b.length () - 1;
		string B = "";
		for (int i = 0; i < b.length (); ++i)
		    B = b [i] + B;
//		cout << B << endl;
		string current = B;
		for (int i = 1; i < N; ++i) {
		//	cout << i << endl;
		    current = mul(current, B);
		    current = current.substr(L);
		}
//		int start = L * N;
		int start = L * 1;
		cout << "Case #" << xxx  << ": ";
		while (current.length () < start + 3) current = current + "0";
		for (int i = 2; i >= 0; --i)
		    cout << current [start + i];
		cout << endl;
	}
}

