/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Yulian
 */



#include <iostream>

#include <fstream>
#include <vector>
#include <set>
#include <cmath>
#include <queue>
#include <deque>
#include <string>
#include <algorithm>
#include <map>
#include <numeric>
#include <limits>




#include <ostream>
#include <sstream>


using namespace std;

class B {
public:
  void solve(std::istream &in, std::ostream &out) {
    ios::sync_with_stdio(false);
    int t, un, tmp;
    string s, org;
    in >> t;
    for (int i = 1; i <= t; ++i) {
      in >> s;
      out << "Case #" << i << ": ";
      un = -1;
      for (int j = 1; j < s.size(); ++j) {
        if (s[j - 1] > s[j]) {
          un = j;
          break;
        }
      }
      if (un != -1) {
        org = s;
        for (int j = un; j < s.size(); ++j) {
          s[j] = '9';
        }

        for (int j = un - 1; j >= 0; --j) {
          if (s[j] == '0') {
            s[j] = '9';
          } else {
            s[j]--;
            break;
          }
        }
        bool changed = false;
        for (int j = un - 1; j >= 0; --j) {
          if (s[j] > s[j + 1]) {
            changed = true;
            s[j]--;
            s[j + 1] = '9';
            if (s[j] == '0' && j > 0) {
              s[j] = '9';

              s[j - 1]--;


              s[j + 1] = '9';

            }
          }
        }



//        tmp = 0;
//        for (int j = un - 1; j >= 0; --j) {
//          if (s[j] < '9') {
//            tmp = j;
//            break;
//          }
//        }
//        if(tmp == 0){
//          tmp = un - 1;
//        }
//        while(s[tmp] > s[un] && tmp > 0){
//          --s[tmp--];
//        }
//
//
//        s[tmp]--;
////        while(tmp > 0 && s[tmp-1] > s[tmp]){
////          s[tmp-1] = s[tmp];
////          --tmp;
////        }
//        for (int j = tmp; j >= 1; --j) {
//          if (s[j] == '0') {
//            s[j] = '9';
//            s[j - 1]--;
//          }
//          if(s[j - 1] > s[j]){
//            s[j-1] = s[j];
//          }
//        }

        for (int j = s.find_first_not_of('0', 0); j < s.size(); ++j) {
          out << s[j];
        }
        out << "\n";
      } else {
        out << s << "\n";
      }
    }
  }
};


int main() {
	B solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
