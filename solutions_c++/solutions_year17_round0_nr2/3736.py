/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <algorithm>
#include <array>
#include <climits>
#include <cmath>
#include <cstdint>
#include <cstdlib>
#include <fstream>
#include <iostream>
#include <map>
#include <set>
#include <sstream>
#include <string>
#include <queue>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>

#define check(e) \
  ((void) ((e) ? ((void)0) : __check(#e, __FILE__, __LINE__)))

void __check(const char* expr, const char* file, unsigned int line) {
//  while (true) {}
  printf("%s:%u: failed check `%s'\n", file, line, expr);
  abort();
}

#define forn(i, n) for (int i = 0; i < (int)(n); ++i)

using namespace std;

class taskB {
public:
  void solve(std::istream& in, std::ostream& out) {
    int n_tests;
    in >> n_tests;
    forn(t, n_tests) {
      string s;
      in >> s;
      out << "Case #" << t + 1 << ": " << solve(s) << endl;
    }
  }

  string solve(string s) {
    for (int i = 1; i < s.size(); ++i) {
      if (s[i - 1] > s[i]) {
        int ind = i - 2;
        while (ind >= 0 && s[ind] == s[i - 1]) {
          --ind;
        }
        ++ind;
        check(s[ind] > '0');

        s[ind]--;
        for (int j = ind + 1; j < s.size(); ++j) {
          s[j] = '9';
        }
        break;
      }
    }
    size_t first_not_zero = s.find_first_not_of('0');
    if (first_not_zero == string::npos) {
      return "0";
    }
    return s.substr(first_not_zero);
  }
};

int main() {
  ios_base::sync_with_stdio(false);
  taskB solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}
