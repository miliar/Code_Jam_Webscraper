/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HSK
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>
using namespace std;

class TaskB {
 public:
  void solve(std::istream &in, std::ostream &out) {
    int T;
    in >> T;
    for (int t = 1; t <= T; t++) {
      string N;
      in >> N;

      char left = '0', right;
      int len = (int) N.length();

      for (int i = 0; i < len; i++) {
        right = N[i];
        if (left > right) {
          for (int j = i; j < len; j++) {
            N[j] = '9';
          }

          right = --N[i - 1];
          for (int j = i - 2; j >= 0; j--) {
            left = N[j];
            if (left > right) {
              N[j + 1] = '9';  // right
              N[j]--;  // left
            }

            right = N[j];
          }
        }

        left = right;
      }

      if (N[0] == '0') {
        N.erase(0, 1);
      }

      out << "Case #" << t << ": ";
      out << N << "\n";
    }
  }
};

#include <dirent.h>
#include <stdexcept>
#include <regex>
#include <sys/stat.h>
#include <cstdint>

std::string getLastFileName(const std::string& regexString) {
	DIR* dir;
	dirent* entry;
	std::string result = "";
	int64_t resultModificationTime = 0;
	std::regex regex(regexString);
	if ((dir = opendir (".")) != NULL) {
		while ((entry = readdir (dir)) != NULL) {
			if (std::regex_match(entry->d_name, regex)) {
				struct stat buffer;
				stat(entry->d_name, &buffer);
				int64_t modificationTime = static_cast<int64_t>(buffer.st_mtimespec.tv_sec) * 1000000000 +
						static_cast<int64_t>(buffer.st_mtimespec.tv_nsec);

				if (modificationTime > resultModificationTime) {
					resultModificationTime = modificationTime;
					result = entry->d_name;
				}
			}
		}
		closedir (dir);
	} else {
		throw std::runtime_error("Couldn't open current directory");
	}
	if (result.empty()) {
		throw std::runtime_error("No file found");
	}	return result;
}

int main() {
	TaskB solver;
	std::ifstream in(getLastFileName("B-(small|large).*[.]in"));
	std::ofstream out("b.out");
	solver.solve(in, out);
	return 0;
}
