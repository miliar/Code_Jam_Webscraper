/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Evgenii Balai
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include<algorithm>

using namespace std;
int a[100];
int f[100];

class TaskC {
public:
    bool isOk(int *a, int *f, int n) {
        for (int i = 0; i < n; i++) {
            int n1 = (i + 1) % n;
            int n2 = (i - 1 + n) % n;
            bool ok = false;
            if (f[a[i] - 1] == a[n1] || f[a[i] - 1] == a[n2])
                ok = true;
            if (!ok)
                return false;
        }
        return true;
    }

    void solve(std::istream &in, std::ostream &out) {
        int t;
        in >> t;
        for (int tcases = 0; tcases < t; tcases++) {
            int n;
            in >> n;
            for (int i = 0; i < n; i++) {
                in >> f[i];
            }
            for (int i = 0; i < n; i++) {
                a[i] = i + 1;
            }
            sort(a, a + n);
            int best = -1;
            while (next_permutation(a, a + n)) {
                for (int i = 2; i <= n; i++) {
                    if (isOk(a, f, i)) {
                        best = max(best, i);
                    }
                }
            }
            out << "Case #" << (tcases + 1) << ": " << best << endl;
        }

    }
};


int main() {
    TaskC solver;
    std::istream &in(std::cin);
    std::ofstream out("c.out");
    solver.solve(in, out);
    return 0;
}

