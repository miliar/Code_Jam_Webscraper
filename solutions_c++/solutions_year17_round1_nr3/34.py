/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Majk
 */

#include <vector>
#include <iostream>
#include <unordered_map>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
using namespace std;

#define x first
#define y second
constexpr int MOD = 1000000007;

typedef std::pair<int,int> pii;
typedef long long ll;
typedef unsigned int ui;

template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;

int logceil(ll x) {int b=0;while(x){x>>=1;++b;}return b;}

namespace std {
    template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}};
}
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector<vector<T>>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector<vector<T>>>(a,vector<vector<T>>(b,vector<T>(c,t))){}};
// #include "../l/mod.h"

constexpr ll INFTY = 1e18;

class TaskC {
public:
	int Hd, Ad, Hk, Ak, B, D;

	ll rounds(int b, int d) {
		if (D == 0) d = 0;
		if (B == 0) b = 0;
		ll hd = Hd, hk = Hk, ad = Ad, ak = Ak;
		ll ans = b+d;
		for (int i = 0; i < d; ++i) {
			if (hd <= max(0LL, ak - D)) { hd = Hd - ak; ++ans; if (hd <= 0) return INFTY; }
			if (hd <= max(0LL, ak - D)) { return INFTY; }
			ak = max(0LL, ak - D);
			hd -= ak;
		}

		for (int i = 0; i < b; ++i) {
			if (hd <= ak) { hd = Hd - ak; ++ans; }
			if (hd <= ak) { return INFTY; }
			hd -= ak;
			ad += B;
		}

		while (true) {
			if (hk <= ad) { return ans + 1; }
			if (hd <= ak) { hd = Hd - ak; ++ans; }
			if (hd <= ak) { return INFTY; }
			hk -= ad;
			hd -= ak;
			++ans;
		}
	}


	void solve(istream& cin, ostream& cout) {
		int T; cin >> T;
		for (int t = 1; t <= T; ++t) {
			cin >> Hd >> Ad >> Hk >> Ak >> B >> D;
			cout << "Case #" << t << ": ";

			// Debuff -> Buff -> Attack
			ll ans = INFTY;
			for (int d = 0; d <= (D == 0 ? 0 : (1 + Ak / D)); ++d) {
				for (int b = 0; b <= (B == 0 ? 0 : ((Hk-Ad) / B)+1); ++b) {
					ans = min(ans, rounds(b, d));
				}
			}

			if (ans != INFTY) cout << ans;
			else cout << "IMPOSSIBLE";
			cout << endl;
		}
	}
};

#include <dirent.h>
#include <stdexcept>
#include <regex>
#include <sys/stat.h>
#include <cstdint>

std::string getLastFileName(const std::string& regexString) {
	DIR* dir;
	dirent* entry;
	std::string result = "";
	int64_t resultModificationTime = 0;
	std::regex regex(regexString);
	if ((dir = opendir (".")) != NULL) {
		while ((entry = readdir (dir)) != NULL) {
			if (std::regex_match(entry->d_name, regex)) {
				struct stat buffer;
				stat(entry->d_name, &buffer);
				int64_t modificationTime = static_cast<int64_t>(buffer.st_mtimespec.tv_sec) * 1000000000 +
						static_cast<int64_t>(buffer.st_mtimespec.tv_nsec);

				if (modificationTime > resultModificationTime) {
					resultModificationTime = modificationTime;
					result = entry->d_name;
				}
			}
		}
		closedir (dir);
	} else {
		throw std::runtime_error("Couldn't open current directory");
	}
	if (result.empty()) {
		throw std::runtime_error("No file found");
	}	return result;
}

int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	TaskC solver;
	std::ifstream in(getLastFileName("C-(small|large).*[.]in"));
	std::ofstream out("c.out");
	solver.solve(in, out);
	return 0;
}

