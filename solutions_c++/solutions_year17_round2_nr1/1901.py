/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <algorithm>
#include <array>
#include <climits>
#include <cmath>
#include <cstdint>
#include <cstdlib>
#include <fstream>
#include <iostream>
#include <map>
#include <set>
#include <sstream>
#include <string>
#include <queue>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>

#define forn(i, n) for (int i = 0; i < (int)(n); ++i)

typedef std::vector<int> vi;
using namespace std;

class TaskA {
public:
  void solve(std::istream& in, std::ostream& out) {
    int t;
    in >> t;
    out.precision(10);
    forn(ti, t) {
      int d, n;
      in >> d >> n;
      vi pos(n), v(n);
      forn(i, n) {
        in >> pos[i] >> v[i];
      }
      out << "Case #" << ti + 1 << ": " << fixed << solve(d, n, pos, v) << endl;
    }
  }

  double solve(int d, int n, const vi& pos, const vi& v) {
    vi w(n);
    forn(i, n) {
      w[i] = i;
    }
    sort(w.begin(), w.end(), [&](int i, int j) {
      return 1LL * (d - pos[i]) * v[j] > 1LL * (d - pos[j]) * v[i];
    });
    return 1. * d * v[w[0]] / (d - pos[w[0]]);
  }
};

int main() {
  ios_base::sync_with_stdio(false);
  TaskA solver;
  std::istream& in(std::cin);
  std::ostream& out(std::cout);
  solver.solve(in, out);
  return 0;
}
