/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HSK
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>
using namespace std;

class TaskA {
 public:
  void solve(std::istream &in, std::ostream &out) {
    int T;
    in >> T;

    for (int t = 1; t <= T; t++) {
      long long D, N;
      in >> D >> N;

      vector<long long> K(N), S(N);
      for (int i = 0; i < N; i++) {
        in >> K[i] >> S[i];
      }

      double hour = 0.0;
      for (int i = 0; i < N; i++) {
        hour = max(hour, (double) (D - K[i]) / S[i]);
      }

      out.precision(20);
      out << fixed;
      out << "Case #" << t << ": " << (double) D / hour << "\n";
    }
  }
};

#include <dirent.h>
#include <stdexcept>
#include <regex>
#include <sys/stat.h>
#include <cstdint>

std::string getLastFileName(const std::string& regexString) {
	DIR* dir;
	dirent* entry;
	std::string result = "";
	int64_t resultModificationTime = 0;
	std::regex regex(regexString);
	if ((dir = opendir (".")) != NULL) {
		while ((entry = readdir (dir)) != NULL) {
			if (std::regex_match(entry->d_name, regex)) {
				struct stat buffer;
				stat(entry->d_name, &buffer);
				int64_t modificationTime = static_cast<int64_t>(buffer.st_mtimespec.tv_sec) * 1000000000 +
						static_cast<int64_t>(buffer.st_mtimespec.tv_nsec);

				if (modificationTime > resultModificationTime) {
					resultModificationTime = modificationTime;
					result = entry->d_name;
				}
			}
		}
		closedir (dir);
	} else {
		throw std::runtime_error("Couldn't open current directory");
	}
	if (result.empty()) {
		throw std::runtime_error("No file found");
	}	return result;
}

int main() {
	TaskA solver;
	std::ifstream in(getLastFileName("A-(small|large).*[.]in"));
	std::ofstream out("a.out");
	solver.solve(in, out);
	return 0;
}
