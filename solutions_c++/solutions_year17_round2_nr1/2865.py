/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Yulian
 */



#include <iostream>

#include <fstream>
#include <vector>
#include <set>
#include <cmath>
#include <queue>
#include <deque>
#include <string>
#include <algorithm>
#include <map>
#include <numeric>
#include <limits>


#include <ostream>
#include <sstream>


#include <iomanip>

using namespace std;

class A {
public:
  void solve(std::istream &in, std::ostream &out) {
    ios::sync_with_stdio(false);
    int T, d, n, k, s;
    double mx;
    in >> T;
    out.setf(ios::fixed, ios::floatfield);
    out.precision(6);
    for (int t = 1; t <= T; ++t) {
      in >> d >> n;
      mx = 0;
//      vector<pair<double, double>> a(n);
      for (int i = 0; i < n; ++i) {
        in >> k >> s;
//        a[i] = {k, s};
        mx = max(mx, (d - k) / double(s));
      }
//      sort(a.begin(), a.end());
//      for(int i = n; i >= 0; --i){
//        mx = max(mx, (d - a[i].first) / (double) a[i].second);
//      }
      out << "Case #" << t << ": " << double(d) / double(mx) << endl;
    }
  }
};


int main() {
  A solver;
  std::istream &in(std::cin);
  std::ostream &out(std::cout);
  solver.solve(in, out);
  return 0;
}
