#include <algorithm>#include <bitset>#include <cassert>#include <deque>#include <queue>#include <iomanip>#include <iostream>#include <iterator>#include <float.h>#include <limits>#include <list>#include <map>#include <math.h>#include <numeric>#include <set>#include <sstream>#include <stack>#include <stdio.h>#include <string>#include <vector>using namespace std;typedef long long ll;typedef unsigned long long ull;typedef pair<int, int> pi;typedef pair<ll, ll> pl;typedef vector<bool> vb;typedef vector<int> vi;typedef vector<unsigned> vu;typedef vector<ll> vl;typedef vector<pi> vp;typedef vector<string> vs;typedef set<int> si;typedef map<int, int> mi;#define MAXD 1e12#define MP make_pair#define pie 3.14159265358979323846264338327950288int k,n;long long r[1001], h[1001];long long dp[1001][1001];long long rr[1000], hh[1000];long long solve(int pancakeNumber, int pancakesRemaining){    //cout << pancakeNumber << " " << pancakesRemaining << endl;    if( pancakeNumber == n || pancakesRemaining == 0){        return 0;    }    if ( dp[pancakeNumber][pancakesRemaining] > 0 )        return dp[pancakeNumber][pancakesRemaining];    long long area =  2*r[pancakeNumber]*h[pancakeNumber] + r[pancakeNumber]*r[pancakeNumber];    if(pancakesRemaining == 1)        return dp[pancakeNumber][pancakesRemaining] = area;    long long maxarea = 0;    for(int i=pancakeNumber+1; n - i - pancakesRemaining + 1 >= 0; i++) {        maxarea =             max(maxarea,                    area - r[i]*r[i] + solve(i, pancakesRemaining-1)                     );    }    return dp[pancakeNumber][pancakesRemaining] = maxarea;}int main(){    int t;    cin >> t;    for(int Case=1; Case<=t; Case++){        set<pair<long long, int> > rs;        cin >> n >> k;        for(int i=0; i<n+1; i++) for(int j=0; j<n+1; j++) dp[i][j] = -1;        long long R,H;        for(int i=0; i<n; i++){            cin >> R >> H;            rs.insert(MP(-R,i));            rr[i] = R;            hh[i] = H;        }        int i = 0;        while(rs.size()){            int ind = (*(rs.begin())).second;            rs.erase(*(rs.begin()));            r[i] = rr[ind];            h[i] = hh[ind];            //cout << r[i] << " " << h[i] << endl;            i++;        }        cout << "Case #" << Case << ": ";        long long maxArea = 0;        for(int i=0; i<n-k+1; i++){            maxArea = max(maxArea, solve(i,k) );        }        printf( "%.8f\n", pie*  (double) maxArea );    }    return 0;}