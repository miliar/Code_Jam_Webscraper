/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>


#include <iterator>

#include <string>
#include <stdexcept>
#ifdef SPCPPL_DEBUG
	#define SPCPPL_ASSERT(condition) \
	if(!(condition)) { \
		throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
	}
#else
	#define SPCPPL_ASSERT(condition)
#endif



/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator : public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(int value): value(value) {

	}

	IntegerIterator& operator++ () {
		++value;
		return *this;
	}

	IntegerIterator operator++ (int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator-- () {
		--value;
		return *this;
	}

	IntegerIterator operator-- (int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator * () const {
		return value;
	}

	bool operator == (IntegerIterator rhs) {
		return value == rhs.value;
	}

	bool operator != (IntegerIterator rhs) {
		return !(*this == rhs);
	}
private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {

	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	typedef std::reverse_iterator<IntegerIterator<T>> IteratorType;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {

	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	SPCPPL_ASSERT(to >= 0);
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	SPCPPL_ASSERT(from <= to);
	return IntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	SPCPPL_ASSERT(from >= 0);
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	SPCPPL_ASSERT(from >= to);
	return ReversedIntegerRange<T>(from, to);
}

using namespace std;

class TaskC {
public:
	int testNumber;
	TaskC() {
		testNumber = 0;
	}
	void solve(std::istream& in, std::ostream& out) {
		out << "Case #" << ++testNumber << ": ";
		int l, x;
		string s;
		in >> l >> x >> s;
		Quant q;
		for (int i: range(x % 4)) {
			for (char c: s) {
				q = quant(q, Quant(false, c));
			}
		}

		if(!q.sign || q.sym != '1') {
			out << "NO\n";
			return;
		}

		int state = 0;
		q = Quant();
		for (int i: range(min(9, x))) {
			for (char c: s) {
				q = quant(q, Quant(false, c));
				if (state == 0 && q.sym == 'i' && !q.sign)
					state = 1;
				if (state == 1 && q.sym == 'k' && !q.sign)
					state = 2;
			}
		}

		if(state != 2) {
			out << "NO\n";
		}
		else
			out << "YES\n";

	}


	struct Quant {
		bool sign;
		char sym;

		Quant() {
			sign = false;
			sym = '1';
		}

		Quant(bool sign, char sym):sign(sign), sym(sym) {

		}

		Quant operator - () const {
			return Quant(!sign, sym);
		}
	};

	Quant quant(Quant l, Quant r) {
		if(l.sign) {
			return -quant(-l, r);
		}
		if(r.sign)
			return -quant(l, -r);
		if(l.sym == '1')
			return r;
		if(r.sym == '1')
			return l;
		if(l.sym == r.sym)
			return Quant(true, '1');

		bool sign = ((r.sym - l.sym + 30) % 3 != 1);


		char sym = 'i' + 'j' + 'k' - l.sym - r.sym;
		return Quant(sign, sym);
	}
};


int main() {
	std::cin.sync_with_stdio(false);
	std::cin.tie(0);
	std::cout << std::fixed;
	std::cout.precision(20);
	TaskC solver;
	std::ifstream in("/Users/riad/Downloads/c.in");
	std::ofstream out("/Users/riad/Downloads/c.out");
	int n;
in >> n;
for(int i = 0; i < n; ++i) {
	solver.solve(in, out);
}

	return 0;
}
