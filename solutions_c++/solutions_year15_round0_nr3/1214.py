#include <algorithm>
#include <iomanip>
#include <istream>
#include <map>
#include <ostream>
#include <set>
#include <sstream>
#include <utility>
#include <vector>
using namespace std;
// Solution template generated by caide

struct Quaternion {
    bool sign;
    int basis;
    explicit Quaternion(char c = 'h')
        : sign(false)
        , basis(c - 'h')
    {}
    bool operator==(const Quaternion& that) const {
        return sign == that.sign && basis == that.basis;
    }
    bool operator!=(const Quaternion& that) const {
        return !operator==(that);
    }
    Quaternion operator*(const Quaternion& that) const {
        Quaternion res;
        res.sign = sign != that.sign;
        res.basis = basis ^ that.basis;
        if ((basis == 2 && that.basis == 1)
            || (basis == 3 && that.basis == 2)
            || (basis == 1 && that.basis == 3)
            || (basis != 0 && basis == that.basis))
        {
            res.sign = !res.sign;
        } 
        return res;
    }
    Quaternion& operator*=(const Quaternion& that) {
        Quaternion res = *this * that;
        *this = res;
        return *this;
    }
    Quaternion operator-() const {
        Quaternion res = *this;
        res.sign = !res.sign;
        return res;
    }
};

class Solution {
public:
    void solve(std::istream& in, std::ostream& out) {
        int T;
        in >> T;
        for (int test = 1; test <= T; ++test) {
            out << "Case #" << test << ": ";
            int L, X;
            string s;
            in >> L >> X >> s;
            Quaternion q, H, I('i'), J('j'), K('k');
            for (char c : s)
                q *= Quaternion(c);
            Quaternion qx;
            for (int i = 0; i < X % 4; ++i)
                qx *= q;
            if (qx != -H) {
                out << "NO" << endl;
                continue;
            }
            const int mx = min(X, 8) * L;
            bool haveI = false, haveK = false;
            q = H;
            for (int i = 0; i < mx; ++i) {
                q *= Quaternion(s[i % L]);
                if (!haveI && q == I)
                    haveI = true;
                else if (haveI && q == K) {
                    haveK = true;
                    break;
                }
            }
            out << (haveK ? "YES" : "NO") << endl;
        }
    }
};

void solve(std::istream& in, std::ostream& out)
{
    out << std::setprecision(12);
    Solution solution;
    solution.solve(in, out);
}
#include <fstream>
#include <iostream>

int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    istream& in = cin;

    ostream& out = cout;
    solve(in, out);
    return 0;
}
