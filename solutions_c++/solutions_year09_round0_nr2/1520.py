#include <fstream>
#include <iostream>
#include <queue>

using namespace std;

#define MAX_COLUMNS 100
#define MAX_ROWS    100

bool FindSink(int * map, char * labels, int rows, int columns, int x, int y, char label)
{
	bool          newLabel         = true;
	int           bestX            = -1;
	int           bestY            = -1;
	int           currentX         = 0;
	int           currentY         = 0;
	int           directions[4][2] = { { -1, 0 }, { 0, -1 }, { 0, 1 }, { 1, 0 } };
	int           i                = 0;
	queue < int > path;

	while (true)
	{
		//
		//  Push the current place; it is part of a sink.
		//
		path.push(y * MAX_COLUMNS + x);

		//
		//  Search for lowest neighbor in tie breaking order.
		//
		for (bestX = -1, bestY = -1, i = 0; i < sizeof (directions) / sizeof (directions[0]); i++)
		{
			currentX = x + directions[i][1];
			currentY = y + directions[i][0];

			//
			//  Bail if new location is outside the map.
			//
			if (0 > currentY || rows <= currentY)
				continue;

			if (0 > currentX || columns <= currentX)
				continue;

			//
			//  If a best hasn't been found, this is our new best.
			//
			if (-1 == bestX)
			{
				bestX = currentX;
				bestY = currentY;
				continue;
			}

			//
			//  If the new location is less than our best.
			//
			if (map[currentY * MAX_COLUMNS + currentX] < map[bestY * MAX_COLUMNS + bestX])
			{
				bestX = currentX;
				bestY = currentY;
			}
		}

		//
		//  If no other place was found.
		//
		if (-1 == bestX)
			break;

		//
		//  If the best neighbor is not lower than the current place.
		//
		if (map[y * MAX_COLUMNS + x] <= map[bestY * MAX_COLUMNS + bestX])
			break;

		//
		//  If the current place is already part of a sink.
		//
		if ('.' != labels[bestY * MAX_COLUMNS + bestX])
		{
			label    = labels[bestY * MAX_COLUMNS + bestX];
			newLabel = false;
			break;
		}

		y = bestY;
		x = bestX;
	}

	//
	//  Update the path with its label.
	//
	while (path.size())
	{
		labels[path.front()] = label;
		path.pop();
	}

	return newLabel;
}

int main()
{
	char     label                         = 'a';
	char     labels[MAX_ROWS][MAX_COLUMNS] = { 0 };
	ifstream input;
	int      columns                       = 0;
	int      map[MAX_ROWS][MAX_COLUMNS]    = { 0 };
	int      rows                          = 0;
	int      testCaseIndex                 = 0;
	int      testCases                     = 0;
	int      x                             = 0;
	int      y                             = 0;
	ofstream output;

	//
	//  Open the input file.
	//
	input.open("B-large.in", ios_base::in);
	if (false == input.is_open())
	{
		printf("Error opening the input file.");
		goto exit;
	}

	//
	//  Open the output file.
	//
	output.open("B-large.out", ios_base::out);
	if (false == output.is_open())
	{
		printf("Error opening the output file.");
		goto exit;
	}

	//
	//  Get the number of test cases.
	//
	input >> testCases;
	for (testCaseIndex = 0; testCaseIndex < testCases; testCaseIndex++)
	{
		label = 'a';
		input >> rows >> columns;

		for (y = 0; y < rows; y++)
		{
			for (x = 0; x < columns; x++)
			{
				input >> map[y][x];
				labels[y][x] = '.';
			}
		}

		for (y = 0; y < rows; y++)
		{
			for (x = 0; x < columns; x++)
			{
				if ('.' == labels[y][x])
				{
					if (true == FindSink((int *) map, (char *) labels, rows, columns, x, y, label))
						label++;
				}
			}
		}

		output << "Case #" << testCaseIndex + 1 << ":" << endl;
		for (y = 0; y < rows; y++)
		{
			for (x = 0; x < columns; x++)
			{
				output << labels[y][x] << " ";
			}
			output << endl;
		}
	}

	exit : ;

	if (input.is_open())
		input.close();

	if (output.is_open())
		output.close();

	return 0;
}


/*

// Console.cpp : Defines the entry point for the console application.
//

#include <time.h>

#include <iostream>
#include <string.h>
#include "stdafx.h"

using namespace std;

#define CopyBits(source, target, sourceBitCount, sourceBitLocation, targetBitLocation)              \
{                                                                                                   \
	unsigned long long copyBitsMask = 0xFFFFFFFFFFFFFFFF;                                                    \
                                                                                                    \
	copyBitsMask = copyBitsMask << (64 - sourceBitCount);                                           \
	copyBitsMask = copyBitsMask >> (64 - sourceBitLocation);                                        \
                                                                                                    \
	if (sourceBitLocation < targetBitLocation)                                                      \
	{                                                                                               \
		target = (((long long) source & copyBitsMask) << (targetBitLocation - sourceBitLocation)) | \
			((long long) target & (~ (copyBitsMask << (targetBitLocation - sourceBitLocation))));   \
	}                                                                                               \
	else                                                                                            \
	{                                                                                               \
		target = (((long long) source & copyBitsMask) >> (sourceBitLocation - targetBitLocation)) | \
			((long long) target & (~ (copyBitsMask >> (sourceBitLocation - targetBitLocation))));   \
	}                                                                                               \
}

#define ShiftBuffer(pBuffer, bufferSize, newByte, i)     \
{                                                        \
	for (i = 0; i < bufferSize; i++)                     \
	{                                                    \
		pBuffer[i] = pBuffer[i] << 1;                    \
                                                         \
		if (i + 1 < bufferSize)                          \
			pBuffer[i] |= (pBuffer[i + 1] & 0x80) >> 7;  \
		else                                             \
			pBuffer[i] |= (newByte & 0x80) >> 7;         \
	}                                                    \
                                                         \
	newByte = newByte << 1;                              \
}

enum
{
	a,
	b
};

#define A a
#define B b
#define C B

int _tmain(int argc, _TCHAR * argv[])
{
	char str1[40] = { 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a' };
	char str2[40] = { 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a', 'a' };
	int i = 3;
	int k = 2;

	for (i = 5; i < 412; i++)
	{
		if (0 == 412 % i)
			break;
	}

//	str1[8] = '.';
    strcpy( &str1[8], ".CFG" );

    str2[8] = '.';
    strcpy( &str2[8], ".CFG" );

	bool bb = false;

#if C == B
	cout << "C == B" << endl;
#else
	cout << "C != B" << endl;
#endif


	if (3 == i)
		cout << "i = 2" << endl;
	else

	if (2 == k)
	{
		cout << "k = 1" << endl;
	}

	switch (i)
	{
	default:
		cout << "Default" << endl;
	case 1:
		cout << "Case 1" << endl;
		break;
	case 2:
		cout << "Case 2" << endl;
		break;
	case 3:
		cout << "Case 3" << endl;
		break;
	}

	char      source2[5] = { 0x00, 0x00, 0x75, 0x00, 0x00 };
	char      target2[5] = { 0x00, 0x00, 0x00, 0x00, 0x00 };
//	long long source = 0x70923485dfa09834;
//	long long target = 0x0000000000000000;


//	CopyBits(source, target, 8, 62, 40);
/*
	unsigned long long copyBitsMask      = 0xFFFFFFFFFFFFFFFF;                                                    
	unsigned long      sourceBitCount    = 3;
	unsigned long      sourceBitLocation = 5;
	unsigned long      targetBitLocation = 6;

	copyBitsMask = copyBitsMask << (64 - sourceBitCount);                                           
	copyBitsMask = copyBitsMask >> (64 - sourceBitLocation);                                        
                                                                                                    
	if (sourceBitLocation < targetBitLocation)                                                      
	{                                                                                               
		target = (((long long) source & copyBitsMask) << (targetBitLocation - sourceBitLocation)) | 
			((long long) target & (~ (copyBitsMask << (targetBitLocation - sourceBitLocation))));   
	}                                                                                               
	else                                                                                            
	{                                                                                               
		target = (((long long) source & copyBitsMask) >> (sourceBitLocation - targetBitLocation)) | 
			((long long) target & (~ (copyBitsMask >> (sourceBitLocation - targetBitLocation))));   
	}                                                                                               
*/
/*
	CopyBits(source2[2], target2[2], 3, 5, 6);

	bool b = false;

/*
	char time[24];
	int  i;
	unsigned char b[16];
	unsigned int  j[16];

	FILE * pFile = fopen("E:\\2009-085 22-32 L-Band Debug - 1.txt", "rt");
	FILE * pFile2 = fopen("E:\\2009-085 22-32 L-Band Debug - 1.out", "wb");

	while (!feof(pFile))
	{
		//
		//  Read the time.
		//
		fscanf(pFile, "%s", time);

		//
		//  Read
		//
		for (i = 0; i < 128; i++)
		{
			fscanf(pFile, "%x, %x, %x, %x, %x, %x, %x, %x, %x, %x, %x, %x, %x, %x, %x, %x, ",
				& j[0], & j[1], & j[2], & j[3], & j[4], & j[5], & j[6], & j[7], & j[8], & j[9],
				& j[10], & j[11], & j[12], & j[13], & j[14], & j[15]);

			for (int k = 0; k < 16; k++)
				b[k] = (unsigned char) j[k];

			fwrite(& b[4], 4, 1, pFile2);
			fwrite(& b[12], 4, 1, pFile2);
		}
	}

	fclose(pFile);
	fclose(pFile2);
*/
/*
	return 0;
}
/*
{
	FILE * pFile = fopen("DataOut.txt", "wb");
	char   pBuffer[] =
	{
		0x00, 0x00, 0x40, 0x26, 0x02, 0x00, 0x00, 0x00,
		0x01, 0x00, 0x00, 0x27, 0x03, 0x00, 0x00, 0x00,
		0x02, 0x00, 0x60, 0x27, 0x04, 0x00, 0x00, 0x00,
		0x03, 0x00, 0x30, 0x28, 0x48, 0xE1, 0x5A, 0x3F,
		0x04, 0x00, 0x90, 0x28, 0x00, 0x00, 0xC0, 0x40,
		0x05, 0x00, 0x60, 0x29, 0x00, 0x00, 0xE0, 0x40,
		0x06, 0x00, 0x20, 0x30, 0xFE, 0xFF, 0x1F, 0x00,
		0x07, 0x00, 0x80, 0x30, 0xFE, 0xFF, 0x23, 0x00,
		0x08, 0x00, 0x50, 0x31, 0xFE, 0xFF, 0x27, 0x00,
		0x09, 0x00, 0x10, 0x32, 0x00, 0x00, 0xD2, 0x07,
		0x0A, 0x00, 0x80, 0x32, 0x9D, 0x6D, 0x00, 0x00,
		0x0B, 0x00, 0x40, 0x33, 0xA0, 0x01, 0x3E, 0x09,
		0x0C, 0x00, 0x00, 0x34, 0xC0, 0x01, 0xC0, 0x01,
		0x0D, 0x00, 0x70, 0x34, 0xD8, 0x44, 0x42, 0x25,
		0x0E, 0x00, 0x30, 0x35, 0x4D, 0xA1, 0x19, 0xBB,
		0x0F, 0x00, 0x00, 0x36, 0x00, 0x20, 0x04, 0x00,
		0x10, 0x00, 0x60, 0x36, 0x00, 0x40, 0x00, 0x40,
		0x11, 0x00, 0x20, 0x37, 0x13, 0x13, 0xC4, 0x09,
		0x12, 0x00, 0x90, 0x37, 0x14, 0x00, 0x00, 0x00,
		0x13, 0x00, 0x50, 0x38, 0x15, 0x00, 0x00, 0x00,
		0x14, 0x00, 0x20, 0x39, 0x16, 0x00, 0x00, 0x00,
		0x15, 0x00, 0x80, 0x39, 0x17, 0x00, 0x00, 0x00,
		0x16, 0x00, 0x40, 0x40, 0x18, 0x00, 0x00, 0x00,
		0x17, 0x00, 0x10, 0x41, 0x19, 0x00, 0x00, 0x00,
		0x18, 0x00, 0x70, 0x41, 0x1A, 0x00, 0x00, 0x00,
		0x19, 0x00, 0x40, 0x42, 0x1B, 0x00, 0x00, 0x00,
		0x1A, 0x00, 0x00, 0x43, 0x1C, 0x00, 0x00, 0x00,
		0x1B, 0x00, 0x60, 0x43, 0x1D, 0x00, 0x00, 0x00,
		0x1C, 0x00, 0x30, 0x44, 0x1E, 0x00, 0x00, 0x00,
		0x1D, 0x00, 0x90, 0x44, 0x1F, 0x00, 0x00, 0x1F,
		0x1E, 0x00, 0x60, 0x45, 0x20, 0x00, 0x00, 0x00,
		0x1F, 0x00, 0x20, 0x46, 0x21, 0x00, 0x00, 0x00,
		0x20, 0x00, 0x80, 0x46, 0x22, 0x00, 0x00, 0x00,
		0x21, 0x00, 0x50, 0x47, 0x23, 0x00, 0x00, 0x23,
		0x22, 0x00, 0x10, 0x48, 0x24, 0x00, 0x00, 0x00,
		0x23, 0x00, 0x80, 0x48, 0x25, 0x25, 0x25, 0x25,
		0x24, 0x00, 0x40, 0x49, 0x26, 0x00, 0x00, 0x00,
		0x25, 0x00, 0x00, 0x50, 0x27, 0x00, 0x00, 0x00,
		0x26, 0x00, 0x70, 0x50, 0x28, 0x00, 0x00, 0x00,
		0x27, 0x00, 0x30, 0x51, 0x29, 0x00, 0x00, 0x00,
		0x28, 0x00, 0x00, 0x52, 0x2A, 0x00, 0x00, 0x00,
		0x29, 0x00, 0x60, 0x52, 0x2B, 0x2B, 0x2B, 0x2B,
		0x2A, 0x00, 0x20, 0x53, 0x2C, 0x00, 0x00, 0x00,
		0x2B, 0x00, 0x90, 0x53, 0x2D, 0x00, 0x00, 0x00,
		0x2C, 0x00, 0x50, 0x54, 0x2E, 0x00, 0x00, 0x00,
		0x2D, 0x00, 0x20, 0x55, 0x2F, 0x00, 0x00, 0x00,
		0x2E, 0x00, 0x80, 0x55, 0x30, 0x00, 0x00, 0x00,
		0x2F, 0x00, 0x40, 0x56, 0x31, 0x31, 0x31, 0x31,
		0x30, 0x00, 0x10, 0x57, 0x32, 0x00, 0x00, 0x00,
		0x31, 0x00, 0x70, 0x57, 0x95, 0x22, 0x22, 0x12,
		0x32, 0x00, 0x40, 0x58, 0x47, 0x28, 0x7D, 0x12,
		0x33, 0x00, 0x00, 0x59, 0x35, 0x35, 0x00, 0x00,
		0x34, 0x00, 0x60, 0x59, 0x36, 0x00, 0x00, 0x00,
		0x35, 0x00, 0x30, 0x60, 0xBF, 0x72, 0x1C, 0x27,
		0x36, 0x00, 0x90, 0x60, 0x24, 0x7E, 0xD2, 0x27,
		0x37, 0x00, 0x60, 0x61, 0x89, 0x89, 0x88, 0x28,
		0x38, 0x00, 0x20, 0x62, 0xEF, 0x94, 0x3E, 0x29,
		0x39, 0x00, 0x80, 0x62, 0x3B, 0x00, 0x00, 0x00,
		0x3A, 0x00, 0x50, 0x63, 0x3C, 0x00, 0x00, 0x00,
		0x3B, 0x00, 0x10, 0x64, 0x3D, 0x00, 0x00, 0x00,
		0x3C, 0x00, 0x80, 0x64, 0x3E, 0x00, 0x00, 0x00,
		0x3D, 0x00, 0x40, 0x65, 0x3F, 0x00, 0x00, 0x00,
		0x3E, 0x00, 0x00, 0x66, 0x40, 0x00, 0x00, 0x00,
		0x3F, 0x00, 0x70, 0x66, 0x41, 0x00, 0x00, 0x00,
		0x40, 0x00, 0x30, 0x67, 0x42, 0x00, 0x00, 0x00,
		0x41, 0x00, 0x00, 0x68, 0x43, 0x00, 0x00, 0x00,
		0x42, 0x00, 0x60, 0x68, 0x44, 0x00, 0x00, 0x00,
		0x43, 0x00, 0x20, 0x69, 0x45, 0x00, 0x00, 0x00,
		0x44, 0x00, 0x90, 0x69, 0x46, 0x00, 0x00, 0x00,
		0x45, 0x00, 0x50, 0x70, 0x47, 0x00, 0x00, 0x00,
		0x46, 0x00, 0x20, 0x71, 0x48, 0x00, 0x00, 0x00,
		0x47, 0x00, 0x80, 0x71, 0x49, 0x00, 0x00, 0x00,
		0x48, 0x00, 0x40, 0x72, 0x4A, 0x00, 0x00, 0x00,
		0x49, 0x00, 0x10, 0x73, 0x4B, 0x00, 0x00, 0x00,
		0x4A, 0x00, 0x70, 0x73, 0x4C, 0x00, 0x00, 0x00,
		0x4B, 0x00, 0x40, 0x74, 0x4D, 0x00, 0x00, 0x00,
		0x4C, 0x00, 0x00, 0x75, 0x4E, 0x00, 0x00, 0x00,
		0x4D, 0x00, 0x60, 0x75, 0x4F, 0x00, 0x00, 0x00,
		0x4E, 0x00, 0x30, 0x76, 0x50, 0x00, 0x00, 0x00,
		0x4F, 0x00, 0x90, 0x76, 0x51, 0x00, 0x00, 0x00,
		0x50, 0x00, 0x60, 0x77, 0x52, 0x00, 0x00, 0x00,
		0x51, 0x00, 0x20, 0x78, 0x53, 0x53, 0x53, 0x53,
		0x52, 0x00, 0x80, 0x78, 0x54, 0x00, 0x00, 0x00,
		0x53, 0x00, 0x50, 0x79, 0x55, 0x00, 0x00, 0x00,
		0x54, 0x00, 0x10, 0x80, 0x56, 0x56, 0x00, 0x00,
		0x55, 0x00, 0x80, 0x80, 0x57, 0x00, 0x00, 0x00,
		0x56, 0x00, 0x40, 0x81, 0x58, 0x00, 0x00, 0x58,
		0x57, 0x00, 0x00, 0x82, 0x59, 0x00, 0x00, 0x00,
		0x58, 0x00, 0x70, 0x82, 0x5A, 0x00, 0x00, 0x00,
		0x59, 0x00, 0x30, 0x83, 0x5B, 0x5B, 0x5B, 0x5B,
		0x5A, 0x00, 0x00, 0x84, 0x5C, 0x5C, 0x5C, 0x5C,
		0x5B, 0x00, 0x60, 0x84, 0x5D, 0x00, 0x00, 0x00,
		0x5C, 0x00, 0x20, 0x85, 0x5E, 0x00, 0x00, 0x00,
		0x5D, 0x00, 0x90, 0x85, 0x5F, 0x00, 0x00, 0x00,
		0x5E, 0x00, 0x50, 0x86, 0x60, 0x00, 0x00, 0x00,
		0x5F, 0x00, 0x20, 0x87, 0x61, 0x00, 0x00, 0x00,
		0x60, 0x00, 0x80, 0x87, 0x62, 0x00, 0x00, 0x00,
		0x61, 0x00, 0x40, 0x88, 0x63, 0x00, 0x00, 0x00,
		0x62, 0x00, 0x10, 0x89, 0x64, 0x00, 0x00, 0x00,
		0x63, 0x00, 0x70, 0x89, 0x65, 0x00, 0x00, 0x00,
		0x64, 0x00, 0x40, 0x90, 0x66, 0x00, 0x00, 0x00,
		0x65, 0x00, 0x00, 0x91, 0x67, 0x00, 0x00, 0x00,
		0x66, 0x00, 0x60, 0x91, 0x68, 0x00, 0x00, 0x00,
		0x67, 0x00, 0x30, 0x92, 0x69, 0x00, 0x00, 0x00,
		0x68, 0x00, 0x90, 0x92, 0x6A, 0x00, 0x00, 0x00,
		0x69, 0x00, 0x60, 0x93, 0x6B, 0x00, 0x00, 0x00,
		0x6A, 0x00, 0x20, 0x94, 0x6C, 0x00, 0x00, 0x00,
		0x6B, 0x00, 0x80, 0x94, 0x6D, 0x00, 0x00, 0x00,
		0x6C, 0x00, 0x50, 0x95, 0x6E, 0x00, 0x00, 0x00,
		0x6D, 0x00, 0x10, 0x96, 0x6F, 0x00, 0x00, 0x00,
		0x6E, 0x00, 0x80, 0x96, 0x70, 0x00, 0x00, 0x00,
		0x6F, 0x00, 0x40, 0x97, 0x71, 0x00, 0x00, 0x00,
		0x70, 0x00, 0x00, 0x98, 0x72, 0x00, 0x00, 0x00,
		0x71, 0x00, 0x70, 0x98, 0x73, 0x00, 0x00, 0x00,
		0x72, 0x00, 0x30, 0x99, 0x74, 0x00, 0x00, 0x00,
		0x73, 0x00, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00,
		0x74, 0x00, 0x60, 0x00, 0x76, 0x00, 0x00, 0x00,
		0x75, 0x00, 0x20, 0x01, 0x77, 0x00, 0x00, 0x00,
		0x76, 0x00, 0x90, 0x01, 0x78, 0x00, 0x00, 0x00,
		0x77, 0x00, 0x50, 0x02, 0x79, 0x00, 0x00, 0x00,
		0x78, 0x00, 0x20, 0x03, 0x7A, 0x00, 0x00, 0x00,
		0x79, 0x00, 0x80, 0x03, 0x7B, 0x00, 0x00, 0x00,
		0x7A, 0x00, 0x40, 0x04, 0x7C, 0x00, 0x00, 0x00,
		0x7B, 0x00, 0x10, 0x05, 0x7D, 0x00, 0x00, 0x00,
		0x7C, 0x00, 0x70, 0x05, 0x7E, 0x00, 0x00, 0x00,
		0x7D, 0x00, 0x40, 0x06, 0x7F, 0x00, 0x00, 0x00,
		0x7E, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00,
		0x7F, 0x00, 0x60, 0x07, 0x00, 0x00, 0x01, 0x43,
		0x80, 0x00, 0x30, 0x08, 0x00, 0x00, 0x02, 0x43,
		0x81, 0x00, 0x90, 0x08, 0x00, 0x00, 0x03, 0x43,
		0x82, 0x00, 0x60, 0x09, 0x84, 0x00, 0x84, 0x84,
		0x83, 0x00, 0x20, 0x10, 0x85, 0x85, 0x85, 0x85,
		0x84, 0x00, 0x80, 0x10, 0x86, 0x86, 0x86, 0x86,
		0x85, 0x00, 0x50, 0x11, 0x87, 0x87, 0x87, 0x87,
		0x86, 0x00, 0x10, 0x12, 0x88, 0x88, 0x88, 0x88,
		0x87, 0x00, 0x80, 0x12, 0x89, 0x89, 0x89, 0x89,
		0x88, 0x00, 0x40, 0x13, 0x8A, 0x8A, 0x8A, 0x8A,
		0x89, 0x00, 0x00, 0x14, 0x8B, 0x8B, 0x8B, 0x8B,
		0x8A, 0x00, 0x70, 0x14, 0x8C, 0x00, 0x8C, 0x8C,
		0x8B, 0x00, 0x30, 0x15, 0x8D, 0x00, 0x00, 0x00,
		0x8C, 0x00, 0x00, 0x16, 0x8E, 0x00, 0x00, 0x00,
		0x8D, 0x00, 0x60, 0x16, 0x8F, 0x00, 0x00, 0x00,
		0x8E, 0x00, 0x20, 0x17, 0x90, 0x00, 0x00, 0x00,
		0x8F, 0x00, 0x90, 0x17, 0x91, 0x00, 0x00, 0x00,
		0x90, 0x00, 0x50, 0x18, 0x92, 0x00, 0x00, 0x00,
		0x91, 0x00, 0x20, 0x19, 0x93, 0x00, 0x00, 0x00,
		0x92, 0x00, 0x80, 0x19, 0x94, 0x00, 0x00, 0x00,
		0x93, 0x00, 0x40, 0x20, 0x95, 0x00, 0x00, 0x00,
		0x94, 0x00, 0x10, 0x21, 0x96, 0x00, 0x00, 0x00,
		0x95, 0x00, 0x70, 0x21, 0x97, 0x00, 0x00, 0x00,
		0x96, 0x00, 0x40, 0x22, 0x98, 0x00, 0x00, 0x00,
		0x97, 0x00, 0x00, 0x23, 0x00, 0x20, 0x63, 0x40,
		0x98, 0x00, 0x60, 0x23, 0x00, 0x00, 0x00, 0x00,
		0x99, 0x00, 0x30, 0x24, 0x5F, 0xA4, 0x05, 0x40,
		0x9A, 0x00, 0x90, 0x24, 0x0E, 0xBC, 0xBB, 0x06,
		0x9B, 0x00, 0x60, 0x25, 0xDC, 0xEB, 0x05, 0x40,
		0x9C, 0x00, 0x20, 0x26, 0x7D, 0x2B, 0x98, 0x1F,
		0x9D, 0x00, 0x80, 0x26, 0x00, 0xE0, 0x63, 0x40,
		0x9E, 0x00, 0x50, 0x27, 0x00, 0x00, 0x00, 0x00,
		0x9F, 0x00, 0x10, 0x28, 0xD6, 0x7A, 0x06, 0x40,
		0xA0, 0x00, 0x80, 0x28, 0x5A, 0x0A, 0x51, 0x51,
		0xA1, 0x00, 0x40, 0x29, 0x53, 0xC2, 0x06, 0x40,
		0xA2, 0x00, 0x00, 0x30, 0xC9, 0x79, 0x2D, 0x6A,
		0xA3, 0x00, 0x70, 0x30, 0x00, 0xA0, 0x64, 0x40,
		0xA4, 0x00, 0x30, 0x31, 0x00, 0x00, 0x00, 0x00,
		0xA5, 0x00, 0x00, 0x32, 0x00, 0xE0, 0x64, 0x40,
		0xA6, 0x00, 0x60, 0x32, 0x00, 0x00, 0x00, 0x00,
		0xA7, 0x00, 0x20, 0x33, 0x00, 0x20, 0x65, 0x40,
		0xA8, 0x00, 0x90, 0x33, 0x00, 0x00, 0x00, 0x00,
		0xA9, 0x00, 0x50, 0x34, 0xAB, 0x00, 0x00, 0x00,
		0xAA, 0x00, 0x20, 0x35, 0xAC, 0x00, 0x00, 0x00,
		0xAB, 0x00, 0x80, 0x35, 0xAD, 0x00, 0x00, 0x00,
		0xAC, 0x00, 0x40, 0x36, 0xAE, 0x00, 0x00, 0x00,
		0xAD, 0x00, 0x10, 0x37, 0xAF, 0x00, 0x00, 0x00,
		0xAE, 0x00, 0x70, 0x37, 0xB0, 0x00, 0x00, 0x00,
		0xAF, 0x00, 0x40, 0x38, 0x00, 0x20, 0x66, 0x40,
		0xB0, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x00,
		0xB1, 0x00, 0x60, 0x39, 0x3C, 0xFE, 0x08, 0x40,
		0xB2, 0x00, 0x30, 0x40, 0x40, 0xF5, 0x10, 0x31,
		0xB3, 0x00, 0x90, 0x40, 0xB9, 0x45, 0x09, 0x40,
		0xB4, 0x00, 0x60, 0x41, 0xAF, 0x64, 0xED, 0x49,
		0xB5, 0x00, 0x20, 0x42, 0xA2, 0xE3, 0x4B, 0x40,
		0xB6, 0x00, 0x80, 0x42, 0x76, 0x8A, 0x7E, 0x8D,
		0xB7, 0x00, 0x50, 0x43, 0xB9, 0x00, 0x00, 0x00,
		0xB8, 0x00, 0x10, 0x44, 0x90, 0xC3, 0x4F, 0x40,
		0xB9, 0x00, 0x80, 0x44, 0x85, 0xE1, 0x50, 0x40,
		0xBA, 0x00, 0x40, 0x45, 0xBC, 0x00, 0x00, 0x00,
		0xBB, 0x00, 0x00, 0x46, 0xBD, 0x00, 0x00, 0x00,
		0xBC, 0x00, 0x70, 0x46, 0xBE, 0x00, 0x00, 0x00,
		0xBD, 0x00, 0x30, 0x47, 0xBF, 0x00, 0x00, 0x00,
		0xBE, 0x00, 0x00, 0x48, 0xC0, 0x00, 0x00, 0x00,
		0xBF, 0x00, 0x60, 0x48, 0xC1, 0x00, 0x00, 0x00,
		0xC0, 0x00, 0x20, 0x49, 0xC2, 0x00, 0x00, 0x00,
		0xC1, 0x00, 0x90, 0x49, 0x1A, 0xAE, 0xAA, 0x8A,
		0xC2, 0x00, 0x50, 0x50, 0x80, 0xB9, 0x60, 0x8B,
		0xC3, 0x00, 0x20, 0x51, 0x16, 0x8C, 0x16, 0x8C,
		0xC4, 0x00, 0x80, 0x51, 0xC6, 0xC6, 0xCC, 0x8C,
		0xC5, 0x00, 0x40, 0x52, 0xC7, 0xC7, 0xC7, 0xC7,
		0xC6, 0x00, 0x10, 0x53, 0xC8, 0x00, 0x00, 0x00,
		0xC7, 0x00, 0x70, 0x53, 0xC9, 0x00, 0x00, 0x00,
		0xC8, 0x00, 0x40, 0x54, 0xCA, 0x00, 0x00, 0x00,
		0xC9, 0x00, 0x00, 0x55, 0xCB, 0x00, 0x00, 0x00,
		0xCA, 0x00, 0x60, 0x55, 0xCC, 0x00, 0x00, 0x00,
		0xCB, 0x00, 0x30, 0x56, 0xCD, 0xCD, 0xCD, 0xCD,
		0xCC, 0x00, 0x90, 0x56, 0xCE, 0xCE, 0xCE, 0xCE,
		0xCD, 0x00, 0x60, 0x57, 0xCF, 0xCF, 0xCF, 0xCF,
		0xCE, 0x00, 0x20, 0x58, 0xD0, 0xD0, 0xD0, 0xD0,
		0xCF, 0x00, 0x80, 0x58, 0xD1, 0x00, 0x00, 0x00,
		0xD0, 0x00, 0x50, 0x59, 0xD2, 0x00, 0x00, 0x00,
		0xD1, 0x00, 0x10, 0x60, 0xD3, 0x00, 0x00, 0x00,
		0xD2, 0x00, 0x80, 0x60, 0xD4, 0x00, 0x00, 0x00,
		0xD3, 0x00, 0x40, 0x61, 0xD5, 0x00, 0x00, 0x00,
		0xD4, 0x00, 0x00, 0x62, 0xD6, 0x00, 0x00, 0x00,
		0xD5, 0x00, 0x70, 0x62, 0xD7, 0x00, 0x00, 0x00,
		0xD6, 0x00, 0x30, 0x63, 0xD8, 0x00, 0x00, 0x00,
		0xD7, 0x00, 0x00, 0x64, 0xD9, 0x00, 0x00, 0x00,
		0xD8, 0x00, 0x60, 0x64, 0xDA, 0x00, 0x00, 0x00,
		0xD9, 0x00, 0x20, 0x65, 0xDB, 0x00, 0x00, 0x00,
		0xDA, 0x00, 0x90, 0x65, 0xDC, 0x00, 0x00, 0x00,
		0xDB, 0x00, 0x50, 0x66, 0xDD, 0x00, 0x00, 0x00,
		0xDC, 0x00, 0x20, 0x67, 0xDE, 0x00, 0x00, 0x00,
		0xDD, 0x00, 0x80, 0x67, 0xDF, 0x00, 0x00, 0x00,
		0xDE, 0x00, 0x40, 0x68, 0xE0, 0x00, 0x00, 0x00,
		0xDF, 0x00, 0x10, 0x69, 0xE1, 0x00, 0x00, 0x00,
		0xE0, 0x00, 0x70, 0x69, 0xE2, 0x00, 0x00, 0x00,
		0xE1, 0x00, 0x40, 0x70, 0xE3, 0x00, 0x00, 0x00,
		0xE2, 0x00, 0x00, 0x71, 0xE4, 0x00, 0x00, 0x00,
		0xE3, 0x00, 0x60, 0x71, 0xE5, 0x00, 0x00, 0x00,
		0xE4, 0x00, 0x30, 0x72, 0xE6, 0x00, 0x00, 0x00,
		0xE5, 0x00, 0x90, 0x72, 0xE7, 0x00, 0x00, 0x00,
		0xE6, 0x00, 0x60, 0x73, 0xE8, 0x00, 0x00, 0x00,
		0xE7, 0x00, 0x20, 0x74, 0xE9, 0x00, 0x00, 0x00,
		0xE8, 0x00, 0x80, 0x74, 0xEA, 0x00, 0x00, 0x00,
		0xE9, 0x00, 0x50, 0x75, 0xEB, 0x00, 0x00, 0x00,
		0xEA, 0x00, 0x10, 0x76, 0xEC, 0x00, 0x00, 0x00,
		0xEB, 0x00, 0x80, 0x76, 0xED, 0x00, 0x00, 0x00,
		0xEC, 0x00, 0x40, 0x77, 0xEE, 0x00, 0x00, 0x00,
		0xED, 0x00, 0x00, 0x78, 0xEF, 0x00, 0x00, 0x00,
		0xEE, 0x00, 0x70, 0x78, 0xF0, 0x00, 0x00, 0x00,
		0xEF, 0x00, 0x30, 0x79, 0xF1, 0x00, 0x00, 0x00,
		0xF0, 0x00, 0x00, 0x80, 0xF2, 0x00, 0x00, 0x00,
		0xF1, 0x00, 0x60, 0x80, 0xF3, 0x00, 0x00, 0x00,
		0xF2, 0x00, 0x20, 0x81, 0xF4, 0x00, 0x00, 0x00,
		0xF3, 0x00, 0x90, 0x81, 0xF5, 0x00, 0x00, 0x00,
		0xF4, 0x00, 0x50, 0x82, 0xF6, 0x00, 0x00, 0x00,
		0xF5, 0x00, 0x20, 0x83, 0xF7, 0x00, 0x00, 0x00,
		0xF6, 0x00, 0x80, 0x83, 0xF8, 0x00, 0x00, 0x00,
		0xF7, 0x00, 0x40, 0x84, 0xF9, 0x00, 0x00, 0x00,
		0xF8, 0x00, 0x10, 0x85, 0xFA, 0x00, 0x00, 0x00,
		0xF9, 0x00, 0x70, 0x85, 0xFB, 0x00, 0x00, 0x00,
		0xFA, 0x00, 0x40, 0x86, 0xFC, 0x00, 0x00, 0x00,
		0xFB, 0x00, 0x00, 0x87, 0xFD, 0x00, 0x00, 0x00,
		0xFC, 0x00, 0x60, 0x87, 0xFE, 0x00, 0xFE, 0x00,
		0xFD, 0x00, 0x30, 0x88, 0xFF, 0x00, 0x00, 0x00,
		0xFE, 0x79, 0x70, 0x13, 0x40, 0x28, 0x6B, 0xFE,
		0xFF, 0x79, 0x30, 0x14, 0x01, 0x00, 0x00, 0x00
	};
	int    i = 0;

	for (i = 4; i < sizeof (pBuffer); i += 8)
	{
		fwrite(& pBuffer[i], 4, 1, pFile);
	}
	
	fclose(pFile);
	pFile = NULL;

	return 0;
}
*/

/*
typedef unsigned char _uint8;
typedef unsigned int _uint32;

#define CRC_TABLE_SIZE  256
static _uint32 Crc32Table[CRC_TABLE_SIZE];

unsigned long Build1071InternetCheckSum(const unsigned long * pBuffer, int bufferLength)
{
	int             index       = 0;
	unsigned char * pCharBuffer = NULL;
	unsigned long   returnCode  = 0;

	for (index = 0; index < bufferLength; index++)
	{
		pCharBuffer = (unsigned char *) & pBuffer[index];

		returnCode += (pCharBuffer[0] << 8) + pCharBuffer[1];
		if (returnCode & 0x10000)
		{
			returnCode += 1;
			returnCode  = returnCode & 0xFFFF;
		}

		returnCode += (pCharBuffer[2] << 8) + pCharBuffer[3];
		if (returnCode & 0x10000)
		{
			returnCode += 1;
			returnCode  = returnCode & 0xFFFF;
		}
	}

	if (0xFFFF > returnCode)
		returnCode  = 0xFFFF - returnCode;

	pCharBuffer = (unsigned char *) & returnCode;

	return (pCharBuffer[0] << 8) + pCharBuffer[1];
}

typedef unsigned char _uint8;
typedef unsigned int _uint32;

#define CRC_TABLE_SIZE  256
static _uint32 Crc32Table[CRC_TABLE_SIZE];

void InitCrc32Table(void)
{
    static bool initialized = false;

    if (!initialized)
    {
        const unsigned long POLYNOMIAL = 0x04C11DB7;	// Little
//        const unsigned long POLYNOMIAL = 0xEDB88320;	// Big
        register int i,j;
        register unsigned long crc;
   
        for (i = 0; i < CRC_TABLE_SIZE; i++)
        {
            crc = ( (unsigned long) i << 24 );
            for (j = 0; j < 8; j++)
            {
                if (crc & 0x80000000)
                    crc = (crc << 1) ^ POLYNOMIAL;
                else
                    crc <<= 1;
            }
            Crc32Table[i] = crc;
        }
        initialized = true; // last to signal only after table completion
    }
    
} /* InitCrc32Table */ 


/*-h-
 ***************************************************************************
 *  
 *  Ecc32CrcClass::Ecc32CrcClass
 *  
 *  Constructor for the Ecc32CrcClass.  This must initialize the Crc Table.
 *  
 ***************************************************************************

 Ecc32CrcClass::Ecc32CrcClass()
{
    InitCrc32Table();

}



 ***************************************************************************
 *  
 *  Ecc32CrcClass::CalcCode
 *  
 *  Return the sum of all bytes of data.
 *  
 ***************************************************************************

_uint32 CalcCode(const _uint8 *data, _uint32 len) 
{
    _uint32 crc32   = 0;
    _uint32 crc_reg = ~0;
    _uint8 c;

    while (len)
    {
        c = *data;
        data++;
        len--;

        crc_reg = Crc32Table[((crc_reg >> 24) ^ c) & 0xFF] ^ (crc_reg << 8);
    }
    crc32 = ~crc_reg;

    return (crc32);

}


int _tmain(int argc, _TCHAR * argv[])
{

	int           bufferIndex     = 0;
	unsigned long buffer[255]     = {0};
	unsigned long myCheckSum      = 0;
	unsigned long myCheckSum2     = 0;
	unsigned long ulCalculatedCrc = 0;

	InitCrc32Table();

	for (bufferIndex = 0; bufferIndex < sizeof (buffer) / sizeof (unsigned long); bufferIndex++)
		buffer[bufferIndex] = (unsigned int) rand();
	buffer[0] = 0x0001f203;
	buffer[1] = 0xf4f5f6f7;

//	myCheckSum  = Build1071InternetCheckSum(buffer, sizeof (buffer) / sizeof (unsigned long));
	myCheckSum  = Build1071InternetCheckSum(buffer, 2);
	buffer[2]   = myCheckSum;
	myCheckSum2 = Build1071InternetCheckSum(buffer, 3);

	ulCalculatedCrc = CalcCode((_uint8 *)buffer, 12);
	
	return 0;
}
*/

/*
int _tmain(int argc, _TCHAR* argv[])
{
	unsigned long temp[] =
	{
		0xFE6B2840, 0x00010000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
		0x00000000, 0x00000000, 0x0000DEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFFE6B, 0x28400002, 0x00000000, 0x0000DEAD, 0xDEADDEAD, 0xDEADDEAD,
		0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD,
		0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xFE6B2840, 0x00030000, 0x00000000, 0xDEADDEAD, 0xDEADDEAD,
		0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD,
		0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFFE6B, 0x28400004, 0x00000000, 0x0000DEAD, 0xDEADDEAD,
		0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD,
		0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xFE6B2840, 0x00050000, 0x00000000, 0xDEADDEAD,
		0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD,
		0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFFE6B, 0x28400006, 0x00000000, 0x0000DEAD,
		0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD,
		0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xFE6B2840, 0x00070000, 0x00000000,
		0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD,
		0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFFE6B, 0x28400008, 0x00000000,
		0x0000DEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD,
		0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xFE6B2840, 0x00090000,
		0x00000000, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD,
		0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD,
		0xDEADDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFFE6B, 0x2840000A,
		0x00000000, 0x0000DEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD,
		0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD,
		0xDEADDEAD, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xFE6B2840,
		0x000B0000, 0x00000000, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD,
		0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD,
		0xDEADDEAD, 0xDEADDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD,
		0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFDEAD, 0xBEEFFE6B,
		0x2840000C, 0x00000000, 0x0000DEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD,
		0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD, 0xDEADDEAD,
		0xDEADDEAD, 0xDEADDEAD, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF,
		0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF, 0xDEADBEEF
	};

	char buffer[4] = {0xFE, 0x6B, 0x28, 0x40};
	long l1        = * ((long *) & buffer);
	long l2        = 0xFE6B2840;
	char data[] =
	{
		0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,
		0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
		0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38,
		0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48,
		0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
		0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68,
		0x71, 0x72, 0x73, 0x74
	};


	((char *) temp)[4] = data[1];
	((char *) temp)[5] = data[0];
	bool b = false;

	//  0xFE, 0x6B, 0x28, 0x40, 0x00, 0x01, 0xD7, 0x65
	//  0x40, 0x28, 0x6B, 0xFE, 0x02, 0x01, 0x01, 0x00

/*
	FILE * pFile         = fopen("Out.out", "wt");
	int    index         = 0;
	int    subFrameCount = 0;

	for (subFrameCount = 0; subFrameCount < 12; subFrameCount++)
	{
		fprintf(pFile, "0xFE, 0x6B, 0x28, 0x40, ");
		fprintf(pFile, "0x00, 0x%02X, ", subFrameCount);

		for (index = 6; index < 58; index++)
		{
			if (0 == subFrameCount)
			{
				fprintf(pFile, "0x00, ");
			}
			else
			{
				if (0 == index % 2)
					fprintf(pFile, "0xDE, ");
				else
					fprintf(pFile, "0xAD, ");
			}
		}

		for (index = 58; index < 194; index++)
		{
			if (2 == index % 4)
				fprintf(pFile, "0xBE, ");
			else if (3 == index % 4)
				fprintf(pFile, "0xEF, ");
			else if (0 == index % 4)
				fprintf(pFile, "0xDE, ");
			else
				fprintf(pFile, "0xAD, ");
		}
	}

	fclose(pFile);
	pFile = NULL;

	return 0;
}
*/
