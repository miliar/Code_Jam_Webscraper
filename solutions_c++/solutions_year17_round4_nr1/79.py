/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Majk
 */

#include <vector>
#include <iostream>
#include <unordered_map>
#include <map>
#include <iomanip>
#include <set>
#include <functional>
#include <fstream>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <string>
#include <sstream>
#include <queue>
using namespace std;

#define x first
#define y second
constexpr int MOD = 1000000007;

typedef std::pair<int,int> pii;
typedef long long ll;
typedef unsigned int ui;

template<typename T>std::istream&operator>>(std::istream&i,vector<T>&t) {for(auto&v:t){i>>v;}return i;}
template<typename T>std::ostream&operator<<(std::ostream&o,const vector<T>&t) {for(size_t i=0;i<t.size();++i){o<<t[i]<<" \n"[i == t.size()-1];}return o;}
template <typename T, typename U> std::istream&operator>>(std::istream&i, pair<T,U>&p) {i >> p.x >> p.y; return i;}
template<typename T> using minheap = priority_queue<T, vector<T>, greater<T>>;
template<typename T> using maxheap = priority_queue<T, vector<T>, less<T>>;
auto fraclt = [](const pii&a,const pii&b) { return (ll)a.x * b.y < (ll)b.x * a.y; };
struct cmpfrac { bool operator()(const pii&a,const pii&b)const { return (ll)a.x * b.y < (ll)b.x * a.y; }};


struct input {
	std::istream &cin;
	explicit input(std::istream &cin) :cin(cin){}
	template <typename T> operator T() { T t; cin >> t; return t; }
};
#define $ input{cin}

int logceil(ll x) {int b=0;while(x){x>>=1;++b;}return b;}

namespace std {
    template<typename T,typename U>struct hash<pair<T,U>>{hash<T>t;hash<U>u;size_t operator()(const pair<T,U>&p)const{return t(p.x)^(u(p.y)<<7);}};
}
template<typename T,typename F>T bsh(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){l=m+1;r=m;}else{h=m-1;}}return r;}
template<typename T,typename F>T bsl(T l,T h,const F&f){T r=-1,m;while(l<=h){m=(l+h)/2;if(f(m)){h=m-1;r=m;}else{l=m+1;}}return r;}
template<typename T> T gcd(T a,T b) { if (a<b) swap(a,b); return b?gcd(b,a%b):a; }

template<typename T>class vector2:public vector<vector<T>>{public:vector2(){} vector2(size_t a,size_t b,T t=T()):vector<vector<T>>(a,vector<T>(b,t)){}};
template<typename T>class vector3:public vector<vector<vector<T>>>{public:vector3(){} vector3(size_t a,size_t b,size_t c,T t=T()):vector<vector<vector<T>>>(a,vector<vector<T>>(b,vector<T>(c,t))){}};

// #include "../l/mod.h"
#include <thread>

class TaskA {
public:
    struct Calc {
		int N,P; vector<int> G; int ans;
        void calc() {
			ans = 0;
			vector<int> M(P);
			for(int g:G) ++M[g%P];
			ans += M[0];
			if (P == 2) {
				ans += (M[1]+1)/2;
			} else if (P == 3) {
				int pairs = min(M[1], M[2]);
				ans += pairs;
				M[1] -= pairs;
				M[2] -= pairs;
				ans += (max(M[1], M[2])+2)/3;
			} else if (P == 4) {
				while (M[2] >= 2) { M[2]-=2; ++ans; }
				while (M[1] && M[3]) { M[3]--; M[1]--; ans++; }
				if (M[2] && M[3] >= 2) { M[2]--; M[3]-=2; ans++; }
				if (M[2] && M[1] >= 2) { M[2]--; M[1]-=2; ans++; }
				while (M[1] >= 4) { M[1]-=4; ++ans; }
				while (M[3] >= 4) { M[3]-=4; ++ans; }
				if (M[1] || M[2] || M[3]) ++ans;
			}
        }

        void read(istream& cin) {
            cin >> N >> P;
			G.resize(N);
			cin >> G;
		}

        void write(ostream &cout) {
            cout << ans;
			cout << endl;
        }

        std::thread th;
    };


    vector<Calc> C;
	void solve(istream& cin, ostream& cout) {
        int T; cin >> T; C.resize(T);
		for (int t = 0; t < T; ++t) {
			Calc &c = C[t];
			c.read(cin);
			c.th = std::thread{[&]() mutable {c.calc();}};
		}

		for (int t = 0; t < T; ++t) {
		    C[t].th.join();
            cout << "Case #" << t+1 << ": ";
			C[t].write(cout);
		}
	}
};

#include <dirent.h>
#include <stdexcept>
#include <regex>
#include <sys/stat.h>
#include <cstdint>

std::string getLastFileName(const std::string& regexString) {
	DIR* dir;
	dirent* entry;
	std::string result = "";
	int64_t resultModificationTime = 0;
	std::regex regex(regexString);
	if ((dir = opendir (".")) != NULL) {
		while ((entry = readdir (dir)) != NULL) {
			if (std::regex_match(entry->d_name, regex)) {
				struct stat buffer;
				stat(entry->d_name, &buffer);
				int64_t modificationTime = static_cast<int64_t>(buffer.st_mtimespec.tv_sec) * 1000000000 +
						static_cast<int64_t>(buffer.st_mtimespec.tv_nsec);

				if (modificationTime > resultModificationTime) {
					resultModificationTime = modificationTime;
					result = entry->d_name;
				}
			}
		}
		closedir (dir);
	} else {
		throw std::runtime_error("Couldn't open current directory");
	}
	if (result.empty()) {
		throw std::runtime_error("No file found");
	}	return result;
}

int main() {
	ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
	TaskA solver;
	std::ifstream in(getLastFileName("A-(small|large).*[.]in"));
	std::ofstream out("a.out");
	solver.solve(in, out);
	return 0;
}

