/**
 * Jerry Ma
 * fresh_chocolate.cpp
 * 2017-05-13 10:01 EDT
 */

// BEGIN AUTOGENERATED

#include <assert.h>
#include <ctype.h>
#include <limits.h>
#include <math.h>
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#include <algorithm>
#include <array>
#include <bitset>
#include <chrono>
#include <complex>
#include <deque>
#include <forward_list>
#include <fstream>
#include <iostream>
#include <iterator>
#include <limits>
#include <list>
#include <map>
#include <memory>
#include <numeric>
#include <queue>
#include <random>
#include <regex>
#include <set>
#include <sstream>
#include <stack>
#include <string>
#include <tuple>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>


using namespace std;


typedef long long int lli;
typedef pair<int, int> pii;
typedef pair<int, lli> pil;
typedef pair<lli, int> pli;
typedef pair<lli, lli> pll;


int gInt() {
    int i;
    scanf("%d", &i);
    return i;
}


lli gLong() {
    lli i;
    scanf("%lld", &i);
    return i;
}


double gDouble() {
    double i;
    scanf("%lf", &i);
    return i;
}


void init() {
}


void quit() {
    fclose(stdin);
    fclose(stdout);
    fclose(stderr);
    exit(0);
}


void body(int argc, char** argv);


int main(int argc, char** argv) {
    init();
    body(argc, argv);
    quit();
    return 0;
}

// END AUTOGENERATED


int n, p;
int g[100];
int freqs[4];
int dp[1100000][4];
int curf[4];
int fbuf[4];

int dodp() {
    int ub = 1;
    for (int i = 1; i < p; ++i) {
        ub *= 101;
    }

    memset(dp, -1, sizeof(dp));
    dp[0][0] = 0;

    for (int i = 0; i < ub; ++i) {
        curf[1] = fbuf[1] = i % 101;
        curf[2] = fbuf[2] = (i / 101) % 101;
        curf[3] = fbuf[3] = (i / (101 * 101)) % 101;
        if (curf[1] > freqs[1] || curf[2] > freqs[2] || curf[3] > freqs[3]) {
            continue;
        }
        for (int j = 0; j < p; ++j) {
            for (int prevf = 1; prevf < p; ++prevf) {
                if (curf[prevf] == 0) {
                    continue;
                }
                --fbuf[prevf];
                int prevj = (j - prevf + p) % p;
                int newfresh = dp[101 * 101 * fbuf[3] + 101 * fbuf[2] + fbuf[1]][prevj] + (prevj == 0 ? 1 : 0);
                dp[i][j] = max(dp[i][j], newfresh);
                ++fbuf[prevf];
            }
        }
    }

    int finalind = 101 * 101 * freqs[3] + 101 * freqs[2] + freqs[1];
    return max(dp[finalind][0], max(dp[finalind][1], max(dp[finalind][2], dp[finalind][3])));
}

int solve() {
    n = gInt();
    p = gInt();
    memset(freqs, 0, sizeof(freqs));
    for (int i = 0; i < n; ++i) {
        g[i] = gInt() % p;
        ++freqs[g[i]];
    }

    int zero = freqs[0];
    int fromdp = dodp();
    fprintf(stderr, "%d %d\n", zero, fromdp);

    return zero + fromdp;
}

void body(int argc, char** argv) {
    int t = gInt();
    for (int i = 0; i < t; ++i) {
        printf("Case #%d: %d\n", i + 1, solve());
    }
}
