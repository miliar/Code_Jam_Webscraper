/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>

using namespace std;

class TaskA {
public:
	void solve(std::istream& in, std::ostream& out) {

		int n, d;
		in >> n >> d;
		int ans = 0;

		long long s0, as, cs, rs;
		long long m0, am, cm, rm;
		in >>s0 >> as >> cs >> rs;
		in >>m0 >> am >> cm >> rm;

		vector<long long> mn(n), mx(n);
		mn[0] = s0;
		mx[0] = s0;

		for (int i = 1; i < n; ++i) {
			long long s = (s0 * as + cs) % rs;
			long long m = (m0 * am + cm) % rm;
			s0 = s;
			m0 = m;

			m %= i;

			mn[i] = min(s, mn[m]);
			mx[i] = max(s, mx[m]);
		}


		vector<pair<int, int>> events;
		for (int i = 0; i < n; ++i) {
			if(mx[i] - mn[i] <= d) {
				events.push_back(make_pair(mx[i] - d, 1));
				events.push_back(make_pair(mn[i] + 1, -1));
			}
		}


		sort(events.begin(), events.end());


		int cur = 0;
		for(auto p: events) {
			cur += p.second;
			ans = max(ans, cur);
		}



		static int testNumber = 0;
		out << "Case #" << ++testNumber << ": " << ans << endl;
	}
};


int main() {
	std::ios_base::sync_with_stdio(false);
	TaskA solver;
	std::ifstream in("/users/riad/Downloads/in.txt");
	std::ofstream out("/users/riad/Downloads/a.out");
	in.tie(0);
	out << std::fixed;
	out.precision(20);
	int n;
in >> n;
for(int i = 0; i < n; ++i) {
	solver.solve(in, out);
}

	return 0;
}
