#include <cstdio>
#include <ctime>
#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <string>
using namespace std;

#define TRACE(fmt,x) {fprintf(stderr,fmt,x);fprintf(stderr,"\n");}
#define CASE(a,b) fprintf(stderr, "%d / %d = %.2f | %.2f\n", a, b, (double)clock()/CLOCKS_PER_SEC, ((double)clock()/a*b)/CLOCKS_PER_SEC);

/*

8
1
3
4
1 2 1 2
1
4
1
5
3
3 2 1
1
9
3
1000 15 256
1
1

*/

int m_limit[1001] = {0,1,2,3,3,4,4,5,5,5,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12,12,12,12,12,13,13,13,13,13,14,14,13,14,15,15,14,15,16,16,15,16,17,17,16,17,18,18,17,17,19,19,19,19,20,20,16,20,21,21,18,21,22,22,21,21,23,23,23,23,24,24,23,24,25,25,25,25,26,26,25,25,27,27,27,27,28,28,27,28,29,29,29,29,30,30,29,29,31,31,31,31,32,32,31,32,33,33,33,33,34,34,33,33,35,35,35,35,36,36,35,36,37,37,37,37,38,38,37,37,39,39,39,39,40,40,39,40,41,41,41,41,42,42,41,41,43,43,43,43,44,44,44,44,45,45,44,44,46,46,44,44,47,47,46,46,48,48,48,48,49,49,44,44,50,50,48,49,51,51,49,50,52,52,52,52,53,53,52,52,54,54,52,52,55,55,52,52,56,56,54,54,57,57,49,49,58,58,52,52,59,59,52,53,60,60,58,58,61,61,56,56,62,62,52,52,63,63,52,52,64,64,62,62,65,65,49,49,66,66,39,52,67,67,52,52,68,68,64,64,69,69,64,64,70,70,52,52,71,71,52,52,72,72,52,52,73,73,43,43,74,74,52,52,75,75,52,52,76,76,44,52,77,77,45,45,78,78,52,52,79,79,52,52,80,80,47,48,81,81,48,48,82,82,47,48,83,83,52,52,84,84,48,49,85,85,49,49,86,86,49,50,87,87,50,51,88,88,51,52,89,89,51,51,90,90,52,52,91,91,52,52,92,92,52,53,93,93,53,53,94,94,53,54,95,95,54,55,96,96,55,56,97,97,55,55,98,98,55,56,99,99,56,56,100,100,56,57,101,101,57,57,102,102,57,58,103,103,58,59,104,104,59,60,105,105,59,59,106,106,60,60,107,107,60,60,108,108,60,61,109,109,61,61,110,110,61,62,111,111,62,63,112,112,63,64,113,113,63,63,114,114,63,64,115,115,64,64,116,116,64,65,117,117,65,65,118,118,65,66,119,119,66,67,120,120,67,68,121,121,67,67,122,122,68,68,123,123,68,68,124,124,68,69,125,125,69,69,126,126,69,70,127,127,70,70,128,128,71,72,129,129,71,71,130,130,71,72,131,131,73,73,132,132,72,73,133,133,73,73,134,134,73,74,135,135,74,75,136,136,75,76,137,137,75,75,138,138,76,76,139,139,76,76,140,140,76,77,141,141,77,77,142,142,77,78,143,143,78,79,144,144,79,79,145,145,79,79,146,146,79,80,147,147,80,80,148,148,80,81,149,149,81,81,150,150,81,82,151,151,82,83,152,152,83,83,153,153,83,83,154,154,84,84,155,155,84,84,156,156,84,85,157,157,85,85,158,158,85,86,159,159,86,86,160,160,87,88,161,161,87,87,162,162,87,88,163,163,89,89,164,164,88,89,165,165,89,89,166,166,89,90,167,167,90,91,168,168,92,92,169,169,92,92,170,170,92,92,171,171,92,92,172,172,92,93,173,173,93,93,174,174,93,94,175,175,94,95,176,176,95,96,177,177,95,95,178,178,95,96,179,179,97,97,180,180,96,97,181,181,97,97,182,182,97,98,183,183,98,99,184,184,100,100,185,185,100,100,186,186,100,100,187,187,100,100,188,188,100,101,189,189,101,101,190,190,101,102,191,191,102,102,192,192,103,104,193,193,103,103,194,194,103,104,195,195,105,105,196,196,104,105,197,197,105,105,198,198,105,106,199,199,106,107,200,200,108,108,201,201,108,108,202,202,108,108,203,203,108,108,204,204,108,109,205,205,109,109,206,206,109,110,207,207,110,111,208,208,111,112,209,209,111,111,210,210,111,112,211,211,113,113,212,212,112,113,213,213,113,113,214,214,113,114,215,215,114,115,216,216,115,116,217,217,115,115,218,218,115,116,219,219,116,116,220,220,116,117,221,221,117,117,222,222,117,118,223,223,118,118,224,224,119,120,225,225,119,119,226,226,119,120,227,227,121,121,228,228,120,121,229,229,121,121,230,230,121,122,231,231,122,123,232,232,123,124,233,233,123,123,234,234,123,124,235,235,124,124,236,236,124,125,237,237,125,125,238,238,125,126,239,239,126,127,240,240,127,128,241,241,127,127,242,242,127,128,243,243,129,129,244,244,128,129,245,245,129,129,246,246,129,130,247,247,130,131,248,248,131,132,249,249,131,131,250,250,131,132,251,251,132,132,252,252,132,133,253,253};

int solve(vector<int> data, int limit) {
	sort(data.begin(), data.end());
	int last = data.back();

	if (last <= 3) return last;
	//if (last > limit && last > 4) return last;
	if (limit <= 3) return last;

	/*
	// stop
	int stop = 0;
	for (vector<int>::iterator iter=data.begin(); iter<data.end(); iter++) {
		stop += max(m_limit[*iter] - 10, 0);
		if (stop > limit) return last;
	}
	*/

	data.pop_back();

	limit--;
	int best = last;
	for (int i=(last/2); i > 0; i--) {
		vector<int> data2(data);
		data2.push_back(i);
		data2.push_back(last - i);
		best = min(best, 1 + solve(data2, min(best, limit)));
	}
	return best;
}

int precalc(vector<int> data, int limit) {
	sort(data.begin(), data.end());
	int last = data.back();

	if (last <= 3) return last;
	if (last > limit && last > 4) return last;
	if (m_limit[last] > limit) return last;

	data.pop_back();

	limit--;
	int best = last;
	for (int i=(last/2); i > 0; i--) {
		vector<int> data2(data);
		data2.push_back(i);
		data2.push_back(last - i);
		best = min(best, 1 + solve(data2, min(best, limit)));
	}
	return best;
}

int main() {
	/*
	// precalc
	for (int z=1; z<=1000; z++) {
		vector<int> w;
		w.push_back(z);
		m_limit[z] = 0;
		m_limit[z] = precalc(w, z);
		cout << m_limit[z] << ",";
	}
	cout << endl;
	*/

	int T;
	cin >> T;

	for (int t=1; t<=T; t++) {
		int N, i, k;
		cin >> N;

		vector<int> data;
		for (i=0; i<N; i++) {
			cin >> k;
			data.push_back(k);
		}

		sort(data.begin(), data.end());
		cout << "Case #" << t << ": " << solve(vector<int>(data), data[data.size() - 1]) << endl;

		CASE(t,T)
	}
	return 0;
}
