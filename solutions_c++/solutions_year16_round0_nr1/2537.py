/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Evgenii Balai
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include<unordered_set>

using namespace std;

class TaskA {

public:
    unordered_set<int> getdigits(long long n) {

        unordered_set<int> st;
        while (n > 0) {
            st.insert(n % 10);
            n /= 10;
        }
        return st;
    }

    void add(unordered_set<int> &st1, unordered_set<int> st2) {

        for (int x: st2) {

            st1.insert(x);
        }
    }

    long long solve(int n) {
        unordered_set<int> st;
        bool found = false;
        for (int j = 1; j <= 10000; j++) {
            long long m = ((long long) n) * j;

            add(st, getdigits(m));

            if (st.size() == 10) {
                return m;
            }
        }

        return -1;

    }

    void solve(std::istream &in, std::ostream &out) {
        int cases;
        in >> cases;


        for (int i = 0; i < cases; i++) {

            int n;
            in >> n;
            int a = solve(n);
            if (a == -1) {
                out << "Case #" << (i + 1) << ": " << "INSOMNIA" << endl;

            } else {
                out << "Case #" << (i + 1) << ": " << a << endl;
            }
        }


    }
};


int main() {
    TaskA solver;
    std::istream &in(std::cin);
    std::ofstream out("a.out");
    solver.solve(in, out);
    return 0;
}
