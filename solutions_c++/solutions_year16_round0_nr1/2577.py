/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <set>

using namespace std;

class TaskA {
public:
    void solve(istream &in, ostream &out) {
        int T, n, N;
        in >> T;
        for (int t = 1; t <= T; t++) {
            in >> N;
            if (N == 0) {
                out << "Case #" << t << ": INSOMNIA" << endl;
                continue;
            }
            set<int> digits;
            int i = 0;
            while (digits.size() < 10) {
                i++;
                n = N * i;
                while (n > 0) {
                    digits.insert(n % 10);
                    n /= 10;
                }
            }
            out << "Case #" << t << ": " << N * i << endl;
        }
    }
};

#include <dirent.h>
#include <stdexcept>
#include <regex>
#include <sys/stat.h>
#include <cstdint>

std::string getLastFileName(const std::string &regexString) {
    DIR *dir;
    dirent *entry;
    std::string result = "";
    int64_t resultModificationTime = 0;
    std::regex regex(regexString);
    if ((dir = opendir(".")) != NULL) {
        while ((entry = readdir(dir)) != NULL) {
            if (std::regex_match(entry->d_name, regex)) {
                struct stat buffer;
                stat(entry->d_name, &buffer);
                int64_t modificationTime = static_cast<int64_t>(buffer.st_mtimespec.tv_sec) * 1000000000 +
                                           static_cast<int64_t>(buffer.st_mtimespec.tv_nsec);

                if (modificationTime > resultModificationTime) {
                    resultModificationTime = modificationTime;
                    result = entry->d_name;
                }
            }
        }
        closedir(dir);
    } else {
        throw std::runtime_error("Couldn't open current directory");
    }
    if (result.empty()) {
        throw std::runtime_error("No file found");
    }
    return result;
}

int main() {
    TaskA solver;
    std::ifstream in(getLastFileName("A-(small|large).*[.]in"));
    std::ofstream out("a.out");
    solver.solve(in, out);
    return 0;
}
