/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author HSK
 */

#include <iostream>
#include <fstream>

#include <bits/stdc++.h>
using namespace std;

class TaskC {
 public:
  void solve(std::istream &in, std::ostream &out) {
    int T;
    in >> T;
    for (int t = 1; t <= T; t++) {
      long long N, K;
      in >> N >> K;

      auto comp = [](const pair<long long, long long> &a,
                     const pair<long long, long long> &b) {
        if (a.second == b.second) {
          return a.first < b.first;
        }
        return a.second < b.second;
      };

      priority_queue<pair<long long, long long>,
                     vector<pair<long long, long long>>, decltype(comp)>
          pq(comp);
      pq.push({(N & 1) ? N / 2 : N / 2 - 1, N / 2});

      long long l, r;

      while (K--) {
        if (pq.empty()) {
          l = r = 0;
          break;
        }

        auto popped = pq.top();
        pq.pop();

        l = popped.first;
        r = popped.second;

        if (r > 1) {
          pq.push({r & 1 ? r / 2 : r / 2 - 1, r / 2});
        }

        if (l > 1) {
          pq.push({l & 1 ? l / 2 : l / 2 - 1, l / 2});
        }
      }

      out << "Case #" << t << ": ";
      out << max(l, r) << " " << min(l, r) << "\n";
    }
  }
};

#include <dirent.h>
#include <stdexcept>
#include <regex>
#include <sys/stat.h>
#include <cstdint>

std::string getLastFileName(const std::string& regexString) {
	DIR* dir;
	dirent* entry;
	std::string result = "";
	int64_t resultModificationTime = 0;
	std::regex regex(regexString);
	if ((dir = opendir (".")) != NULL) {
		while ((entry = readdir (dir)) != NULL) {
			if (std::regex_match(entry->d_name, regex)) {
				struct stat buffer;
				stat(entry->d_name, &buffer);
				int64_t modificationTime = static_cast<int64_t>(buffer.st_mtimespec.tv_sec) * 1000000000 +
						static_cast<int64_t>(buffer.st_mtimespec.tv_nsec);

				if (modificationTime > resultModificationTime) {
					resultModificationTime = modificationTime;
					result = entry->d_name;
				}
			}
		}
		closedir (dir);
	} else {
		throw std::runtime_error("Couldn't open current directory");
	}
	if (result.empty()) {
		throw std::runtime_error("No file found");
	}	return result;
}

int main() {
	TaskC solver;
	std::ifstream in(getLastFileName("C-(small|large).*[.]in"));
	std::ofstream out("c.out");
	solver.solve(in, out);
	return 0;
}
