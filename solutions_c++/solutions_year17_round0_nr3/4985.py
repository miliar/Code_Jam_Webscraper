/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Yulian
 */



#include <iostream>

#include <fstream>
#include <vector>
#include <set>
#include <cmath>
#include <queue>
#include <deque>
#include <string>
#include <algorithm>
#include <map>
#include <numeric>
#include <limits>




#include <ostream>
#include <sstream>


using namespace std;
class C {
public:
	void solve(std::istream& in, std::ostream& out) {
    ios::sync_with_stdio(false);
		int T, n, k, c, l, r, mn, mx;
    pair<int, int> el;
    in >> T;
    auto comp1 = [](decltype(el) e1, decltype(el) e2) {if(e1.second - e1.first != e2.second - e2.first)  return e1.second - e1.first < e2.second - e2.first; else return e1.first < e2.first;};
    priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(comp1)> a (comp1);
    for(int t = 1; t <= T; ++t) {
      in >> n >> k;
//      while(!a.empty()){
//        a.pop();
//      }
      a = decltype(a)(comp1);
      a.push({1, n});
      for(int i = 0; i < k - 1; ++i){
        el = a.top();
        a.pop();
        c = (el.first + el.second) / 2;
        a.push({el.first, c - 1});
        a.push({c + 1, el.second});
      }
      el = a.top();

      c = (el.first + el.second) / 2;
      l = c - el.first;
      r = el.second - c;
      mx = max(l, r);
      mn = min(l, r);
      out << "Case #" << t << ": " << mx << " " << mn << "\n";
    }
	}
};


int main() {
	C solver;
	std::istream& in(std::cin);
	std::ostream& out(std::cout);
	solver.solve(in, out);
	return 0;
}
