#include <stdio.h>
int A_b[30];
int B_b[30];
int K_b[30];
long long dp[30][2][2][2]; // 0 : <=, 1: all
long long pow_2(int a) {
	long long ans = 1;
	int i;
	for(i = 1; i <= a; i++) ans *= 2;
	return ans;
}
int main() {
	freopen("B-large.in", "r", stdin);
	freopen("output.txt", "w", stdout);
	int case_no, T, A, B, K, t, i;
	long long a_t, b_t, k_t;
	scanf("%d", &T);
	for(case_no = 1; case_no <= T; case_no++) {
		for(i = 0; i <= 29; i++) A_b[i] = B_b[i] = K_b[i] = 0;
		scanf("%d %d %d", &A, &B, &K);
		A--;
		B--;
		K--;
		t = 0;
		while(A) {
			A_b[t] = A%2;
			t++;
			A /= 2;
		}
		t = 0;
		while(B) {
			B_b[t] = B%2;
			t++;
			B /= 2;
		}
		t = 0;
		while(K) {
			K_b[t] = K%2;
			t++;
			K /= 2;
		}
		a_t = A_b[0], b_t = B_b[0], k_t = K_b[0];
		dp[0][0][0][0] = dp[0][0][0][1] = (A_b[0]+1) * (B_b[0]+1);
		if(K_b[0] == 0 && dp[0][0][0][0] == 4) dp[0][0][0][0] = 3;
		dp[0][0][1][0] = dp[0][0][1][1] = (A_b[0]+1) * 2;
		if(K_b[0] == 0 && dp[0][0][1][0] == 4) dp[0][0][1][0] = 3;
		dp[0][1][0][0] = dp[0][1][0][1] = 2 * (B_b[0]+1);
		if(K_b[0] == 0 && dp[0][1][0][0] == 4) dp[0][1][0][0] = 3;
		dp[0][1][1][0] = dp[0][1][1][1] = 4;
		if(K_b[0] == 0) dp[0][1][1][0] = 3;
		for(i = 1; i <= 29; i++) {
			a_t = a_t + A_b[i] * pow_2(i);
			b_t = b_t + B_b[i] * pow_2(i);
			k_t = k_t + K_b[i] * pow_2(i);
			dp[i][1][1][1] = pow_2(i*2+2);
			dp[i][0][0][1] = (a_t+1) * (b_t+1);
			dp[i][0][1][1] = (a_t+1) * pow_2(i+1);
			dp[i][1][0][1] = pow_2(i+1) * (b_t+1);
			if(K_b[i] == 1) {
				dp[i][1][1][0] = 3*dp[i-1][1][1][1] + dp[i-1][1][1][0];
				if(A_b[i] == 0 && B_b[i] == 0) {
					dp[i][0][0][0] = dp[i][0][0][1];
					dp[i][1][0][0] = dp[i][1][0][1];
					dp[i][0][1][0] = dp[i][0][1][1];
				}
				if(A_b[i] == 0 && B_b[i] == 1) {
					dp[i][0][0][0] = dp[i][0][0][1];
					dp[i][0][1][0] = dp[i][0][1][1];
					dp[i][1][0][0] = dp[i-1][1][1][1] * 2 + dp[i-1][1][0][1] + dp[i-1][1][0][0];
				}
				if(A_b[i] == 1 && B_b[i] == 0) {
					dp[i][0][0][0] = dp[i][0][0][1];
					dp[i][1][0][0] = dp[i][1][0][1];
					dp[i][0][1][0] = dp[i-1][1][1][1] * 2 + dp[i-1][0][1][1] + dp[i-1][0][1][0];
				}
				if(A_b[i] == 1 && B_b[i] == 1) {
					dp[i][0][0][0] = dp[i-1][1][1][1] + dp[i-1][1][0][1] + dp[i-1][0][1][1] + dp[i-1][0][0][0];
					dp[i][0][1][0] = dp[i-1][1][1][1] * 2 + dp[i-1][0][1][1] + dp[i-1][0][1][0];
					dp[i][1][0][0] = dp[i-1][1][1][1] * 2 + dp[i-1][1][0][1] + dp[i-1][1][0][0];
				}
			}
			else {
				dp[i][1][1][0] = 3*dp[i-1][1][1][0];
				if(A_b[i] == 0 && B_b[i] == 0) {
					dp[i][0][0][0] = dp[i-1][0][0][0];
					dp[i][0][1][0] = dp[i-1][0][1][0] * 2;
					dp[i][1][0][0] = dp[i-1][1][0][0] * 2;
				}
				if(A_b[i] == 0 && B_b[i] == 1) {
					dp[i][0][0][0] = dp[i-1][0][1][0] + dp[i-1][0][0][0];
					dp[i][0][1][0] = dp[i-1][0][1][0] * 2;
					dp[i][1][0][0] = dp[i-1][1][1][0] * 2 + dp[i-1][1][0][0];
				}
				if(A_b[i] == 1 && B_b[i] == 0) {
					dp[i][0][0][0] = dp[i-1][1][0][0] + dp[i-1][0][0][0];
					dp[i][0][1][0] = dp[i-1][1][1][0] * 2 + dp[i-1][0][1][0];
					dp[i][1][0][0] = dp[i-1][1][0][0] * 2;
				}
				if(A_b[i] == 1 && B_b[i] == 1) {
					dp[i][0][0][0] = dp[i-1][1][1][0] + dp[i-1][1][0][0] + dp[i-1][0][1][0];
					dp[i][0][1][0] = dp[i-1][1][1][0] * 2 + dp[i-1][0][1][0];
					dp[i][1][0][0] = dp[i-1][1][1][0] * 2 + dp[i-1][1][0][0];
				}
			}
		}
		printf("Case #%d: %lld\n", case_no, dp[29][0][0][0]);
	}
	return 0;
}