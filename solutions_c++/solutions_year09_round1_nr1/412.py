#include <cmath>
#include <cstdio>
#include <cstring>

#include <map>
#include <queue>
#include <string>
#include <vector>
#include <sstream>
#include <iostream>
#include <algorithm>

#define ALL(x) (x).begin(),(x).end()
#define FOR(_i,n) for(int _i = 0; _i < (n); _i++)
#define FORI(_i,n) for(int _i = (n)-1; _i >= 0; _i--)
#define FORA(_i,a,n) for(int _i = (a); _i < (n); _i++)
#define FORAI(_i,a,n) for(int _i = (n)-1; _i >= (a); _i--)
#define FOREACH(_it,x) for(typeof((x).begin()) it = (x).begin(); _it != (x).end(); _it++)

using namespace std;

bool ishappy(long long l, int b) {
	long long l2 = l, sum;
	
	while(true) {
		sum = 0;
		while(l) {
			sum += (l % b)*(l % b);
			l /= b;
		}
		l = sum;
		
		if(l == 1)
			return true;
			
		sum = 0;
		while(l2) {
			sum += (l2 % b)*(l2 % b);
			l2 /= b;
		}
		l2 = sum;
		
		sum = 0;
		while(l2) {
			sum += (l2 % b)*(l2 % b);
			l2 /= b;
		}
		l2 = sum;
		
		if(l == l2) return false;
	}
}

int missing7[] = {-1, -1, -1, 11814485, 11814485, 4817803, 346719, 28099, 711725, 2688153, 569669 };
int missing6[11][11] = {
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1},
	{-1, -1, -1, -1, 11814485, 2662657, 246297, 28099, 218301, 245035, 569669},
	{-1, -1, -1, -1, -1, 4817803, 346719, 28099, 711725, 2688153, 569669},
	{-1, -1, -1, -1, -1, -1, 48041, 28099, 613479, 697563, 569669},
	{-1, -1, -1, -1, -1, -1, -1, 1177, 120149, 120407, 128821},
	{-1, -1, -1, -1, -1, -1, -1, -1, 6073, 3879, 23117},
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, 7895, 37131},
	{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58775}
};
int missing5[11][11][11] = {
{
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
},
{
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
},
{
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
},
{
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, 2662657, 246297, 28099, 218301, 245035, 569669 },
	{ -1, -1, -1, -1, -1, -1, 48041, 9867, 71735, 245035, 569669 },
	{ -1, -1, -1, -1, -1, -1, -1, 1177, 29913, 34527, 6393 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, 4577, 3879, 4977 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, 37131 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 48769 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
},
{
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, 48041, 28099, 613479, 697563, 569669 },
	{ -1, -1, -1, -1, -1, -1, -1, 1177, 120149, 120407, 128821 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, 6073, 3879, 23117 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, 7895, 37131 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58775 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
},
{
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, 1177, 1337, 48041, 35785 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, 6073, 3879, 10089 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, 6307, 37131 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47089 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
},
{
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, 91, 219, 27 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, 7895, 143 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5719 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
},
{
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, 79, 1695 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3879 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
},
{
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2207 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
},
{
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
},
{
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
	{ -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
}
};

int main() {
	int n, b;
	string line;
	
	cin >> n;
	getline(cin, line);
	
	FOR(ni, n) {
		getline(cin, line);
		istringstream ss(line);
		
		vector<int> bases;
		
		while(ss >> b) {
			if(b == 2) continue;
			bases.push_back(b);
		}
		
		if(bases.size() == 8) {
			printf("Case #%d: 11814485\n", ni+1);
		} else if(bases.size() == 7) {
			for(int i = 3; i <= 10; i++) {
				if(find(ALL(bases), i) == bases.end()) {
					printf("Case #%d: %d\n", ni+1, missing7[i]);
					break;
				}
			}
		} else if(bases.size() == 6) {
			bool found = false;
			for(int i = 3; !found && i <= 10; i++) {
				if(find(ALL(bases), i) == bases.end()) {
					for(int j = i + 1; j <= 10; j++) {
						if(find(ALL(bases), j) == bases.end()) {
							found = true;
							printf("Case #%d: %d\n", ni+1, missing6[i][j]);
							break;
						}
					}
				}
			}
		} else if(bases.size() == 5) {
			bool found = false;
			for(int i = 3; !found && i <= 10; i++) {
				if(find(ALL(bases), i) == bases.end()) {
					for(int j = i + 1; j <= 10; j++) {
						if(find(ALL(bases), j) == bases.end()) {
							found = true;
							for(int k = j + 1; k <= 10; k++) {
								if(find(ALL(bases), k) == bases.end()) {
									printf("Case #%d: %d\n", ni+1, missing5[i][j][k]);
									break;	
								}
							}
						}
					}
				}
			}
		} else {
			FOR(i, 100000000) {
				bool possible = true;
			
				FOREACH(it, bases) {
					if(!ishappy(i+2, *it)) {
						possible = false;
						break;
					}
				}
			
				if(possible) {
					printf("Case #%d: %d\n", ni+1, i+2);
					break;
				}
			}
		}
	}
	
	return 0;
}
