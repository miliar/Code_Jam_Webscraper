/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Evgenii Balai
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include<algorithm>

using namespace std;
double P1[201];
double dp[201][201][201];
int N, K;
vector<double> P;

double get(int Yes, int No, int idx) {

    if (Yes + No == K) {
        if (Yes == No)
            return 1.0;
        else
            return 0.0;
    }
    if (idx >= K)
        return 0.0;



    //double val1 = get(Yes,No,idx+1);
    double val2 = P[idx] * get(Yes + 1, No, idx + 1) + (1 - P[idx]) * get(Yes, No + 1, idx + 1);
    return val2;

}

class TaskB {
public:
    void solve(std::istream &in, std::ostream &out) {
        int t;
        in >> t;
        for (int tc = 0; tc < t; tc++) {

            in >> N >> K;

            for (int i = 0; i < N; i++)
                in >> P1[i];

            P.clear();
            double mx1 = -1;

            for (int i = 0; i < (1 << N); i++) {
                int k = i;
                int idx = 0;
                P.clear();
                while (k > 0) {
                    if (k % 2)
                        P.push_back(P1[idx]);
                    k /= 2;
                    idx++;
                }
                if (P.size() != K)
                    continue;
                mx1 = max(mx1, get(0, 0, 0));
            }


            out << "Case #" << (tc + 1) << ": " << mx1 << endl;
        }

    }
};


int main() {
    TaskB solver;
    std::istream &in(std::cin);
    std::ofstream out("b.out");
    solver.solve(in, out);
    return 0;
}

