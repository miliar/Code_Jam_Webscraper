/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Evgenii Balai
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include<stdlib.h>
#include<memory.h>
#include<string>
#include<algorithm>

using namespace std;
int solveMA[101];
int solvePA[101];
string s;

class TaskB {
public:

    int solveM(int idx) {
        if (solveMA[idx] != -1)
            return solveMA[idx];
        if (idx == 0) {
            return s[idx] == '-' ? 0 : 1;
        }

        if (s[idx] == '-') {
            return solveMA[idx] = min(solveM(idx - 1), solveP(idx - 1) + 1);
        } else {
            return solveMA[idx] = min(solveP(idx - 1) + 1, solveM(idx - 1) + 2);
        }
    }

    int solveP(int idx) {
        if (solvePA[idx] != -1)
            return solvePA[idx];
        if (idx == 0) {
            return s[idx] == '+' ? 0 : 1;
        }
        if (s[idx] == '+') {
            return solvePA[idx] = min(solveP(idx - 1), solveM(idx - 1) + 1);
        } else {
            return solvePA[idx] = min(solveM(idx - 1) + 1, solveP(idx - 1) + 2);
        }

    }

    void solve(std::istream &in, std::ostream &out) {

        int cases;
        in >> cases;
        for (int t = 0; t < cases; t++) {
            memset(solveMA, -1, sizeof(int) * 101);
            memset(solvePA, -1, sizeof(int) * 101);

            in >> s;
            out << "Case #" << (t + 1) << ": " << solveP(s.length() - 1) << endl;
        }


    }
};


int main() {
    TaskB solver;
    std::istream &in(std::cin);
    std::ofstream out("b.out");
    solver.solve(in, out);
    return 0;
}
