/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author
 */

#include <algorithm>
#include <array>
#include <climits>
#include <cmath>
#include <cstdint>
#include <cstdlib>
#include <fstream>
#include <iostream>
#include <map>
#include <set>
#include <sstream>
#include <string>
#include <queue>
#include <unordered_map>
#include <unordered_set>
#include <utility>
#include <vector>

#define forn(i, n) for (int i = 0; i < (int)(n); ++i)

using namespace std;

class taskA {
public:
  void solve(std::istream& in, std::ostream& out) {
    int n_tests;
    in >> n_tests;
    forn(t, n_tests) {
      string s;
      int k;
      in >> s >> k;
      out << "Case #" << t + 1 << ": " << solve(s, k) << endl;
    }
  }

  string solve(string s, int k) {
    int count = 0;
    forn(i, static_cast<int>(s.size()) - k + 1) {
      if (s[i] == '-') {
        inverse(s, i, i + k - 1);
        ++count;
      }
    }

    if (s.find('-') != string::npos) {
      return "IMPOSSIBLE";
    }

    return to_string(count);
  }

  void inverse(string& s, int from, int to) {
    for (int i = from; i <= to; ++i) {
      s[i] = (s[i] == '-' ? '+' : '-');
    }
  }

};

int main() {
  ios_base::sync_with_stdio(false);
  taskA solver;
  std::ifstream in("../input/A-large.in");
  std::ofstream out("../answers/A-large.ans");
  solver.solve(in, out);
  return 0;
}
