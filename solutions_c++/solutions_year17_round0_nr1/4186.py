// c_jam_b.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"

#include <fstream>
#include <string>
#include <cmath>
#include <algorithm>
#include <vector>
#include <string>

#include <map>

char happy_max[1000] = 
{
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+',
	'+', '+', '+', '+', '+', '+', '+', '+', '+', '+'
};

int _tmain(int argc, _TCHAR* argv[])
{
	std::ifstream input("a.txt", std::ifstream::in);
	
	FILE * f = fopen("a_out.txt", "a");

	std::map<char, char> m;
	m['+'] = '-';
	m['-'] = '+';

	int T = 0;
	input >> T;

	 for (int i = 0; i < T; ++i)
	 {
		 std::string pancakes;
		 input >> pancakes;
		 int S = 0;
		 input >> S;

		 int  left = 0;
		 int right = pancakes.size() - 1;

		 if (memcmp(pancakes.c_str(), happy_max, pancakes.size()) == 0)
		 {
			 fprintf(f, "Case #%i: %i\n", i + 1, 0);
		 }
		 else
		 {
			int cnt = 0;
			 while (true)
			 {
				while (pancakes[left] == '+')
				{
					++left;
				}

				while (pancakes[right] == '+')
				{
					--right;
				}

				if (right == left)
				{
					fprintf(f, "Case #%i: IMPOSSIBLE\n", i + 1);
					break;
				}

				if (left + S > right + 1)
				{
					fprintf(f, "Case #%i: IMPOSSIBLE\n", i + 1);
					break;
				}
				
				for (int k = left; k < left + S; ++k)
				{
					pancakes[k] = m[pancakes[k]];
				}

				++cnt;

				if (memcmp(pancakes.c_str() + left, happy_max, right - left + 1) == 0)
				{
					fprintf(f, "Case #%i: %i\n", i + 1, cnt);
					break;
				}

				++left;

				if (right - S + 1 < left)
				{
					fprintf(f, "Case #%i: IMPOSSIBLE\n", i + 1);
					break;
				}

				for (int k = right; k > right - S; --k)
				{
					pancakes[k] = m[pancakes[k]];
				}

				++cnt;

				if (memcmp(pancakes.c_str() + left, happy_max, right - left + 1) == 0)
				{
					fprintf(f, "Case #%i: %i\n", i + 1, cnt);
					break;
				}

				--right;
			 }
		 }
		 //output >> std::string("Case #") >> i + 1 >> std::string(": ") >> result >> std::endl;
	 }

	 fclose(f);

	return 0;
}


