/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author RiaD
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <vector>


#include <iterator>


#include <string>
#include <stdexcept>

#ifndef SPCPPL_ASSERT
	#ifdef SPCPPL_DEBUG
		#define SPCPPL_ASSERT(condition) \
		if(!(condition)) { \
			throw std::runtime_error(std::string() + #condition + " in line " + std::to_string(__LINE__) + " in " + __PRETTY_FUNCTION__); \
		}
	#else
		#define SPCPPL_ASSERT(condition)
	#endif
#endif


/**
* Support decrementing and multi-passing, but not declared bidirectional(or even forward) because
* it's reference type is not a reference.
*
* It doesn't return reference because
* 1. Anyway it'll not satisfy requirement [forward.iterators]/6
*   If a and b are both dereferenceable, then a == b if and only if *a and
*   b are bound to the same object.
* 2. It'll not work with reverse_iterator that returns operator * of temporary which is temporary for this iterator
*
* Note, reverse_iterator is not guaranteed to work  now too since it works only with bidirectional iterators,
* but it's seems to work at least on my implementation.
*
* It's not really useful anywhere except iterating anyway.
*/
template <typename T>
class IntegerIterator: public std::iterator<std::input_iterator_tag, T, std::ptrdiff_t, T*, T> {
public:
	explicit IntegerIterator(T value): value(value) {

	}

	IntegerIterator& operator++() {
		++value;
		return *this;
	}

	IntegerIterator operator++(int) {
		IntegerIterator copy = *this;
		++value;
		return copy;
	}

	IntegerIterator& operator--() {
		--value;
		return *this;
	}

	IntegerIterator operator--(int) {
		IntegerIterator copy = *this;
		--value;
		return copy;
	}

	T operator*() const {
		return value;
	}

	bool operator==(IntegerIterator rhs) {
		return value == rhs.value;
	}

	bool operator!=(IntegerIterator rhs) {
		return !(*this == rhs);
	}

private:
	T value;
};

template <typename T>
class IntegerRange {
public:
	IntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin <= end);
	}

	IntegerIterator<T> begin() const {
		return IntegerIterator<T>(begin_);
	}

	IntegerIterator<T> end() const {
		return IntegerIterator<T>(end_);
	}

private:
	T begin_;
	T end_;
};

template <typename T>
class ReversedIntegerRange {
	typedef std::reverse_iterator<IntegerIterator<T>> IteratorType;
public:
	ReversedIntegerRange(T begin, T end): begin_(begin), end_(end) {
		SPCPPL_ASSERT(begin >= end);
	}

	IteratorType begin() const {
		return IteratorType(IntegerIterator<T>(begin_));
	}

	IteratorType end() const {
		return IteratorType(IntegerIterator<T>(end_));
	}

private:
	T begin_;
	T end_;
};

template <typename T>
IntegerRange<T> range(T to) {
	return IntegerRange<T>(0, to);
}

template <typename T>
IntegerRange<T> range(T from, T to) {
	return IntegerRange<T>(from, to);
}

template <typename T>
IntegerRange<T> inclusiveRange(T to) {
	return IntegerRange<T>(0, to + 1);
}

template <typename T>
IntegerRange<T> inclusiveRange(T from, T to) {
	return IntegerRange<T>(from, to + 1);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from) {
	return ReversedIntegerRange<T>(from, 0);
}

template <typename T>
ReversedIntegerRange<T> downrange(T from, T to) {
	return ReversedIntegerRange<T>(from, to);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from) {
	return ReversedIntegerRange<T>(from + 1, 0);
}

template <typename T>
ReversedIntegerRange<T> inclusiveDownrange(T from, T to) {
	return ReversedIntegerRange<T>(from + 1, to);
}



#include <cmath>


template <typename T, typename SquareT = T>
struct Point3D {
	T x, y, z;

	Point3D(): x(0), y(0), z(0) {
	}

	Point3D(T x, T y, T z): x(x), y(y), z(z) {
	}

	SquareT squaredDist() const {
		return static_cast<SquareT>(x) * x + static_cast<SquareT>(y) * y + static_cast<SquareT>(z) * z;
	}

	auto dist() const -> decltype(sqrt(this->squaredDist())) {
		return sqrt(squaredDist());
	}

	Point3D& operator-= (const Point3D& rhs) {
		x -= rhs.x;
		y -= rhs.y;
		z -= rhs.z;
		return *this;
	}

	Point3D& operator+= (const Point3D& rhs) {
		x += rhs.x;
		y += rhs.y;
		z += rhs.z;
		return *this;
	}

	Point3D& operator*=(T rhs) {
		x *= rhs;
		y *= rhs;
		return *this;
	}

	Point3D& operator/=(T rhs) {
		x /= rhs;
		y /= rhs;
		return *this;
	}

	T& operator[](size_t i) {
		if (i == 0) {
			return x;
		}
		if (i == 1) {
			return y;
		}
		if (i == 2) {
			return z;
		}
		SPCPPL_ASSERT(false);
	}

	const T& operator[](size_t i) const {
		if (i == 0) {
			return x;
		}
		if (i == 1) {
			return y;
		}
		if (i == 2) {
			return z;
		}
		SPCPPL_ASSERT(false);
	}

	template <typename U, typename V = U>
	Point3D<U, V> as() {
		return {U(x), U(y), U(z)};
	}

	Point3D normalized() const {
		static_assert(std::is_floating_point<T>::value, "only implemented for floating point types");
		return *this / dist();
	}
};

template <typename T, typename S>
Point3D<T, S> operator+(Point3D<T, S> lhs, const Point3D<T, S>& rhs) {
	return lhs += rhs;
};

template <typename T, typename S>
Point3D<T, S> operator-(Point3D<T, S> lhs, const Point3D<T, S>& rhs) {
	return lhs -= rhs;
};

template <typename T, typename S>
Point3D<T, S> operator*(T lhs, Point3D<T, S> rhs) {
	return rhs *= lhs;
};

template <typename T, typename S>
Point3D<T, S> operator*(Point3D<T, S> lhs, T rhs) {
	return lhs *= rhs;
};

template <typename T, typename S>
Point3D<T, S> operator/(const Point3D<T, S>& lhs, T rhs) {
	return Point3D<T, S>(lhs.x / rhs, lhs.y / rhs, lhs.z / rhs);
}

template <typename S>
Point3D<S, S> operator*(const Point3D<S, S>& lhs, const Point3D<S, S>& rhs) {
	return Point3D<S, S>(
			lhs.y * rhs.z - lhs.z * rhs.y,
			lhs.z * rhs.x - lhs.x * rhs.z,
			lhs.x * rhs.y - lhs.y * rhs.x
	);
}

template <typename T, typename S>
S operator%(const Point3D<T, S>& lhs, const Point3D<T, S>& rhs) {
	return static_cast<S>(lhs.x) * rhs.x + static_cast<S>(lhs.y) * rhs.y + static_cast<S>(lhs.z) * rhs.z;
}

template <typename T, typename S>
bool operator==(const Point3D<T, S>& lhs, const Point3D<T, S>& rhs) {
	return lhs.x == rhs.x && lhs.y == rhs.y && lhs.z == rhs.z;
}

template <typename T, typename S>
bool operator!=(const Point3D<T, S>& lhs, const Point3D<T, S>& rhs) {
	return !(lhs == rhs);
}




#include <cstddef>


class DSU {
public:
	explicit DSU(std::size_t n): dsu(n) {
		for (std::size_t i = 0; i < n; ++i) {
			dsu[i] = i;
		}
	}

	std::size_t getSet(std::size_t v) {
		SPCPPL_ASSERT(v < dsu.size());
		if (v == dsu[v]) {
			return v;
		}
		return dsu[v] = getSet(dsu[v]);
	}

	void unite(std::size_t u, std::size_t v) {
		SPCPPL_ASSERT(u < dsu.size());
		SPCPPL_ASSERT(v < dsu.size());
		u = getSet(u);
		v = getSet(v);
		dsu[v] = u;
	}

private:
	std::vector<std::size_t> dsu;
};


using namespace std;

class TaskC {
public:
	void solve(std::istream& in, std::ostream& out) {
		static int testnumber = 0;
		cerr << testnumber << endl;
		out << "Case #" << ++testnumber << ": ";
		int n, s;
		in >> n >> s;
		vector<Point3D<int>> v(n);
		vector<Point3D<int>> speed(n);
		for (int i: range(n)) {
			in >> v[i].x >> v[i].y >> v[i].z;
			in >> speed[i].x >> speed[i].y >> speed[i].z;
		}

		int l = 0, r = 4000000;
		while (r - l > 1) {
			DSU dsu(n);

			int m = (l + r) / 2;

			for (int i: range(n)) {
				for (int j: range(n)) {
					if ((v[i] - v[j]).squaredDist() <= m) {
						dsu.unite(i, j);
					}
				}
			}

			if (dsu.getSet(0) == dsu.getSet(1)) {
				r = m;
			} else {
				l = m;
			}
		}

		out << sqrt(r) << "\n";
	}
};

#include <dirent.h>
#include <stdexcept>
#include <regex>
#include <sys/stat.h>
#include <cstdint>

std::string getLastFileName(const std::string& regexString) {
	DIR* dir;
	dirent* entry;
	std::string result = "";
	int64_t resultModificationTime = 0;
	std::regex regex(regexString);
	if ((dir = opendir (".")) != NULL) {
		while ((entry = readdir (dir)) != NULL) {
			if (std::regex_match(entry->d_name, regex)) {
				struct stat buffer;
				stat(entry->d_name, &buffer);
				int64_t modificationTime = static_cast<int64_t>(buffer.st_mtimespec.tv_sec) * 1000000000 +
						static_cast<int64_t>(buffer.st_mtimespec.tv_nsec);

				if (modificationTime > resultModificationTime) {
					resultModificationTime = modificationTime;
					result = entry->d_name;
				}
			}
		}
		closedir (dir);
	} else {
		throw std::runtime_error("Couldn't open current directory");
	}
	if (result.empty()) {
		throw std::runtime_error("No file found");
	}	return result;
}

int main() {
	std::ios_base::sync_with_stdio(false);
	TaskC solver;
	std::ifstream in(getLastFileName("C-(small|large).*[.]in"));
	std::ofstream out("c.out");
	in.tie(0);
	out << std::fixed;
	out.precision(20);
	int n;
in >> n;
for(int i = 0; i < n; ++i) {
	solver.solve(in, out);
}

	return 0;
}
