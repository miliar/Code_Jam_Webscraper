#include<iostream>
#include<map>
#include<vector>
#include<list>
#include<sstream>
#include<cmath>
#include<fstream>
#define fori(a,b,c) for(int a=b; a<c; a++)
using namespace std;

typedef long long ull;
typedef std::map<int, ull> vu;
typedef std::map<int, vu> vvu;
typedef std::map<int, vvu> vvvu;

////grow a vector v up to size n for permutations and stuff
////grows a vector pyramidwise: v[i] is a vector indexed from 0 to i inclusive
////note: entries are initialized to 0 to be sentinels; DO NOT USE if 0 is a valid value
//void grow(vvu& v, int n){
//	while(v.size()<=n)
//		v.push_back(vu(v.size()+1));
//}

//returns n P r
// AKA returns n! / r! when n >= r
// this is the number of permutations of size r for n elements
//SHOULD work up to n=21 if ull is 64-bit unsigned //untested
//NOTE: p(n) is simply n! (n factorial)
//ull p(int n, int r=0){
//	if((r|n|n-r)<0) return 0;	//if either one is negative or if n<r, return 0
//	if(n==r) return 1;			// n!/n! is 1
//	static vvu v;			//dynprog array: stores answers that were already computed
//	grow(v,n);
//	if(v[n][r]==0) 			//if this value isn't computed already
//		v[n][r]=n*p(n-1,r);	//compute the value recursively
//	return v[n][r];
//}

ull l, t, n, c;

const int m=1;//multiplier

typedef vector<int>vi;
vi v;
vvvu da;


ull recurse(
	int s,//star number
	int b,//boosters left
	int h//time so far
){
//cerr<<"\n\t"<<s<<"\t"<<b<<"\t"<<h;
	if(s==n)return 0;
	
	if(h>m*t)h=m*t;
	
	if(b==0){//add up all the rest without boosters
		ull&rv=da[s][b][h];
		rv=0;
		fori(i,s,n)
			rv+=v[i%c];
		rv*=2*m;
//cerr<<"\n\t"<<s<<"\t"<<b<<"\t"<<h;
//cerr<<": "<<da[s][b][h];
		return rv;
	}
	
	if(da[s][b][h]>0) return da[s][b][h];
	
	ull dist=v[s%c]*m;
	ull diff=min(max(t*m-h,(ull)0),2*dist);
	
	da[s][b][h] = min(recurse(s+1,b,2*dist+h)+2*dist//no booster
		,recurse(s+1,b-1,h+dist+diff/2)+dist+diff/2);//booster
//cerr<<"\n\t"<<s<<"\t"<<b<<"\t"<<h;
//cerr<<": "<<da[s][b][h];
	return da[s][b][h];
}

int solve()
{
	return recurse(0,l,0)/m;
}

int main(int argc, char *argv[]){
//	cout.setf(ios::fixed,ios::floatfield);
//	cout.precision(6);
	int T;
//	istream& in = cin;ostream&out=cout;
//	ifstream fin(argv[1]);istream& in=fin;ofstream fout("a.out");ostream&out = fout;
	ifstream fin("B-small-attempt2.in");istream& in=fin;ofstream fout("a.out");ostream&out = fout;
//	ostream&out=cout;istringstream in("2\n2 20 8 2 3 5\n1 4 2 2 10 4\n");

//	ostream&out=cout;istringstream in("1 0 579930 304 304 9942 9921 9905 9835 9825 9740 9662 9635 9631 9616 9613 9540 9517 9514 9470 9380 9245 9238 9201 9194 9151 9150 9052 8999 8995 8989 8983 8919 8909 8894 8860 8858 8833 8833 8757 8654 8645 8607 8587 8581 8558 8546 8505 8505 8454 8397 8363 8344 8341 8329 8234 8208 8145 8025 7940 7898 7892 7874 7856 7828 7811 7805 7802 7801 7798 7792 7767 7705 7675 7629 7530 7441 7408 7404 7371 7360 7335 7314 7239 7197 7184 7183 7023 7015 6999 6951 6905 6818 6757 6748 6739 6709 6695 6657 6585 6536 6516 6510 6417 6408 6394 6324 6221 6202 6102 6090 6080 6051 6014 5965 5958 5953 5942 5907 5885 5881 5864 5829 5817 5778 5746 5733 5676 5664 5629 5469 5464 5458 5320 5310 5298 5289 5270 5265 5255 5200 5186 5153 5134 5129 5094 5073 5063 4996 4958 4930 4879 4878 4853 4846 4749 4748 4744 4730 4694 4658 4657 4587 4585 4543 4542 4504 4496 4413 4381 4364 4336 4331 4321 4256 4250 4243 4218 4216 4190 4096 4085 4072 3927 3918 3811 3785 3782 3722 3715 3667 3608 3595 3593 3588 3531 3520 3486 3380 3371 3364 3267 3253 3203 3177 3051 3041 3018 3002 2998 2952 2828 2807 2697 2641 2626 2613 2504 2486 2485 2475 2462 2452 2450 2446 2413 2412 2411 2387 2346 2298 2252 2251 2146 2112 2108 2108 2087 2057 2051 2022 2009 2001 1997 1968 1922 1918 1891 1834 1825 1808 1787 1768 1703 1675 1610 1592 1444 1416 1409 1408 1379 1367 1337 1336 1296 1286 1277 1263 1245 1239 1207 1184 1161 1153 1153 1077 1002 953 921 903 901 881 822 813 810 804 707 694 638 541 522 506 497 494 462 389 316 293 285 219 166 158 106 83 77 66 12 10\n");
//	ostream&out=cout;istringstream in("1 1 430398 85 85 9917 4704 8009 4589 4102 7411 7795 1607 7169 1075 3723 7963 2417 9563 3779 9904 3988 1558 4237 9233 8990 6598 9573 2744 195 6649 4036 7218 4669 1454 8410 6875 2955 7445 8897 7397 5813 5474 5377 47 122 594 8294 853 6279 3414 733 125 6743 6448 5849 3615 9381 6640 3777 4045 776 1066 2467 7306 1733 6314 8953 4262 4695 7074 2766 7483 8911 5894 7443 4139 6146 687 7552 7482 1458 6036 1998 3924 8813 1029 4588 8933 8005");
//	ostream&out=cout;istringstream in("1 0 34936503334 1000 1000 40 5795 7180 9049 7681 3181 2176 5097 7460 851 3986 1435 5057 9767 227 5301 3662 8956 5673 8798 8772 1029 3920 7402 136 2751 4407 7986 9266 9832 5570 7526 3886 4138 8552 1592 3860 2493 8013 2448 8784 2477 9258 8911 1299 9258 7416 4752 1588 6132 3987 8795 7522 6696 1269 4781 1727 486 452 1936 2752 4280 9083 9917 6107 8111 6411 3128 2720 7644 8801 3513 1070 2188 6177 419 580 8491 9612 6692 4936 6117 5925 2218 2638 509 4957 2109 4018 2179 6917 7113 2820 5669 5889 2365 4105 4922 7395 6043 9522 217 9640 6998 754 7160 1220 1321 8816 3402 6654 5131 1059 6522 9514 3020 3622 8995 3252 3494 5883 3326 4942 3633 6800 6061 4246 8270 1514 9049 6547 6144 6777 9975 1268 7553 6950 963 7774 1261 7478 2072 5436 3246 953 7811 356 8319 9441 646 6259 4586 6141 2370 2631 5643 7986 6434 3142 5705 2212 5219 3476 5036 91 5931 2988 2509 8385 7309 9226 6583 9828 6818 3598 5757 784 3781 9084 8983 9715 9495 4747 951 9735 9653 3303 4109 3510 7219 4933 9077 8906 1155 4195 6960 6048 4781 2513 5563 690 247 9609 9859 7783 8892 3332 8246 4416 6350 2583 6007 5280 3328 9744 5200 5034 6021 6037 3597 7131 7492 7597 1999 638 9246 36 1382 6367 1171 5390 9365 8408 1179 5351 9580 19 8550 265 900 7555 7592 1972 3135 1883 6234 5424 5505 9846 3282 5244 9928 1039 9742 7165 991 5011 1871 8348 5161 3117 944 8395 2542 7056 148 8536 6028 4272 842 45 1481 2718 4004 7628 2079 9489 9440 3410 567 6289 5984 6821 2952 7779 9216 6322 8863 9682 9979 2242 9379 7882 3625 1902 1245 6138 5624 8365 7474 2193 4317 5842 5851 810 734 4338 6208 9737 5096 2918 275 159 7475 6404 7194 525 2922 1080 7599 7065 9971 7694 822 8930 5339 3762 1854 7480 2153 2577 9553 2527 6725 9759 5498 2254 9092 4968 1507 7021 9047 3036 3489 7502 7398 7439 5155 3237 8729 6010 6981 6770 1500 3094 1619 235 1356 7638 7674 2235 9979 3848 3487 7412 4242 9379 882 7571 6740 5748 8718 5611 6195 4516 9184 9005 3812 5660 5424 3906 7921 6281 9664 5560 6879 2778 9435 5547 7534 6253 1763 4803 1076 4815 58 7274 2346 601 691 3159 3842 9408 1007 9545 5689 6533 3726 335 2692 7857 5194 4247 1543 1322 967 4707 4404 7891 2280 9911 3241 9923 1691 1440 8327 3259 8036 2820 335 943 4100 3797 4939 7742 4633 3008 7298 8663 8327 5752 1489 7912 908 9963 8028 4832 911 9877 6762 3601 6803 7342 4055 3887 1521 8668 9077 3420 6596 9304 7400 955 827 1896 4384 7914 4822 7455 3337 6774 6010 2324 8198 5635 6846 3907 277 9699 7413 9567 5048 2349 4453 7971 8819 7271 9947 1120 7498 4712 2645 7896 4681 106 4984 9396 3195 4086 2027 3231 8630 7293 3036 9381 2295 6286 3632 4099 229 7652 3338 7152 2159 9521 2618 9031 9874 1652 2061 9721 6007 180 6774 6578 8601 2336 5274 4935 1231 8382 4845 407 5751 6056 5655 1380 3378 4640 815 4117 2536 5516 9792 2716 784 7256 9 7229 4602 3329 4237 7023 5198 2251 4296 2747 2235 80 7495 5693 9708 7592 257 9007 7805 2210 4945 4310 7101 4461 2775 4673 2058 8040 5056 5536 6185 2726 7795 5394 1564 3081 6655 7889 46 5477 8954 7278 8083 7885 3155 2365 8004 5549 3258 9235 5497 7194 4235 5290 7901 3578 2942 6149 5029 7083 1389 3157 232 1356 1924 5996 1452 3297 8038 7669 3926 1971 7145 2131 1861 2366 7649 5311 19 4458 9704 3929 2784 3881 2546 3698 1865 8947 5794 6192 7576 7892 9641 5719 927 5144 1322 616 7161 8518 3501 9623 5045 1701 4055 6740 213 5769 7299 7217 9911 9988 3510 8077 1933 3917 272 8412 4508 388 9007 6954 65 2193 3516 4879 1966 4289 730 7010 7348 9810 5580 1378 1633 2652 4881 7627 6077 4757 988 622 7817 163 6060 3985 2679 8153 3269 775 9206 7062 251 1278 4241 4232 2671 8348 8083 3607 7216 4419 8903 5152 6296 3957 2700 1902 1444 4257 4305 2745 8377 9242 9814 2481 1317 3229 6356 773 9524 4494 5555 7523 4752 5832 6498 8274 2199 7531 6690 4608 9893 8232 2026 4616 9479 199 2230 3643 4181 4777 576 8663 7135 6709 1225 328 7664 3466 2942 9609 9480 8803 7685 2303 1640 4045 8509 3848 1334 5656 2162 3098 363 6510 5636 4455 2798 4108 9408 8627 6605 7778 3506 5745 4301 2899 1905 8476 8838 8290 9384 7482 3922 3216 7457 7679 1062 6908 3559 9637 8327 1538 6690 4733 4467 4781 9473 7677 4064 6729 4912 617 6108 3993 8378 2226 33 5403 9841 4604 3436 8543 1067 3233 8432 7516 3400 4756 6266 3656 7948 4427 330 9527 8605 1582 5280 2832 9857 3682 3735 487 6025 9203 6430 1345 2005 2955 9130 9004 2669 8202 953 859 8324 9335 6804 9917 2577 6458 4898 7402 975 1077 3606 7939 7037 4989 2074 4876 7241 9269 5060 4531 7685 2854 73 6086 8495 9659 897 918 1771 4252 9056 7920 4432 9765 3644 486 1945 1416 1939 5144 1813 3412 9400 7686 9100 7979 2556 2917 3813 924 8021 4421 727 6137 8199 2111 1210 5046 5865 8666 562 269 654 1092 6798 172 2142 7704 39 125 4430 8582 7905 991 4093 7741 8659 3626 532 3970 3907 1151 594 6968 4424 4422 4164 6837 7864 3653 5649 3232 3184 3107 6199 26 6711 6773 5325 9538 4534 8460 232 2060 9765 6643 3871 191 5606 203 312 1235 4699 3270 8374 715 5018 5149 4609 8224 8372 4901 4980 4103 5223 8019 9468 8320 2173 7532 7797 327 119 2996 5900 5012 3342 9339 5222 3905 6165 9824 1600 3018 6912 9881 6721\n");

#define cin blahewlarujhesdofi
#define cout blahewlarujhesdofi
	in>>T;
	string temp;
//getline(in,temp);
//cerr<<temp;
	fori(i,0,T){
		in>>l>>t>>n>>c;
//out<<T<<l<<t<<n<<c;
		v.resize(c);
		fori(j,0,c)in>>v[j];

		da.clear();
		//da.resize(n, vvu(l+1,vu(m*t+1,-1)));

		out<<"Case #"<<(i+1)<<": ";
try{
		out<<solve();
}
catch(exception& e){
	cerr<<e.what()<<endl;
		system("PAUSE >void.out");
}		
		out<<endl;
//for(vvvu::iterator x=da.begin();x!=da.end();++x){
//for(vvu::iterator y=x->second.begin();y!=x->second.end();++y){
//for(vu::iterator z=y->second.begin();z!=y->second.end();++z){
//	cerr<<z->second<<' ';
//}
//cerr<<endl;
//}
//cerr<<endl;
//}

//fori(z,0,t+1){
//	cerr<<da[x][y][z]<<' ';
//}
//cerr<<endl;
//}
//cerr<<endl;
//}

	}
	system("PAUSE >void.out");
	return 0;
}
