/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author yassin
 */

#include <fstream>

#include <iostream>
#include <vector>
#include <string>
#include <utility>
#include <algorithm>
#include <map>
#include <set>
#include <cmath>
#include <cstdlib>
#include <tuple>
#include <queue>
#include <functional>
#include <stack>
#include <numeric>
#include <cassert>

using namespace std;

class TaskA {
public:
    void solve(istream& in, ostream& out) {
        int T;
        in >> T;
        for (int t = 1; t <= T; ++t) {
            int R, C;
            in >> R >> C;
            vector<vector<char>> cake(R, vector<char>(C));
            for (int i = 0; i < R; ++i) {
                for (int j = 0; j < C; ++j) {
                    in >> cake[i][j];
                }
            }
            vector<int> row(R, 0), col(C, 0);
            for (int i = 0; i < R; ++i) {
                for (int j = 0; j < C; ++j) {
                    if (cake[i][j] != '?') {
                        ++row[i];
                        ++col[j];
                    }
                }
            }
            
            for (int a = 1; a <= R; ++a) {
                for (int b = 1; b <= C; ++b) {
                    for (int x = 0; x < R; ++x) {
                        for (int y = 0; y < C; ++y) {
                            if (x+a <= R && y+b <= C) {
                                bool poss = true;
                                char c = -1;
                                
                                for (int i = x; poss && i < x+a; ++i) {
                                    for (int j = y; poss && j < y+b; ++j) {
                                        if (c == -1 && cake[i][j] != '?') {
                                            c = cake[i][j];
                                        } else if (cake[i][j] != '?') {
                                            poss = (cake[i][j] == c);
                                        }
                                    }
                                }
                                if (poss && c != -1) {
                                    for (int i = x; i < x+a; ++i) {
                                        for (int j = y; j < y+b; ++j) {
                                            cake[i][j] = c;
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            out << "Case #" << t << ":\n";
            for (int i = 0; i < R; ++i) {
                for (int j = 0; j < C; ++j) {
                    out << cake[i][j];
                }
                out << "\n";
            }
        }
    }
};

int main() {
    std::ios::sync_with_stdio(false); cin.tie(nullptr);

    TaskA solver;
    std::istream& in(cin);
    std::ostream& out(cout);
    solver.solve(in, out);
    return 0;
}
