#include <algorithm>#include <bitset>#include <cassert>#include <deque>#include <queue>#include <iomanip>#include <iostream>#include <iterator>#include <float.h>#include <limits>#include <list>#include <map>#include <math.h>#include <numeric>#include <set>#include <sstream>#include <stack>#include <stdio.h>#include <string>#include <vector>using namespace std;typedef long long ll;typedef unsigned long long ull;typedef pair<int, int> pi;typedef pair<ll, ll> pl;typedef vector<bool> vb;typedef vector<int> vi;typedef vector<unsigned> vu;typedef vector<ll> vl;typedef vector<pi> vp;typedef vector<string> vs;typedef set<int> si;typedef map<int, int> mi;int oi; int oj;int R,C;char cake[26][26];int qmarks;bool visited[26][26];void printcake(){	for(int i=0; i<R; i++){		for(int j=0; j<C; j++)			cout << cake[i][j];		cout << endl;	}}int main(){    std::set<long long>::iterator it;    int t;    cin >> t;    for(int Case=1; Case<=t; Case++){        cin >> R >> C;        qmarks = 0;        std::vector<pi> cs;        for(int i=0; i<R; i++){			for(int j=0; j<C; j++){				cin >> cake[i][j];				if(cake[i][j] != '?'){					qmarks += 1;					visited[i][j] = 0;				}else{ 					visited[i][j] = 1;					cs.push_back(make_pair(i,j));				}							}		}		for(int j=0; j<C; j++){			int i = 0;			char prev = '?';			while(i<R){				if(cake[i][j] == '?'){					if(prev == '?'){						int k = i;						while(k < R &&  cake[k][j] == '?'){							k += 1;						}						if( k == R ) break;						prev = cake[k][j];					}					cake[i][j] = prev;				}else{					prev = cake[i][j];				}				i += 1;			}		}		for(int i=0; i<R; i++){			int j = 0;			char prev = '?';			while(j<C){				if(cake[i][j] == '?'){					if(prev == '?'){						int k = j;						while(k < C &&  cake[i][k] == '?'){							k += 1;						}						if( k == C ) break;						prev = cake[i][k];					}					cake[i][j] = prev;				}else{					prev = cake[i][j];				}				j += 1;			}		}        cout << "Case #" << Case << ":" << endl;        printcake();    }    return 0;}