#include <stdio.h>#include <stdarg.h>#include <string.h>//#define TESTING//#define USETESTMAIN//#define VERBOSE	// verbose output during testing#define APPNAME		"t1"#define OUTFILE		APPNAME ".out"#define ERRPREF		"\n *** "#define ERRSUF		"\n"#define MAXPATTERN	1024#define OUTFORMAT	"Case #%d: %d\n"int uWordSize;int uWordCount;int uTCaseCount;char** pDict;void printErr( const char* a_kpszFormat, ... );char** allocate( int a_uElemSize, int a_uElemCount );bool matches( char* a_pszWord, char* a_pszPattern );int process( char* a_pszPattern );#ifdef TESTINGvoid printtest( char* word, char* pattern );void test( const char* a_word, const char* a_pattern );#endif	// TESTINGvoid printErr( const char* a_kpszFormat, ... ){	va_list args;	va_start( args, a_kpszFormat );		char outBuff[ 256 ] = { 0 };	vsprintf( outBuff, a_kpszFormat, args );		// print to the output	printf( "%s%s%s", ERRPREF, outBuff, ERRSUF );		va_end( args );}char** allocate( int a_uElemSize, int a_uElemCount ){	// dont make any checks here - will be faster		char** pRet = new char*[ a_uElemCount ];	for ( int i = 0; i < a_uElemCount; ++i )	{		pRet[ i ] = new char[ a_uElemSize + 1 ];	}		return pRet;}bool matches( char* a_pszWord, char* a_pszPattern ){	char* pWordNull = a_pszWord + sizeof ( char ) * strlen( a_pszWord );	char* pPatternNull = a_pszPattern + sizeof( char ) * strlen( a_pszPattern );		while ( a_pszWord != pWordNull )	{		if ( *a_pszPattern == '(' )		{			++a_pszPattern;			while ( *a_pszWord != *a_pszPattern && *a_pszPattern != ')' )			{				++a_pszPattern;			}			if ( *a_pszPattern == ')' )			{				return false;			}			else			{				while ( *a_pszPattern != ')' )				{					++a_pszPattern;				}				++a_pszPattern;			}		}		else		{			if ( *a_pszWord != *a_pszPattern )			{				return false;			}			else			{				++a_pszPattern;			}		}				++a_pszWord;	}		return true;}int process( char* a_pszPattern ){	int uHitCount = 0;		for ( int i = 0; i < uWordCount; ++i )	{		if ( matches( pDict[ i ], a_pszPattern ) )		{			++uHitCount;#ifdef TESTING			printtest( pDict[ i ], a_pszPattern );	#ifdef VERBOSE	// when VERBOSE also print failed hits		}		else		{			printtest( pDict[ i ], a_pszPattern );	#endif // VERBOSE#endif	// TESTING		}	}		return uHitCount;}					  #ifdef TESTINGvoid printtest( char* word, char* pattern ){	printf( "\"%s\" %s \"%s\"\n", word, matches( word, pattern ) ? "matches" : "does not match", pattern );}					  void test( const char* a_word, const char* a_pattern ){	char word[ MAXPATTERN ] = { 0 };	char pattern[ MAXPATTERN ] = { 0 };	strcpy( word, a_word );	strcpy( pattern, a_pattern );					  	printtest( word, pattern );}					  #endif	// TESTING#ifndef USETESTMAIN					  int main( int argc, char* argv[] ){	if ( argc != 2 && argc != 3 )	{		printErr( "bad param count\nusage: %s <infile> <outfile>(=%s)", APPNAME, OUTFILE );		return 0;	}		// try opening the input file	FILE* pfIn = fopen( argv[ 1 ], "r" );	if ( !pfIn )	{		printErr( "could not open input file: \"%s\"", argv[ 1 ] );		return 0;	}		// read header	fscanf( pfIn, "%d", &uWordSize );	fscanf( pfIn, "%d", &uWordCount );	fscanf( pfIn, "%d", &uTCaseCount );		// allocate mem for dictionary	pDict = allocate( uWordSize, uWordCount );		// read dictionary	for( int i = 0; i < uWordCount; ++i )	{		fscanf( pfIn, "%s", pDict[ i ] );	}		// open the output file	FILE* pfOut;	if ( argc == 3 )	{		pfOut = fopen( argv[ 2 ], "w" );		if ( !pfOut )		{			printErr( "could not open output file: \"%s\"", argv[ 2 ] );			return 0;		}	}	else	{		pfOut = fopen( OUTFILE, "w" );		if ( !pfOut )		{			printErr( "could not open output file: \"%s\"", OUTFILE );			return 0;		}	}		// start processing	char szCurrentPattern[ MAXPATTERN ];	for ( int i = 0; i < uTCaseCount; ++i )	{		fscanf( pfIn, "%s", &szCurrentPattern );		fprintf( pfOut, OUTFORMAT, i + 1, process( szCurrentPattern ) );	}		// only close the output file	// it will be faster to leave the rest of the job to the system	// yuk yuk yuk!	// fclose( pfOut );	// actually just flush it :P muhahahahah!!	fflush( pfOut );		return 0;}#elseint main( int argc, char* argv[] ){	test( "abc", "(ab)b(cd)" );	test( "abd", "(ab)b(cd)" );	test( "fdsfds", "(ab)b(cd)" );	test( "aac", "(ab)b(cd)" );		return 0;}#endif	// !USETESTMAIN