/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Evgenii Balai
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include <string.h>
#include<string>
#include<vector>
#include<algorithm>

using namespace std;

bool *prime;

string getBinary(unsigned int n) {
    string fu;
    while (n > 0) {
        fu.push_back(n % 2 ? '1' : '0');
        n /= 2;
    }
    return fu;
}

unsigned long long getNumber(string s, int base) {
    long long result = 0;
    long long mult = 1;
    for (int i = 0; i < s.length(); i++) {
        char c = s[i];
        if (c == '1')
            result += mult;
        mult *= base;
    }
    return result;

}

class TaskC {
public:

    void solve(std::istream &in, std::ostream &out) {
        const long long size = (1ll << 32);
        prime = new bool[size];
        int length, n;
        in >> length;
        in >> length;
        in >> n;

        memset(prime, 1, sizeof(bool) * size);

        prime[0] = prime[1] = false;
        for (unsigned long long i = 2; i <= size - 1; ++i)
            if (prime[i]) if (i * 1ll * i <= size - 1)
                for (unsigned long long j = i * i; j <= size - 1; j += i)
                    prime[j] = false;


        vector<string> numbers;
        vector<vector<int> > divisors;

        for (unsigned int i = 1; i < (1ll << length); i++) {
            string bin = getBinary(i);

            if (bin[0] != '1')
                continue;
            if (bin.length() != length)
                continue;
            int isPrime = false;

            for (int base = 2; base <= 10; base++) {
                unsigned int number = getNumber(bin, base);
                if (prime[number])
                    isPrime = true;
            }
            if (!isPrime) {

                string binr = bin;
                std::reverse(binr.begin(), binr.end());


                vector<int> ndivisors;
                for (int base = 2; base <= 10; base++) {
                    unsigned long long number = getNumber(bin, base);
                    for (long long j = 2; j < 1000000000; j++) {
                        if (number % j == 0) {
                            ndivisors.push_back(j);
                            break;
                        }
                    }
                }
                if (ndivisors.size() != 9) {
                    continue;
                }
                numbers.push_back(binr);
                divisors.push_back(ndivisors);
                if (numbers.size() == n)
                    break;
            }
        }

        out << "Case #1:\n";
        out.flush();
        for (int j = 0; j < n; j++) {
            out << numbers[j];
            for (int k : divisors[j]) {
                out << " " << k;
            }
            out << "\n";
        }
        delete[] prime;
    }
};


int main() {
    TaskC solver;
    std::istream &in(std::cin);
    std::ofstream out("c.out");
    solver.solve(in, out);
    return 0;
}
