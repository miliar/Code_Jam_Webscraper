/**
Name:       C) Coin Jam

 */
#include <iostream>
#include <sstream>
#include <string>
#include <cmath>
#include <algorithm>
using namespace std;

const uint64_t BASE[11][32] = {{1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1},
{1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648},
{1, 3, 9, 27, 81, 243, 729, 2187, 6561, 19683, 59049, 177147, 531441, 1594323, 4782969, 14348907, 43046721, 129140163, 387420489, 1162261467, 3486784401, 10460353203, 31381059609, 94143178827, 282429536481, 847288609443, 2541865828329, 7625597484987, 22876792454961, 68630377364883, 205891132094649, 617673396283947},
{1, 4, 16, 64, 256, 1024, 4096, 16384, 65536, 262144, 1048576, 4194304, 16777216, 67108864, 268435456, 1073741824, 4294967296, 17179869184, 68719476736, 274877906944, 1099511627776, 4398046511104, 17592186044416, 70368744177664, 281474976710656, 1125899906842624, 4503599627370496, 18014398509481984, 72057594037927936, 288230376151711744, 1152921504606846976, 4611686018427387904},
{1, 5, 25, 125, 625, 3125, 15625, 78125, 390625, 1953125, 9765625, 48828125, 244140625, 1220703125, 6103515625, 30517578125, 152587890625, 762939453125, 3814697265625, 19073486328125, 95367431640625, 476837158203125, 2384185791015625, 11920928955078125, 59604644775390625, 298023223876953125, 1490116119384765625, 7450580596923828125, 359414837200037393, 1797074186000186965, 8985370930000934825, 8033366502585570893},
{1, 6, 36, 216, 1296, 7776, 46656, 279936, 1679616, 10077696, 60466176, 362797056, 2176782336, 13060694016, 78364164096, 470184984576, 2821109907456, 16926659444736, 101559956668416, 609359740010496, 3656158440062976, 21936950640377856, 131621703842267136, 789730223053602816, 4738381338321616896, 9983543956220149760, 4561031516192243712, 8919445023443910656, 16623181993244360704, 7505371590918406144, 8138741398091333632, 11938960241128898560},
{1, 7, 49, 343, 2401, 16807, 117649, 823543, 5764801, 40353607, 282475249, 1977326743, 13841287201, 96889010407, 678223072849, 4747561509943, 33232930569601, 232630513987207, 1628413597910449, 11398895185373143, 79792266297612001, 558545864083284007, 3909821048582988049, 8922003266371364727, 7113790643470898241, 12903046356877184455, 16534348203302084721, 5059972980857283351, 16973066792291431841, 8131003103782713191, 1576789505350337489, 11037526537452362423},
{1, 8, 64, 512, 4096, 32768, 262144, 2097152, 16777216, 134217728, 1073741824, 8589934592, 68719476736, 549755813888, 4398046511104, 35184372088832, 281474976710656, 2251799813685248, 18014398509481984, 144115188075855872, 1152921504606846976, 9223372036854775808, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
{1, 9, 81, 729, 6561, 59049, 531441, 4782969, 43046721, 387420489, 3486784401, 31381059609, 282429536481, 2541865828329, 22876792454961, 205891132094649, 1853020188851841, 16677181699666569, 150094635296999121, 1350851717672992089, 12157665459056928801, 17185268762964601129, 7093466277004997233, 8500964271916320249, 2721702152408675777, 6048575297968530377, 17543689534297670161, 10319253219002618521, 639558602475808609, 5756027422282277481, 14910758653121394097, 5069619362125685561},
{1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000, 10000000000, 100000000000, 1000000000000, 10000000000000, 100000000000000, 1000000000000000, 10000000000000000, 100000000000000000, 1000000000000000000, 10000000000000000000, 7766279631452241920, 3875820019684212736, 1864712049423024128, 200376420520689664, 2003764205206896640, 1590897978359414784, 15908979783594147840, 11515845246265065472, 4477988020393345024, 7886392056514347008, 5076944270305263616, 13875954555633532928} };

void printBaseArrays(){
    int T = 10;
    //    cin >> T;
    int maxN = 32;
    for(int i = 2; i <= T; ++i){
        cout << "const uint64_t base" << i << '['<<maxN<<"] = {";
        uint64_t multiplier = 1;
        for(int o = 0 ; o < maxN; ++o){
            cout << multiplier << (o == maxN-1 ?"":", ");
            multiplier*=i;
        }
        cout << "};"<<endl<<endl;;
    }
}

string intToBinary(size_t input, int max){
    ostringstream out;
    out << 1;
    
    for (int i = max-1; i >= 0; --i){
        if ( input >= BASE[2][i]){
            input%=BASE[2][i];
            out << 1 ;
        } else {
            out << 0;
        }
    }

    out << 1;
    return out.str();
}

uint64_t stringToBase(int baseN, const string &input){
    size_t len = input.size();
    uint64_t out = 0;
    for (size_t i = 0 ; i < len; ++i){
        if (input[i] == '1')
            out += BASE[baseN][len-i-1];
    }
    return out;
}

bool isPrime(uint64_t num){
    if (num <= 1)
        return false;
    if (num <= 3)
        return true;
    float numSqrt = sqrt(static_cast<double>(num));
    for (int i = 2; i < numSqrt; ++i){
        if ( num % i == 0){
            return false;
        }
    }
    return true;
}

uint64_t getPrimeFactor(uint64_t num){
    if (num <= 3)
        return 0;
    double numSqrt = sqrt(static_cast<double>(num));
    uint64_t factor = 0;
    for (int i = 2; i <= numSqrt; ++i){
        if ( num % i == 0){
            return i;
        }
    }
    return factor;
}

void printPrimeFactors(uint64_t num){
    double numSqrt = sqrt(static_cast<double>(num));
    for (int i = 2; i <= numSqrt; ++i){
        if ( num % i == 0){
            cout  << i << " ";
        }
    }
}


void doTheMagic(int N, int J){
    int variableBits = N-2;
    uint64_t posibilities = BASE[2][N-2];
    for (size_t i = 0; i < posibilities && J; ++i){
        string str = intToBinary(i, variableBits);
        bool primeFound = false;
        ostringstream out;
        out << str;
        for (int base =2; base < 11; ++base){
            uint64_t num = stringToBase(base, str);
            uint64_t factor = getPrimeFactor(num);
            if (factor == 0){
                primeFound = true;
                break;
            }
            out << ' ' << factor ;
        }
        if (primeFound)
            continue;
        else {
            cout << out.str() << endl;
            --J;
        }
    }
}


int main() {
    int T, length, outputs;
    cin >> T;
    for(int i = 1; i <= T; ++i){
        cin >> length >> outputs;
        cout << "Case #" << i <<':' << endl;
        doTheMagic(length, outputs);
    }
    return 0;
}