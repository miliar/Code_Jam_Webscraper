/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Evgenii Balai
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include<vector>
#include<algorithm>
#include<memory.h>

using namespace std;
int ct[2501];

class TaskB {

public:
    void solve(std::istream &in, std::ostream &out) {
        int t = 0;
        in >> t;
        for (int tcases = 0; tcases < t; tcases++) {
            int idx = 0;
            int n;
            in >> n;
            vector<vector<int> > rows;
            vector<int> ans;
            for (int i = 0; i < 2 * n - 1; i++) {
                vector<int> row;
                for (int j = 0; j < n; j++) {
                    int num;
                    in >> num;
                    row.push_back(num);
                }
                rows.push_back(row);
            }

            for (int i = 0; i < n; i++) {

                if (i == n - 1) {
                    ans.push_back(rows[0][n - 1]);
                    break;
                }
                int smallest = 3000;
                for (int j = 0; j < rows.size(); j++) {
                    smallest = min(smallest, rows[j][i]);
                }

                int occ = 0;
                for (int j = 0; j < rows.size(); j++) {
                    if (rows[j][i] == smallest)
                        ++occ;
                }
                memset(ct, 0, 2501 * sizeof(int));
                if (occ == 2) {

                    for (int j = 0; j < rows.size(); j++) {
                        if (rows[j][i] != smallest) ct[rows[j][i]]++;
                    }

                    for (int j = 0; j < rows.size(); j++) {
                        if (rows[j][i] == smallest) {
                            for (int k = i + 1; k < n; k++) {
                                ct[rows[j][k]]--;
                            }
                        }
                    }

                    for (int j = 0; j <= 2500; j++) {
                        if (ct[j] < 0) {
                            ans.push_back(j);
                            break;
                        }
                    }

                    vector<int> toerase;
                    for (int j = 0; j < rows.size(); j++) {
                        if (rows[j][i] == smallest) {
                            toerase.push_back(j);
                        }
                    }

                    rows.erase(rows.begin() + toerase[1]);
                    rows.erase(rows.begin() + toerase[0]);

                } else {

                    for (int j = 0; j < rows.size(); j++) {
                        if (rows[j][i] == smallest) {
                            for (int k = i + 1; k < n; k++) {
                                ct[rows[j][k]]++;
                            }
                        } else {
                            ct[rows[j][i]]--;
                        }
                    }

                    vector<int> g;
                    g.push_back(smallest);
                    for (int j = 0; j <= 2500; j++) {
                        if (ct[j] < 0)
                            g.push_back(j);
                    }
                    sort(g.begin(), g.end());
                    for (int j : g) {
                        ans.push_back(j);
                    }
                    i = n + 1;
                }
            }
            out << "Case #" << tcases + 1 << ":";
            for (int i:ans) {
                out << " " << i;
            }
            out << endl;
        }


    }
};


int main() {
    TaskB solver;
    std::istream &in(std::cin);
    std::ofstream out("b.out");
    solver.solve(in, out);
    return 0;
}

