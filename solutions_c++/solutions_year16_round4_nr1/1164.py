/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Evgenii Balai
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include<vector>

using namespace std;

class TaskA {
public:
    vector<char> go(char c, int count) {
        vector<char> it;
        it.push_back(c);
        while (it.size() != count) {
            vector<char> it2;
            for (char c : it) {
                if (c == 'P') {
                    it2.push_back('P');
                    it2.push_back('R');
                }
                if (c == 'R') {
                    it2.push_back('R');
                    it2.push_back('S');
                }
                if (c == 'S') {
                    it2.push_back('P');
                    it2.push_back('S');
                }
            }
            it = it2;

        }
        return it;
    }

    bool comp(vector<char> vec, int p, int r, int s) {
        int rc = 0, pc = 0, sc = 0;
        for (char c : vec) {
            if (c == 'P') ++pc;
            if (c == 'R') ++rc;
            if (c == 'S') ++sc;
        }
        return pc == p && rc == r && sc == s;
    }

    void print(vector<char> vec, std::ostream &out) {
        for (int i = 0; i < vec.size(); i++) {

            out << vec[i];
        }
    }

    bool cmpVec(vector<char> &c1, vector<char> &c2) {
        for (int i = 0; i < c1.size(); i++) {
            if (c1[i] == c2[i])
                continue;
            if (c1[i] > c2[i])
                return true;
            else
                return false;
        }
        return false;
    }


    void rear(vector<char> &C) {
        int grSize = 2;
        while (grSize <= C.size()) {
            for (int i = 0; i < C.size(); i += grSize) {
                vector<char> c1, c2;
                for (int j = i; j < i + grSize / 2; j++) {
                    c1.push_back(C[j]);
                }
                for (int j = i + grSize / 2; j < i + grSize; j++) {
                    c2.push_back(C[j]);
                }
                if (cmpVec(c1, c2)) {
                    for (int j = i; j < i + grSize / 2; j++) {
                        C[j] = c2[j - i];
                    }
                    for (int j = i + grSize / 2; j < i + grSize; j++) {
                        C[j] = c1[j - grSize / 2 - i];
                    }
                }
            }
            grSize *= 2;
        }
    }

    void solve(std::istream &in, std::ostream &out) {
        int t;
        in >> t;

        for (int tc = 0; tc < t; tc++) {
            int n, r, p, s;
            in >> n >> r >> p >> s;
            bool found = false;
            vector<char> storVec;
            for (char c : {'P', 'R', 'S'}) {
                vector<char> get = go(c, 1 << n);
                if (comp(get, p, r, s) && (storVec.size() == 0 || cmpVec(storVec, get))) {
                    storVec = get;
                    found = true;
                }
            }
            if (!found) {
                out << "Case #" << (tc + 1) << ": IMPOSSIBLE" << "\n";
            } else {
                out << "Case #" << (tc + 1) << ": ";
                rear(storVec);
                print(storVec, out);
                out << '\n';
            }
        }

    }
};


int main() {
    TaskA solver;
    std::istream &in(std::cin);
    std::ofstream out("a.out");
    solver.solve(in, out);
    return 0;
}

