/**
 * code generated by JHelper
 * More info: https://github.com/AlexeyDmitriev/JHelper
 * @author Evgenii Balai
 */

#include <iostream>
#include <fstream>

#include <iostream>
#include<utility>
#include<vector>
#include<string>
#include<set>
#include<algorithm>

using namespace std;

class TaskC {
public:
    void solve(std::istream &in, std::ostream &out) {
        int n;
        in >> n;

        for (int t = 0; t < n; t++) {
            int count;
            in >> count;
            vector<pair<string, string> > tops;
            for (int i = 0; i < count; i++) {
                string s1, s2;
                in >> s1 >> s2;
                tops.push_back({s1, s2});

            }

            int largest = 0;
            for (int i = 0; i < (1 << count); i++) {
                set<string> sel1, sel2;
                for (int j = 0; j < count; j++) {
                    if ((1 << j) & i) {
                        sel1.insert(tops[j].first);
                        sel2.insert(tops[j].second);
                    }
                }
                bool ok = true;
                int count1 = 0;
                for (int j = 0; j < count; j++) {

                    if (((1 << j) & i) == 0) {
                        ++count1;
                        if (sel1.find(tops[j].first) == sel1.end()) ok = false;
                        if (sel2.find(tops[j].second) == sel2.end()) ok = false;
                    }
                }
                if (ok) {
                    largest = max(largest, count1);
                }

            }

            out << "Case #" << (t + 1) << ": " << largest << endl;

        }

    }
};


int main() {
    TaskC solver;
    std::istream &in(std::cin);
    std::ofstream out("c.out");
    solver.solve(in, out);
    return 0;
}

