#include <iostream>
#include <vector>
#include <algorithm>
#include <math.h>
#include <fstream>
#include <string>


using namespace std;

// Counts the number of digits in a number
int count_num_digits( int number)
{
	int count = 1;
	while ( number = number/10 )
		count++;
	return count;
}

// Rotate a number by specified positioon
long cyclic_rotate( long num, int numLen, int pos )
{
	long new_num, suffix,prefix;
	long compute_by = (pow((double)10,(numLen - pos )));
	suffix =  num / compute_by ;
	prefix =  num % compute_by ;

	new_num = prefix *  pow((double)10, pos ) + suffix;

	return new_num;
}


long count_recycled_nums(long lower_limit, long upper_limit)
{
	long uniq_recycle_pair_count = 0;
	int num_digits =  count_num_digits ( lower_limit);
	//printf("\n total digits in num %d", num_digits);

	// 
	if ( num_digits == 1 ) 
	{
		return 0;
	}

	for ( int counter = lower_limit ; counter < upper_limit ; counter++)
	{
		// vector for lookup 
		vector<long> numberList;

		// Recycle Number
		for ( int pos = 1 ; pos < num_digits ; pos++ ) 
		{
			long recycled_num = cyclic_rotate(counter,num_digits,pos);
			//printf("\n recycle_num %d", recycled_num);

			// Check if this recycled pair is already recorded
			if ( recycled_num <= counter)
			{
				//cout<< "recycled_num is lower than counter,already counted, skipping"<<endl;
				continue;
			}

			if ( lower_limit <= recycled_num && upper_limit >= recycled_num )  
			{
				//Discard duplicate number generated by rotating a number by different postion
				if ( std::find(numberList.begin(),numberList.end(),recycled_num) == numberList.end())
				{
					//cout<< counter <<":"<<recycled_num<<endl;
					uniq_recycle_pair_count++;
					numberList.push_back(recycled_num);
				}
			}
		}
	}
	return uniq_recycle_pair_count;
}


int main (int argc , char **argv)
{
	long total_inputs,lower_limit,upper_limit;

	string filename = argv[1];
	ifstream inFile;
	ofstream outFile;
	inFile.open(filename.c_str());
	outFile.open("c:\\out-C-Small.txt");
	
	if(inFile.is_open())
	{
		string line;
		// First line is no of inputs
		getline(inFile,line);
		total_inputs  = atoi(line.c_str());
		int count = 1;
		while(inFile.good() && count <= total_inputs)
		{
			// Read each line, parse min, max args and call function to print o/p
			getline(inFile,line);
			size_t idx = line.find(' ');
			lower_limit = atoi(line.substr(0,idx).c_str());
			upper_limit = atoi(line.substr(idx+1).c_str());

			long result = count_recycled_nums(lower_limit,upper_limit);
			
			cout<< endl<< "Case #" << count << ":" << result;
			if ( outFile.is_open() && outFile.good())
			{
				char buf[512] ={0};
				sprintf(buf,"Case #%d: %ld \n",count,result);
				outFile <<buf;
			}
			count++;
		}
		inFile.close();
		outFile.close();
	}
	

}

