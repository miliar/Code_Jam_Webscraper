/*******************************************************************************
 * jason.molenda@gmail.com
 ******************************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <conio.h>
#include <stdarg.h>
#include <string.h>


/*******************************************************************************
 *
 ******************************************************************************/

typedef unsigned char uint8_t;
typedef unsigned short uint16_t;
typedef unsigned int uint32_t;


typedef signed char int8_t;
typedef signed short int16_t;
typedef signed int int32_t;


/*******************************************************************************
 *
 ******************************************************************************/

#define NO_BITS 0x00
#define BIT0    0x01
#define BIT1    0x02
#define BIT2    0x04
#define BIT3    0x08
#define BIT4    0x10
#define BIT5    0x20
#define BIT6    0x40
#define BIT7    0x80
#define BIT8    0x0100
#define BIT9    0x0200
#define BIT10   0x0400
#define BIT11   0x0800
#define BIT12   0x1000
#define BIT13   0x2000
#define BIT14   0x4000
#define BIT15   0x8000
#define BIT16   0x010000
#define BIT17   0x020000
#define BIT18   0x040000
#define BIT19   0x080000
#define BIT20   0x100000
#define BIT21   0x200000
#define BIT22   0x400000
#define BIT23   0x800000
#define BIT24   0x01000000
#define BIT25   0x02000000
#define BIT26   0x04000000
#define BIT27   0x08000000
#define BIT28   0x10000000
#define BIT29   0x20000000
#define BIT30   0x40000000
#define BIT31   0x80000000

/*******************************************************************************
 * used to eliminate the warnings/errors generated by the compiler when
 * there are unused arguments in a function.
 ******************************************************************************/
#define UNUSED_ARG(a)         do {/* nothing */} while (&a == 0)

/*******************************************************************************
 *
 ******************************************************************************/

#define LOG_FILE_NAME                        "log.txt"


/*******************************************************************************
 * globals
 ******************************************************************************/

FILE* log_file;

/*******************************************************************************
 *
 ******************************************************************************/

void dual_printf(char *fmt, ...);
int main(int argc, char * argv[]);
int real_main(int argc, char * argv[]);


/*******************************************************************************
 * prints to a file and to Std Out
 ******************************************************************************/
void dual_printf(char *fmt, ...)
{
   va_list ap;

   // do printf
   va_start(ap, fmt);
   vprintf(fmt, ap);  // write to stdout
   va_end(ap);

   // do file output
   va_start(ap, fmt);
   vfprintf(log_file, fmt, ap);  // write to log file
   va_end(ap);

   fflush(log_file);
}


/*******************************************************************************
 *
 ******************************************************************************/
int main(int argc, char * argv[])
{
   log_file = fopen(LOG_FILE_NAME, "wt");
   printf("Saving results to '%s'...\n", LOG_FILE_NAME);

   if (log_file == NULL)
   {
      printf("error: opening file '%s'\n", LOG_FILE_NAME);
      return 0;
   }


   real_main(argc, argv);


   fclose(log_file);


   printf("Done!\n");
   printf("Press any key to continue . . . ");
   getch();


   return 0;
}


/*******************************************************************************
 *
 ******************************************************************************/
int real_main(int argc, char * argv[])
{
   UNUSED_ARG(argc);
   UNUSED_ARG(argv);


   FILE* input_file = fopen("input.txt", "rt");
   if (input_file == NULL)
   {
      return 0;
   }

   uint32_t num_test_cases;
   fscanf(input_file, "%d\n", &num_test_cases);
   for (uint32_t test_case_num = 0; test_case_num < num_test_cases; test_case_num++)
   {
      uint32_t AA;
      uint32_t BB;
      fscanf(input_file, "%d %d", &AA, &BB);
      //dual_printf("%d %d\n", AA, BB);

      // 2000000
      // 1234567
      char nn_as_string[8];
      char mm_as_string[8];

      //fscanf(input_file, "\n");
      uint32_t solution = 0;

      for (uint32_t nn = AA; nn < BB; nn++)
      {
         itoa(nn, nn_as_string, 10);
         for (uint32_t mm = (AA + 1); mm <= BB; mm++)
         {
            if (nn < mm)
            {
            }
            else //if (mm >= nn)
            {
               continue;
            }
            itoa(mm, mm_as_string, 10);

            uint32_t nn_string_len = strlen(nn_as_string);
            uint32_t mm_string_len = strlen(mm_as_string);

            if (nn_string_len != mm_string_len)
            {
               continue;
            }

            // try an nn, mm pair
            uint32_t zz;
            uint32_t yy;

            int32_t mms_found[8];
            uint32_t num_mms_found = 0;
            for (uint32_t gg = 0; gg < 8; gg++)
            {
               mms_found[gg] = -1;
            }

            for (zz = 0; zz < nn_string_len; zz++) // try nn all combinations seeing if match mm
            {
               for (yy = 0; yy < nn_string_len; yy++)
               {
                  if (nn_as_string[(zz + yy) % nn_string_len] != mm_as_string[yy])
                  {
                     goto next;
                  }
               }

               // found a rotation of nn that match mm

               for (uint32_t gg = 0; gg < 8; gg++)
               {
                  if ((uint32_t)mms_found[gg] == mm)
                  {
                     goto next;
                  }
               }
               mms_found[num_mms_found] = mm;
               num_mms_found++;

               solution++;
               //dual_printf("nn:  %d, mm:  %d, [zz] -> %d\n", nn, mm, zz);

               next:
            } // try nn all combinations seeing if match mm
         } // mm loop
      } // nn loop


      dual_printf("Case #%d: %d\n", test_case_num + 1, solution);
   }


   fclose(input_file);


   return 0;
}


/*******************************************************************************
 * END OF FILE
 ******************************************************************************/


