#include <vector>
#include <list>
#include <set>
#include <deque>
#include <queue>
#include <stack>
#include <map>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <cctype>
#include <cstring>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
using namespace std;

// Constants
const int INF = 0X3F3F3F3F;
const double PI = acos(-1.0); //3.1415926535897932384626433832795;
const double EPS = 1e-9;
const int days[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
const int dx[] = {-1, 0, 1, 0}, dy[] = {0, 1, 0, -1}; //4 direction
//const int dx[] = {-1,-1,-1,0,1,1,1,0},dy[] = {-1,0,1,1,1,0,-1,-1}; //8 direction
//const int dx[] = {2,1,-1,-2,-2,-1,1,2},dy[] = {1,2,2,1,-1,-2,-2,-1}; //Knight direction
//const int dx[] = {0,1,1,0,-1,-1},dy[] = {1,1,0,-1,-1,0}; //Hexagonal direction(col x row y)

// Deinfe
#define PB push_back
#define MP make_pair
#define SZ size()
#define V vector
#define A first
#define B second

#define FOR(i,s,e) for(int i=(s);i<=(int)(e);++i)
#define FORD(i,s,e) for(int i=(s);i>=(int)(e);--i)
#define REP(i,n) for(int i=0;i<(int)(n);++i)
#define REPD(i,n) for(int i=(n)-1;i>=0;--i)
#define FIT(it,x) for(typeof((x).begin()) it = (x).begin();it != (x).end();it++)
#define FITD(it,x) for(typeof((x).rbegin()) it = (x).rbegin();it != (x).rend();it++)

#define LET(a,b) typeof(b) a(b)
#define ALL(x) (x).begin(),(x).end()
#define CLR(x) memset((x),0,sizeof(x))
#define SET(a,b) memset((a),b,sizeof(a))
#define EXIST(a,b) (find(all(a),b)!=a.end())
#define SORT(x) sort(ALL(x))
#define GSORT(x) sort(ALL(x),greater<typeof((x).begin())>())
#define gsort(a,b) sort(a,b,greater<typeof(*a)>())
#define DEBUG(x) cerr << #x << ":" << x << '@' << endl
#define PRV(v) REP(vi,v.size()) cout << v[vi] << ' ';cout << endl

inline int sgn(double x) {
    return x < -EPS ? -1 : x > EPS ? 1 : 0;
}

inline int sgn(int x) {
    return x < 0 ? -1 : x > 0 ? 1 : 0;
}

template<class T> inline T sqr(const T& x) {
    return x * x;
}

template<class T> inline int toint(const T& x) {
    stringstream ss;
    ss << x;
    int r;
    ss >> r;
    return r;
}

template<class T> inline int todouble(const T& x) {
    stringstream ss;
    ss << x;
    double r;
    ss >> r;
    return r;
}

template<class T> inline string tostr(const T& x) {
    ostringstream os("");
    os << x;
    return os.str();
}

template<class T> inline istream& operator <<(istream& is, const T& a) {
    is.putback(a);
    return is;
}

inline string tolower(string s) {
    REP(i, s.SZ) s[i] = tolower(s[i]);
    return s;
}

inline string toupper(string s) {
    REP(i, s.SZ) s[i] = toupper(s[i]);
    return s;
}

template<class T> void vtos(vector<T> vi, string &s) {
    ostringstream sout;
    for (int i = 0; i < vi.size(); i++) {
        if (i > 0)sout << ' ';
        sout << vi[i];
    }
    s = sout.str();
}

// Math

template<class T> inline T gcd(T a, T b)//NOTES:gcd(
{
    if (a < 0)return gcd(-a, b);
    if (b < 0)return gcd(a, -b);
    return (b == 0) ? a : gcd(b, a % b);
}

template<class T> inline T lcm(T a, T b)//NOTES:lcm(
{
    if (a < 0)return lcm(-a, b);
    if (b < 0)return lcm(a, -b);
    return a * (b / gcd(a, b));
}

template<class T> inline vector<pair<T, int> > factorize(T n)//NOTES:factorize(
{
    vector<pair<T, int> > R;
    for (T i = 2; n > 1;) {
        if (n % i == 0) {
            int C = 0;
            for (; n % i == 0; C++, n /= i);
            R.push_back(make_pair(i, C));
        }
        i++;
        if (i > n / i) i = n;
    }
    if (n > 1) R.push_back(make_pair(n, 1));
    return R;
}

template<class T> inline bool isprime(T n)//NOTES:isPrimeNumber(
{
    if (n < 2)return false;
    for (T i = 2; i * i <= n; i++) if (n % i == 0) return false;
    return true;
}

template<class T> inline T phi(T n)//NOTES:phi(
{
    vector<pair<T, int> > R = factorize(n);
    T r = n;
    for (int i = 0; i < R.size(); i++)r = r / R[i].first * (R[i].first - 1);
    return r;
}

// Types
typedef long long LL;
typedef priority_queue<int> pq;
typedef priority_queue<int, vector<int>, greater<int> > pqg;

inline long long int_in() {
    long long x;

#ifdef LOCAL
    scanf("%lld", &x);
#else
    scanf("%I64d", &x);
#endif

    return x;
}
//#define LOCAL

inline void int_out(long long x, char end = '\n') {
#ifdef LOCAL
    printf("%lld%c", x, end);
#else
    printf("%I64d%c", x, end);
#endif
}

#define mem(x) memset(x,0,sizeof(x))
#define mem1(x) memset(x,-1,sizeof(x))

double dd[1550] = {1.000000, 1.000000, 1.000000, 2.00000000, 2.37500000,
    2.75000000, 3.06250000, 3.37500000, 3.64843750, 3.92187500, 4.16796875, 4.41406250, 4.63964844, 4.86523438, 5.07470703, 5.28417969, 5.48056030, 5.67694092, 5.86241150, 6.04788208, 6.22407913, 6.40027618, 6.56846428, 6.73665237, 6.89783263, 7.05901289, 7.21399391, 7.36897492, 7.51842090, 7.66786689, 7.81233133, 7.95679578, 8.09674572, 8.23669565, 8.37252941, 8.50836317, 8.64042377, 8.77248437, 8.90106969, 9.02965501, 9.15502570, 9.28039638, 9.40278206, 9.52516773, 9.64477191, 9.76437608, 9.88138017, 9.99838426, 10.11295076, 10.22751727, 10.33979244, 10.45206761, 10.56218365, 10.67229968, 10.78037653, 10.88845338, 10.99460028, 11.10074719, 11.20506397, 11.30938076, 11.41195893, 11.51453711, 11.61546079, 11.71638448, 11.81573123, 11.91507799, 12.01291949, 12.11076099, 12.20716364, 12.30356630, 12.39859177, 12.49361724, 12.58732292, 12.68102859, 12.77346798, 12.86590736, 12.95713043, 13.04835351, 13.13840706, 13.22846060, 13.31738848, 13.40631636, 13.49415975, 13.58200315, 13.66880078, 13.75559842, 13.84138678, 13.92717515, 14.01198864, 14.09680214, 14.18067326, 14.26454438, 14.34750386, 14.43046334, 14.51254028, 14.59461721, 14.67583917, 14.75706114, 14.83745431, 14.91784748, 14.99743671, 15.07702595, 15.15583490, 15.23464385, 15.31269503, 15.39074620, 15.46806104, 15.54537588, 15.62197484, 15.69857380, 15.77447641, 15.85037902, 15.92560393, 16.00082883, 16.07539387, 16.14995891, 16.22388115, 16.29780338, 16.37109916, 16.44439494, 16.51707992, 16.58976490, 16.66185410, 16.73394330, 16.80545113, 16.87695897, 16.94789928, 17.01883960, 17.08922569, 17.15961178, 17.22945644, 17.29930110, 17.36861664, 17.43793217, 17.50673042, 17.57552868, 17.64382106, 17.71211345, 17.77991096, 17.84770847, 17.91502172, 17.98233496, 18.04917417, 18.11601338, 18.18238842, 18.24876347, 18.31468389, 18.38060432, 18.44607933, 18.51155435, 18.57659286, 18.64163137, 18.70624200, 18.77085263, 18.83504371, 18.89923479, 18.96301439, 19.02679399, 19.09016992, 19.15354585, 19.21652568, 19.27950551, 19.34209658, 19.40468765, 19.46689706, 19.52910647, 19.59094113, 19.65277579, 19.71424238, 19.77570898, 19.83681400, 19.89791903, 19.95866880, 20.01941856, 20.07981919, 20.14021982, 20.20027726, 20.26033470, 20.32005474, 20.37977478, 20.43916305, 20.49855131, 20.55761327, 20.61667522, 20.67541618, 20.73415715, 20.79258230, 20.85100746, 20.90912184, 20.96723622, 21.02504474, 21.08285325, 21.14036068, 21.19786811, 21.25507911, 21.31229011, 21.36920922, 21.42612833, 21.48275997, 21.53939160, 21.59574008, 21.65208856, 21.70815809, 21.76422761, 21.82002229, 21.87581697, 21.93134079, 21.98686462, 22.04212151, 22.09737839, 22.15237215, 22.20736591, 22.26210026, 22.31683462, 22.37131320, 22.42579179, 22.48001816, 22.53424453, 22.58822215, 22.64219978, 22.69593205, 22.74966432, 22.80315456, 22.85664479, 22.90989623, 22.96314767, 23.01616348, 23.06917930, 23.12196258, 23.17474587, 23.22729967, 23.27985346, 23.33218073, 23.38450800, 23.43661165, 23.48871530, 23.54059817, 23.59248105, 23.64414592, 23.69581080, 23.74726040, 23.79871001, 23.84994701, 23.90118402, 23.95221103, 24.00323805, 24.05405764, 24.10487723, 24.15549190, 24.20610657, 24.25651879, 24.30693100, 24.35714316, 24.40735533, 24.45736981, 24.50738429, 24.55720340, 24.60702251, 24.65664852, 24.70627453, 24.75570968, 24.80514482, 24.85439128, 24.90363774, 24.95269766, 25.00175758, 25.05063306, 25.09950855, 25.14820166, 25.19689477, 25.24540754, 25.29392031, 25.34225472, 25.39058913, 25.43874714, 25.48690515, 25.53488868, 25.58287220, 25.63068312, 25.67849404, 25.72613421, 25.77377438, 25.82124561, 25.86871684, 25.91602092, 25.96332500, 26.01046368, 26.05760236, 26.10457736, 26.15155237, 26.19836539, 26.24517841, 26.29183111, 26.33848381, 26.38497783, 26.43147185, 26.47780880, 26.52414575, 26.57032720, 26.61650865, 26.66253617, 26.70856368, 26.75443879, 26.80031389, 26.84603809, 26.89176229, 26.93733707, 26.98291184, 27.02833865, 27.07376545, 27.11904572, 27.16432599, 27.20946112, 27.25459626, 27.29958766, 27.34457905, 27.38942807, 27.43427709, 27.47898507, 27.52369305, 27.56826132, 27.61282959, 27.65725945, 27.70168931, 27.74598204, 27.79027477, 27.83443164, 27.87858850, 27.92261074, 27.96663298, 28.01052181, 28.05441065, 28.09816730, 28.14192394, 28.18554957, 28.22917521, 28.27267100, 28.31616680, 28.35953391, 28.40290102, 28.44614058, 28.48938014, 28.53249327, 28.57560640, 28.61859420, 28.66158200, 28.70444556, 28.74730912, 28.79004950, 28.83278989, 28.87540816, 28.91802643, 28.96052363, 29.00302082, 29.04539797, 29.08777512, 29.13003323, 29.17229134, 29.21443141, 29.25657149, 29.29859450, 29.34061752, 29.38252445, 29.42443138, 29.46622318, 29.50801498, 29.54969260, 29.59137021, 29.63293457, 29.67449894, 29.71595096, 29.75740299, 29.79874358, 29.84008418, 29.88131424, 29.92254430, 29.96366470, 30.00478511, 30.04579673, 30.08680835, 30.12771204, 30.16861574, 30.20941235, 30.25020897, 30.29089935, 30.33158972, 30.37217469, 30.41275965, 30.45324001, 30.49372037, 30.53409693, 30.57447350, 30.61474706, 30.65502062, 30.69519197, 30.73536331, 30.77543322, 30.81550312, 30.85547235, 30.89544157, 30.93531087, 30.97518017, 31.01495030, 31.05472042, 31.09439211, 31.13406379, 31.17363776, 31.21321173, 31.25268871, 31.29216568, 31.33154637, 31.37092706, 31.41021217, 31.44949727, 31.48868749, 31.52787770, 31.56697371, 31.60606972, 31.64507219, 31.68407467, 31.72298428, 31.76189389, 31.80071130, 31.83952871, 31.87825457, 31.91698043, 31.95561538, 31.99425034, 32.03279502, 32.07133971, 32.10979475, 32.14824980, 32.18661583, 32.22498186, 32.26325949, 32.30153712, 32.33972695, 32.37791679, 32.41601943, 32.45412208, 32.49213813, 32.53015417, 32.56808421, 32.60601425, 32.64385886, 32.68170347, 32.71946323, 32.75722299, 32.79489846, 32.83257393, 32.87016568, 32.90775743, 32.94526601, 32.98277459, 33.02020056, 33.05762652, 33.09497041, 33.13231430, 33.16957665, 33.20683900, 33.24402035, 33.28120169, 33.31830256, 33.35540343, 33.39242434, 33.42944525, 33.46638671, 33.50332818, 33.54019071, 33.57705324, 33.61383734, 33.65062143, 33.68732760, 33.72403377, 33.76066250, 33.79729122, 33.83384300, 33.87039478, 33.90687008, 33.94334539, 33.97974471, 34.01614403, 34.05246783, 34.08879163, 34.12504038, 34.16128913, 34.19746330, 34.23363747, 34.26973750, 34.30583754, 34.34186391, 34.37789027, 34.41384341, 34.44979655, 34.48567691, 34.52155727, 34.55736530, 34.59317332, 34.62890944, 34.66464555, 34.70031020, 34.73597484, 34.77156844, 34.80716205, 34.84268502, 34.87820800, 34.91366078, 34.94911355, 34.98449654, 35.01987952, 35.05519313, 35.09050674, 35.12575137, 35.16099601, 35.19617207, 35.23134814, 35.26645604, 35.30156393, 35.33660405, 35.37164417, 35.40661691, 35.44158964, 35.47649538, 35.51140111, 35.54624024, 35.58107936, 35.61585225, 35.65062514, 35.68533217, 35.72003920, 35.75468075, 35.78932230, 35.82389873, 35.85847516, 35.89298684, 35.92749852, 35.96194581, 35.99639311, 36.03077637, 36.06515964, 36.09947923, 36.13379882, 36.16805509, 36.20231136, 36.23650466, 36.27069797, 36.30482864, 36.33895932, 36.37302771, 36.40709610, 36.44110256, 36.47510901, 36.50905385, 36.54299870, 36.57688227, 36.61076584, 36.64458847, 36.67841110, 36.71217312, 36.74593514, 36.77963687, 36.81333859, 36.84698035, 36.88062211, 36.91420423, 36.94778634, 36.98130912, 37.01483190, 37.04829566, 37.08175942, 37.11516447, 37.14856952, 37.18191617, 37.21526283, 37.24855138, 37.28183994, 37.31507070, 37.34830147, 37.38147474, 37.41464801, 37.44776408, 37.48088016, 37.51393934, 37.54699851, 37.58000108, 37.61300365, 37.64594989, 37.67889614, 37.71178636, 37.74467658, 37.77751105, 37.81034552, 37.84312453, 37.87590354, 37.90862736, 37.94135119, 37.97402011, 38.00668903, 38.03930331, 38.07191760, 38.10447753, 38.13703746, 38.16954331, 38.20204915, 38.23450118, 38.26695321, 38.29935169, 38.33175016, 38.36409535, 38.39644054, 38.42873271, 38.46102487, 38.49326427, 38.52550367, 38.55769056, 38.58987745, 38.62201209, 38.65414673, 38.68622938, 38.71831202, 38.75034292, 38.78237381, 38.81435321, 38.84633261, 38.87826077, 38.91018892, 38.94206606, 38.97394321, 39.00576960, 39.03759599, 39.06937186, 39.10114773, 39.13287332, 39.16459891, 39.19627446, 39.22795001, 39.25957576, 39.29120151, 39.32277768, 39.35435386, 39.38588070, 39.41740754, 39.44888527, 39.48036300, 39.51179185, 39.54322071, 39.57460091, 39.60598111, 39.63731289, 39.66864466, 39.69992824, 39.73121181, 39.76244740, 39.79368299, 39.82487082, 39.85605865, 39.88719894, 39.91833923, 39.94943219, 39.98052516, 40.01157101, 40.04261686, 40.07361582, 40.10461477, 40.13556704, 40.16651931, 40.19742511, 40.22833090, 40.25919043, 40.29004996, 40.32086343, 40.35167690, 40.38244452, 40.41321214, 40.44393410, 40.47465607, 40.50533259, 40.53600911, 40.56664039, 40.59727166, 40.62785789, 40.65844412, 40.68898550, 40.71952688, 40.75002361, 40.78052034, 40.81097262, 40.84142489, 40.87183290, 40.90224092, 40.93260486, 40.96296880, 40.99328887, 41.02360893, 41.05388531, 41.08416168, 41.11439456, 41.14462743, 41.17481699, 41.20500655, 41.23515299, 41.26529942, 41.29540291, 41.32550640, 41.35556713, 41.38562786, 41.41564601, 41.44566416, 41.47563991, 41.50561566, 41.53554919, 41.56548272, 41.59537421, 41.62526571, 41.65511533, 41.68496496, 41.71477289, 41.74458083, 41.77434725, 41.80411367, 41.83383875, 41.86356383, 41.89324774, 41.92293165, 41.95257456, 41.98221746, 42.01181954, 42.04142162, 42.07098304, 42.10054445, 42.13006537, 42.15958629, 42.18906689, 42.21854748, 42.24798791, 42.27742833, 42.30682876, 42.33622919, 42.36558978, 42.39495036, 42.42427128, 42.45359219, 42.48287359, 42.51215498, 42.54139702, 42.57063906, 42.59984190, 42.62904474, 42.65820854, 42.68737234, 42.71649726, 42.74562217, 42.77470836, 42.80379454, 42.83284215, 42.86188976, 42.89089895, 42.91990813, 42.94887905, 42.97784997, 43.00678276, 43.03571556, 43.06461038, 43.09350521, 43.12236222, 43.15121922, 43.18003856, 43.20885789, 43.23763970, 43.26642151, 43.29516594, 43.32391037, 43.35261756, 43.38132476, 43.40999486, 43.43866497, 43.46729813, 43.49593129, 43.52452765, 43.55312400, 43.58168370, 43.61024339, 43.63876657, 43.66728974, 43.69577653, 43.72426333, 43.75271387, 43.78116442, 43.80957887, 43.83799331, 43.86637179, 43.89475027, 43.92309291, 43.95143556, 43.97974251, 44.00804946, 44.03632084, 44.06459223, 44.09282819, 44.12106415, 44.14926482, 44.17746548, 44.20563098, 44.23379649, 44.26192696, 44.29005743, 44.31815300, 44.34624857, 44.37430936, 44.40237016, 44.43039631, 44.45842247, 44.48641411, 44.51440575, 44.54236300, 44.57032025, 44.59824324, 44.62616623, 44.65405509, 44.68194394, 44.70979878, 44.73765363, 44.76547459, 44.79329554, 44.82108274, 44.84886993, 44.87662348, 44.90437704, 44.93209707, 44.95981711, 44.98750374, 45.01519038, 45.04284374, 45.07049710, 45.09811730, 45.12573750, 45.15332467, 45.18091183, 45.20846607, 45.23602032, 45.26354176, 45.29106320, 45.31855195, 45.34604071, 45.37349689, 45.40095308, 45.42837681, 45.45580054, 45.48319193, 45.51058332, 45.53794249, 45.56530166, 45.59262871, 45.61995577, 45.64725082, 45.67454588, 45.70180905, 45.72907222, 45.75630361, 45.78353501, 45.81073474, 45.83793447, 45.86510264, 45.89227082, 45.91940755, 45.94654428, 45.97364967, 46.00075507, 46.02782924, 46.05490340, 46.08194645, 46.10898950, 46.13600154, 46.16301357, 46.18999470, 46.21697583, 46.24392616, 46.27087649, 46.29779612, 46.32471575, 46.35160480, 46.37849384, 46.40535240, 46.43221095, 46.45903913, 46.48586730, 46.51266519, 46.53946309, 46.56623080, 46.59299852, 46.61973616, 46.64647380, 46.67318146, 46.69988913, 46.72656692, 46.75324471, 46.77989272, 46.80654074, 46.83315908, 46.85977742, 46.88636619, 46.91295495, 46.93951424, 46.96607353, 46.99260344, 47.01913334, 47.04563397, 47.07213459, 47.09860603, 47.12507747, 47.15151982, 47.17796217, 47.20437553, 47.23078889, 47.25717335, 47.28355780, 47.30991346, 47.33626911, 47.36259605, 47.38892300, 47.41522133, 47.44151965, 47.46778946, 47.49405926, 47.52030064, 47.54654201, 47.57275505, 47.59896808, 47.62515287, 47.65133766, 47.67749429, 47.70365093, 47.72977949, 47.75590806, 47.78200866, 47.80810925, 47.83418196, 47.86025466, 47.88629958, 47.91234449, 47.93836169, 47.96437890, 47.99036848, 48.01635807, 48.04232012, 48.06828218, 48.09421679, 48.12015140, 48.14605865, 48.17196590, 48.19784588, 48.22372587, 48.24957866, 48.27543146, 48.30125716, 48.32708286, 48.35288154, 48.37868022, 48.40445198, 48.43022373, 48.45596864, 48.48171355, 48.50743169, 48.53314984, 48.55884131, 48.58453278, 48.61019765, 48.63586252, 48.66150088, 48.68713924, 48.71275116, 48.73836309, 48.76394867, 48.78953425, 48.81509356, 48.84065287, 48.86618599, 48.89171911, 48.91722612, 48.94273314, 48.96821412, 48.99369511, 49.01915015, 49.04460519, 49.07003435, 49.09546352, 49.12086690, 49.14627028, 49.17164795, 49.19702562, 49.22237765, 49.24772968, 49.27305616, 49.29838264, 49.32368363, 49.34898463, 49.37426023, 49.39953582, 49.42478609, 49.45003636, 49.47526137, 49.50048639, 49.52568624, 49.55088608, 49.57606082, 49.60123557, 49.62638529, 49.65153501, 49.67665978, 49.70178455, 49.72688444, 49.75198433, 49.77705942, 49.80213451, 49.82718488, 49.85223524, 49.87726095, 49.90228665, 49.92728777, 49.95228890, 49.97726551, 50.00224212, 50.02719430, 50.05214647, 50.07707427, 50.10200208, 50.12690559, 50.15180910, 50.17668838, 50.20156767, 50.22642280, 50.25127793, 50.27610897, 50.30094002, 50.32574705, 50.35055408, 50.37533717, 50.40012025, 50.42487946, 50.44963867, 50.47437408, 50.49910948, 50.52382115, 50.54853281, 50.57322081, 50.59790880, 50.62257319, 50.64723758, 50.67187844, 50.69651930, 50.72113669, 50.74575408, 50.77034807, 50.79494206, 50.81951271, 50.84408337, 50.86863076, 50.89317815, 50.91770233, 50.94222652, 50.96672757, 50.99122862, 51.01570660, 51.04018458, 51.06463955, 51.08909453, 51.11352656, 51.13795859, 51.16236775, 51.18677691, 51.21116325, 51.23554959, 51.25991319, 51.28427679, 51.30861770, 51.33295861, 51.35727690, 51.38159519, 51.40589092, 51.43018665, 51.45445988, 51.47873312, 51.50298392, 51.52723472, 51.55146315, 51.57569158, 51.59989770, 51.62410382, 51.64828769, 51.67247156, 51.69663324, 51.72079493, 51.74493449, 51.76907404, 51.79319154, 51.81730903, 51.84140452, 51.86550000, 51.88957355, 51.91364709, 51.93769875, 51.96175041, 51.98578024, 52.00981007, 52.03381814, 52.05782620, 52.08181256, 52.10579892, 52.12976363, 52.15372834, 52.17767146, 52.20161458, 52.22553617, 52.24945776, 52.27335788, 52.29725799, 52.32113669, 52.34501539, 52.36887273, 52.39273008, 52.41656612, 52.44040216, 52.46421695, 52.48803175, 52.51182536, 52.53561897, 52.55939144, 52.58316392, 52.60691532, 52.63066673, 52.65439711, 52.67812749, 52.70183691, 52.72554633, 52.74923485, 52.77292336, 52.79659102, 52.82025868, 52.84390554, 52.86755240, 52.89117852, 52.91480464, 52.93841007, 52.96201550, 52.98560030, 53.00918510, 53.03274931, 53.05631353, 53.07985722, 53.10340091, 53.12692413, 53.15044735, 53.17395015, 53.19745294, 53.22093538, 53.24441781, 53.26787993, 53.29134205, 53.31478390, 53.33822576, 53.36164741, 53.38506906, 53.40847055, 53.43187204, 53.45525343, 53.47863482, 53.50199616, 53.52535749, 53.54869883, 53.57204016, 53.59536155, 53.61868293, 53.64198442, 53.66528590, 53.68856754, 53.71184918, 53.73511102, 53.75837286, 53.78161495, 53.80485705, 53.82807944, 53.85130184, 53.87450459, 53.89770734, 53.92089049, 53.94407365, 53.96723725, 53.99040086, 54.01354497, 54.03668908, 54.05981374, 54.08293840, 54.10604365, 54.12914891, 54.15223482, 54.17532073, 54.19838734, 54.22145394, 54.24450129, 54.26754864, 54.29057679, 54.31360494, 54.33661392, 54.35962291, 54.38261279, 54.40560266, 54.42857348, 54.45154429, 54.47449609, 54.49744789, 54.52038072, 54.54331355, 54.56622745, 54.58914136, 54.61203640, 54.63493143, 54.65780763, 54.68068384, 54.70354126, 54.72639869, 54.74923738, 54.77207606, 54.79489606, 54.81771606, 54.84051741, 54.86331877, 54.88610153, 54.90888428, 54.93164849, 54.95441269, 54.97715839, 54.99990408, 55.02263132, 55.04535855, 55.06806737, 55.09077618, 55.11346663, 55.13615707, 55.15882918, 55.18150130, 55.20415513, 55.22680896, 55.24944455, 55.27208014, 55.29469754, 55.31731494, 55.33991418, 55.36251342, 55.38509456, 55.40767569, 55.43023876, 55.45280183, 55.47534688, 55.49789193, 55.52041900, 55.54294607, 55.56545521, 55.58796434, 55.61045558, 55.63294682, 55.65542022, 55.67789361, 55.70034919, 55.72280477, 55.74524259, 55.76768041, 55.79010051, 55.81252060, 55.83492301, 55.85732543, 55.87971020, 55.90209498, 55.92446215, 55.94682933, 55.96917895, 55.99152857, 56.01386067, 56.03619277, 56.05850740, 56.08082203, 56.10311923, 56.12541642, 56.14769623, 56.16997603, 56.19223848, 56.21450093, 56.23674607, 56.25899121, 56.28121908, 56.30344695, 56.32565759, 56.34786823, 56.37006168, 56.39225512, 56.41443142, 56.43660772, 56.45876690, 56.48092609, 56.50306820, 56.52521031, 56.54733540, 56.56946048, 56.59156856, 56.61367665, 56.63576779, 56.65785892, 56.67993314, 56.70200736, 56.72406470, 56.74612204, 56.76816255, 56.79020305, 56.81222676, 56.83425046, 56.85625741, 56.87826435, 56.90025457, 56.92224479, 56.94421833, 56.96619187, 56.98814876, 57.01010565, 57.03204593, 57.05398621, 57.07590993, 57.09783364, 57.11974081, 57.14164799, 57.16353867, 57.18542935, 57.20730357, 57.22917780, 57.25103559, 57.27289339, 57.29473481, 57.31657622, 57.33840129, 57.36022635, 57.38203511, 57.40384386, 57.42563634, 57.44742882, 57.46920506, 57.49098130, 57.51274134, 57.53450138, 57.55624525, 57.57798912, 57.59971686, 57.62144460, 57.64315625, 57.66486789, 57.68656348, 57.70825907, 57.72993863, 57.75161820, 57.77328177, 57.79494535, 57.81659297, 57.83824059, 57.85987230, 57.88150401, 57.90311983, 57.92473565, 57.94633563, 57.96793561, 57.98951977, 58.01110393, 58.03267232, 58.05424071, 58.07579335, 58.09734599, 58.11888293, 58.14041986, 58.16194112, 58.18346238, 58.20496800, 58.22647361, 58.24796363, 58.26945364, 58.29092808, 58.31240252, 58.33386142, 58.35532032, 58.37676372, 58.39820711, 58.41963504, 58.44106296, 58.46247545, 58.48388794, 58.50528502, 58.52668210, 58.54806381, 58.56944552, 58.59081189, 58.61217826, 58.63352933, 58.65488040, 58.67621619, 58.69755199, 58.71887254, 58.74019309, 58.76149844, 58.78280379, 58.80409396, 58.82538413, 58.84665916, 58.86793419, 58.88919411, 58.91045403, 58.93169887, 58.95294372, 58.97417351, 58.99540331, 59.01661809, 59.03783287, 59.05903267, 59.08023247, 59.10141732, 59.12260217, 59.14377210, 59.16494203, 59.18609707, 59.20725212, 59.22839230, 59.24953249, 59.27065785, 59.29178321, 59.31289378, 59.33400435, 59.35510016, 59.37619596, 59.39727704, 59.41835811, 59.43942448, 59.46049086, 59.48154256, 59.50259426, 59.52363133, 59.54466839, 59.56569084, 59.58671330, 59.60772117, 59.62872905, 59.64972238, 59.67071570, 59.69169451, 59.71267332, 59.73363764, 59.75460196, 59.77555183, 59.79650169, 59.81743712, 59.83837256, 59.85929359, 59.88021463, 59.90112130, 59.92202796, 59.94292029, 59.96381262, 59.98469064, 60.00556866, 60.02643239, 60.04729613, 60.06814562, 60.08899510, 60.10983037, 60.13066563, 60.15148670, 60.17230778, 60.19311468, 60.21392159, 60.23471436, 60.25550713, 60.27628580, 60.29706447, 60.31782906, 60.33859364, 60.35934418, 60.38009472, 60.40083124, 60.42156776, 60.44229028, 60.46301281, 60.48372137, 60.50442994, 60.52512456, 60.54581919, 60.56649991, 60.58718063, 60.60784747, 60.62851430, 60.64916729, 60.66982028, 60.69045944, 60.71109861, 60.73172397, 60.75234934, 60.77296094, 60.79357254, 60.81417039, 60.83476825, 60.85535240, 60.87593654, 60.89650700};


int solve(int n, int b) {
    int mod = 1;
    while (mod * 10 <= n)
        mod *= 10;
    int cnt = 0;
    int m = n;
    do {
        //m = nextInt(m, mod);
        int high = m / mod;
        m = m % mod * 10 + high;
        if (n < m && m <= b)
            cnt++;
    } while (m != n);
    return cnt;
}

int main() {
    freopen("C-small-attempt0.in", "r", stdin);
    freopen("out.out", "w", stdout);
    int T, A, B, ans;
    scanf("%d", &T);
    for (int index = 1; index <= T; index++) {
        scanf("%d%d", &A, &B);
        ans = 0;
        for (int i = A; i <= B; i++)
            ans += solve(i, B);
        printf("Case #%d: %d\n", index, ans);
    }
    return 0;
}

